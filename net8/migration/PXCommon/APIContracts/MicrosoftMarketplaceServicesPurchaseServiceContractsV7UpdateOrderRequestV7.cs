// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Commerce.Payments.PXCommon
{
    using Microsoft.Commerce.Payments.Common;
    using Microsoft.Commerce.Payments.Common.Web;
    using Newtonsoft.Json;
    using System.Collections.Generic;

    public partial class MicrosoftMarketplaceServicesPurchaseServiceContractsV7UpdateOrderRequestV7
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftMarketplaceServicesPurchaseServiceContractsV7UpdateOrderRequestV7
        /// class.
        /// </summary>
        public MicrosoftMarketplaceServicesPurchaseServiceContractsV7UpdateOrderRequestV7()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftMarketplaceServicesPurchaseServiceContractsV7UpdateOrderRequestV7
        /// class.
        /// </summary>
        /// <param name="friendlyName">Gets or sets the friendly name for the
        /// order. The client
        /// can use this for filtering during order retrieval.</param>
        /// <param name="removePromoCode">Gets or sets the remove promo code
        /// flag for removing promo code</param>
        /// <param name="orderAdditionalMetadata">Gets or sets opaque metadata
        /// for order.</param>
        /// <param name="orderState">Gets or sets the state of the
        /// order.</param>
        /// <param name="previewEligibility">Gets or sets the preview
        /// eligibility bool which mocks the purchase flow
        /// but allows the caller to preview purchase errors without changing
        /// state</param>
        /// <param name="previewFees">Gets or sets the preview fees bool which
        /// mocks the checkout flow
        /// but allows the caller to preview fees, delivery cost, and taxes
        /// without changing state</param>
        /// <param name="promoCodes">Gets the promo codes applied to this
        /// order</param>
        public MicrosoftMarketplaceServicesPurchaseServiceContractsV7UpdateOrderRequestV7(MicrosoftMarketplaceServicesPurchaseServiceContractsV7ClientContextV7 clientContext, MicrosoftMarketplaceServicesPurchaseServiceContractsV7BillingInformationV7 billingInformation = default(MicrosoftMarketplaceServicesPurchaseServiceContractsV7BillingInformationV7), string friendlyName = default(string), bool? removePromoCode = default(bool?), string orderAdditionalMetadata = default(string), string orderState = default(string), bool? previewEligibility = default(bool?), bool? previewFees = default(bool?), IList<string> promoCodes = default(IList<string>))
        {
            BillingInformation = billingInformation;
            ClientContext = clientContext;
            FriendlyName = friendlyName;
            RemovePromoCode = removePromoCode;
            OrderAdditionalMetadata = orderAdditionalMetadata;
            OrderState = orderState;
            PreviewEligibility = previewEligibility;
            PreviewFees = previewFees;
            PromoCodes = promoCodes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "billingInformation")]
        public MicrosoftMarketplaceServicesPurchaseServiceContractsV7BillingInformationV7 BillingInformation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "clientContext")]
        public MicrosoftMarketplaceServicesPurchaseServiceContractsV7ClientContextV7 ClientContext { get; set; }

        /// <summary>
        /// Gets or sets the friendly name for the order. The client
        /// can use this for filtering during order retrieval.
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets the remove promo code flag for removing promo code
        /// </summary>
        [JsonProperty(PropertyName = "removePromoCode")]
        public bool? RemovePromoCode { get; set; }

        /// <summary>
        /// Gets or sets opaque metadata for order.
        /// </summary>
        [JsonProperty(PropertyName = "orderAdditionalMetadata")]
        public string OrderAdditionalMetadata { get; set; }

        /// <summary>
        /// Gets or sets the state of the order.
        /// </summary>
        [JsonProperty(PropertyName = "orderState")]
        public string OrderState { get; set; }

        /// <summary>
        /// Gets or sets the preview eligibility bool which mocks the purchase
        /// flow
        /// but allows the caller to preview purchase errors without changing
        /// state
        /// </summary>
        [JsonProperty(PropertyName = "previewEligibility")]
        public bool? PreviewEligibility { get; set; }

        /// <summary>
        /// Gets or sets the preview fees bool which mocks the checkout flow
        /// but allows the caller to preview fees, delivery cost, and taxes
        /// without changing state
        /// </summary>
        [JsonProperty(PropertyName = "previewFees")]
        public bool? PreviewFees { get; set; }

        /// <summary>
        /// Gets the promo codes applied to this order
        /// </summary>
        [JsonProperty(PropertyName = "promoCodes")]
        public IList<string> PromoCodes { get; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ClientContext == null)
            {
                throw new ValidationException(ErrorCode.CannotBeNull, "ClientContext");
            }
            if (BillingInformation != null)
            {
                BillingInformation.Validate();
            }
            if (ClientContext != null)
            {
                ClientContext.Validate();
            }
        }
    }
}
