#################################################################################
#                        OneBranch Pipelines - Official                         #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none # https://aka.ms/obpipelines/triggers

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 0
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none

  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2019:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      credscan:
         suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
      binskim:
        break: false # always break the build on binskim issues. You can disable it by setting to 'false'
      policheck:
        break: false # always break the build on policheck issues. You can disable it by setting to 'false'
      cg:
        failOnAlert: false

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          type: windows  # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
        
        variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
          ob_outputDirectory: '$(REPOROOT)\out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
          ob_sdl_binskim_break: true # https://aka.ms/obpipelines/sdl

        steps:
       
          - task: onebranch.pipeline.signing@1
            displayName: 'Sign Geneva Automation JSON'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              files_to_sign: '**/*.json'
              search_root: '$(Build.SourcesDirectory)'
          
          - task: CmdLine@2
            displayName: 'Build Geneva Automation resources'
            inputs:
              script: '.build\build.cmd'
            
          - task: onebranch.pipeline.signing@1
            displayName: 'Sign Geneva Automation Zip'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              files_to_sign: '**/*.zip'
              search_root: '$(Build.SourcesDirectory)'

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)\private\Payments\GenevaWorkflow\workflows'
              Contents: '**'
              TargetFolder: '$(Build.SourcesDirectory)\out\GenevaAutomationResources'
          
          # place connection files into build output artifact
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)\private\Payments\GenevaWorkflow\connections'
              Contents: '**'
              TargetFolder: '$(Build.SourcesDirectory)\out\GenevaAutomationResources'
          
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)\ServiceGroupRoot'
              Contents: '**'
              TargetFolder: '$(Build.SourcesDirectory)\out\ServiceGroupRoot'