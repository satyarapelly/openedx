var express = require('express')
var bodyParser = require('body-parser');
const appInsights = require("applicationinsights");
const CosmosClient = require("@azure/cosmos").CosmosClient;
const { DefaultAzureCredential } = require ('@azure/identity');
var dbconfig = require('./../dbconfig');
var TransactionDao = require('./../transactionDao');
var fs = require('fs');
var uuid = require('uuid/v4');
const escape = require('escape-html');

// Based 64 encoded {scenarios: "px-service-billdesk-provider,px-service-psd2-e2e-emulator", contact: "AcsEmulator"}
let DEFAULT_TEST_HEADER = "eyJzY2VuYXJpb3MiOiJweC1zZXJ2aWNlLWJpbGxkZXNrLXByb3ZpZGVyLHB4LXNlcnZpY2UtcHNkMi1lMmUtZW11bGF0b3IiLCJjb250YWN0IjoiQWNzRW11bGF0b3IifQ==";

var router = express.Router()

const credentials = new DefaultAzureCredential({ managedIdentityClientId: "d417dccc-67c5-4887-9e15-3b3a97732261" }); // CodeQL [SM05138] Not used in production, only for testing purposes;
var dbClient = new CosmosClient({ endpoint: dbconfig.host, aadCredentials: credentials });
var dao = new TransactionDao(dbClient, dbconfig.databaseId, dbconfig.collectionId);
console.log("db host: " + dbconfig.host);

// configure body-parser for express
router.use(bodyParser.urlencoded({ extended: false }));
router.use(bodyParser.json());
router.use(bodyParser.text(({ inflate: true, limit: '200kb', type: 'application/jose' })));

// middleware that is specific to this router
router.use(function timeLog(req, res, next) {
  console.log('Time: ', Date.now());
  next();
});

/*
  /authentications/create incoming params:
    orderid                 mandatory     generated by merchant
    mercid                  mandatory     unique identifier defined by billdesk for each merchant
    amount                  mandatory
    currency                mandatory
    authentication_type     mandatory     "otp" = no redirect experience, "redirect" = redirect to issuer experience
    bankid                  mandatory     unique identifier defined by billdesk
    additional_info         optional      Array of 10 additional_info value that can be added to transaction
    itemcode                mandatory     itemcode value provided by billdesk, defaults to "DIRECT"
    payment_method_type     mandatory     e.g. "card"
    card                    mandatory     payment method object, based on the payment_method_type
    customer                optional      customer object
    device                  mandatory     device object
*/
router.post('/authentications/create', function (req, res) {
  appInsights.defaultClient.trackNodeHttpRequest({ request: req, response: res });
  appInsights.defaultClient.trackTrace({ request: req });

  const isJson = isJSON(req);
  const isJose = isJOSE(req);

  if (req.headers["content-type"] != undefined && (isJson || isJose)) { // CodeQL [SM01513] Not used in production, only for testing purposes;
    let areq = req.body;

    if (!isJson) {
      try {
        areq = JSON.parse(req.body);
      } catch (e) {
        res.status(400);
        res.send("Bad Request: Request body must be JSON");

        return;
      }
    }

    let validateErrorMsg = validateAuthCreateParams(areq);

    if (validateErrorMsg !== "") {
      res.status(400);
      res.send(`Bad Request: ${validateErrorMsg}`);

      return;
    }

    let ares = JSON.parse(fs.readFileSync('billdesk/authentications-create-response.json', 'utf8'));

	  if (areq.authentication_type == "3ds2") {
		  ares = JSON.parse(fs.readFileSync('billdesk/authentications-create-response-3ds2.json', 'utf8'));
	  }
    ares.authenticationid = uuid();
    ares.id = ares.authenticationid;
    ares.mercid = areq.mercid;
    ares.orderid = areq.orderid;
    ares.amount = areq.amount;
    ares.currency = areq.currency;
    ares.authentication_type = areq.authentication_type;
    ares.authentication_date = new Date().toISOString();
    ares.bankid = areq.bankid;
    ares.additional_info = areq.additional_info;
    ares.itemcode = areq.itemcode;
    ares.payment_method_type = areq.payment_method_type;
    ares.card = areq.card;
    ares.customer = areq.customer;
    ares.device = areq.device;
    ares.ru = areq.ru;
    ares.additional_info = areq.additional_info;
    ares.attemptCount = 0;

    let json = JSON.stringify({ authenticationid: ares.authenticationid });
	  if (areq.authentication_type == "3ds2") {
		  ares.links[0].parameters.creq = Buffer.from(json, "utf8").toString("base64");
	  }
	  else {
		  ares.links[0].parameters.PaReq = Buffer.from(json, "utf8").toString("base64");
	  }


    dao.updateItem(ares, function (err) { });

    res.status(200);
    res.send(ares);
  }
  else {
    res.status(400);
    res.send("Bad Request. content-type header is not defined or content-type header does not start with 'application/json' or 'application/jose");
  }
});

/*
  /authentications/validate incoming params:
    authenticationid        mandatory     id generated by billdesk during /authentications/create call
    response_parameters     mandatory     response params received by the issuers (where next_step is "redirect") or the OTP from card holder (where next_step is "otp")
*/
router.post('/authentications/validate', function (req, res) {
  appInsights.defaultClient.trackNodeHttpRequest({ request: req, response: res });
  appInsights.defaultClient.trackTrace({ request: req });

  const isJson = isJSON(req);
  const isJose = isJOSE(req);

  if (req.headers["content-type"] != undefined && (isJson || isJose)) { // CodeQL [SM01513] Not used in production, only for testing purposes;
    let body = req.body;

    if (!isJson) {
      try {
        body = JSON.parse(req.body);
      } catch (e) {
        res.status(400);
        res.send("Bad Request: Request body must be JSON");

        return;
      }
    }

    let validateErrorMsg = validateAuthValidateParams(body);

    if (validateErrorMsg !== "") {
      res.status(400);
      res.send(`Bad Request: ${validateErrorMsg}`);

      return;
    }

    let id = body.authenticationid;

    dao.getItem(id, function (err, areq) {
      if (!areq) {
        res.status(404);
        res.setHeader('Content-Type', 'text/plain');
        res.send(`Data for authentication id: ${escape(body.authenticationid)} not found.`);

        return;
      }

		var ares = JSON.parse(fs.readFileSync('billdesk/authentications-validate-response.json', 'utf8'));

		if (body.response_parameters.hasOwnProperty("creq")) {
			ares = JSON.parse(fs.readFileSync('billdesk/authentications-validate-response-3ds2.json', 'utf8'));
		}
		else {
			ares.md = body.response_parameters.MD;
			ares.pares = body.response_parameters.PaReq;
			ares.additional_info = areq.additional_info;
		}

      ares.authenticationid = areq.authenticationid;
      ares.mercid = areq.mercid;
      ares.orderid = areq.orderid;
      ares.amount = areq.amount;
      ares.currency = areq.currency;
      ares.authentication_status = areq.authentication_status;
      ares.authentication_type = areq.authentication_type;
      ares.authentication_date = areq.authentication_date;
      ares.bankid = areq.bankid;
      ares.itemcode = areq.itemcode;
      ares.payment_method_type = areq.payment_method_type;
      ares.card = areq.card;
      ares.customer = areq.customer;
      ares.device = areq.device;
      ares.ru = areq.ru;

		if (!body.response_parameters.hasOwnProperty("creq")) {
			let json = JSON.stringify({ authenticationid: ares.authenticationid });
			ares.pares = Buffer.from(json, "utf8").toString("base64");
		}

      res.status(200);
      res.send(ares);
    });
  }
  else {
    res.status(400);
    res.send("Bad Request. content-type header is not defined or content-type header does not start with 'application/json' or 'application/jose");
  }
});

router.post('/challenge', function (req, res) {
  appInsights.defaultClient.trackNodeHttpRequest({ request: req, response: res });

  res.set('Content-Type', 'text/html; charset=utf-8');
  let resp = null;

  let id = req.body.authenticationid;

  if (!id) {
    if (req && req.body && req.body.creq && typeof req.body.creq === "string") {
      try {
        let creq = Buffer.from(req.body.creq, 'base64').toString('utf-8');
        id = JSON.parse(creq).authenticationid;
      } catch (e) {
        res.status(400);
        res.send(`"creq" field is required and has to be a base64 encoded string`);
      }
    } else if (req && req.body && req.body.PaReq && (typeof req.body.PaReq === "string")) {
      try {
        let pareq = Buffer.from(req.body.PaReq, 'base64').toString('utf-8');
        id = JSON.parse(pareq).authenticationid;
      } catch (e) {
        res.status(400);
        res.send(`"PaReq" field is required and has to be a base64 encoded string`);
      }
    } else {
      res.status(400);
      res.send(`"PaReq" or "creq" field is required and has to be a base64 encoded string`);
    }
  }

  dao.getItem(id, function (err, ares) {
    if (req.body.btnSubmit == 'Submit') { // CodeQL [SM01513] Not used in production, only for testing purposes;
      let sendAutoPostHtml = function (ares) {
        resp = fs.readFileSync('billdesk/challenge_auto_post.html', 'utf8');

        let json = JSON.stringify({
          authenticationid: ares.authenticationid,
          authentication_status: ares.authentication_status,
        });
        let pares = Buffer.from(json, "utf8").toString("base64");

        // TODO: Hardcode for now but later we need to check for => 'x-ms-test' in req.body ? req.body['x-ms-test'] : DEFAULT_TEST_HEADER;
        let encodedMsTestHeader = DEFAULT_TEST_HEADER;

        resp = resp.replace(/@@mstestheader@@/, encodedMsTestHeader);
        resp = resp.replace(/@@redirectUrl@@/, ares.ru);
        resp = resp.replace(/@@PaRes@@/, pares);

        res.status(200);
        res.send(resp);
      }

      if (ares.attemptCount >= 3) {
        ares.authentication_status = "failure";
        dao.updateItem(ares, function (err) { });

        sendAutoPostHtml(ares);

        return;
      }

      if (req.body.challengeDataEntry == "456") {
        ares.authentication_status = "success";
        dao.updateItem(ares, function (err) { });

        sendAutoPostHtml(ares);

        return
      }

      dao.updateItem(ares, function (err) { });

      sendChallengeHtmlResponse(res, req, resp, id);

      return;
    }

    if (ares.authentication_type === "3ds2") {
      if (req.body.creq === undefined) {
        res.status(400);
        res.send("Bad Request: creq field is mandatory");

        return;
      }
    } else {
      let validateErrorMsg = validateAuthChallengeParams(req.body);

      if (validateErrorMsg !== "") {
        res.status(400);
        res.send(`Bad Request: ${validateErrorMsg}`);

        return;
      }
    }

    sendChallengeHtmlResponse(res, req, resp, id);
    return;
  })
});

function sendChallengeHtmlResponse(res, req, resp, authenticationid) {
  dao.getItem(authenticationid, function (err, ares) {
    if (err && !ares) {
      res.status(404);
      res.send();

      return;
    }

    ares.attemptCount += 1;

    dao.updateItem(ares, function (err) { });

    resp = fs.readFileSync('billdesk/cres_challenge_otp.html', 'utf8');

    // TODO: Hardcode for now but later we need to check for => 'x-ms-test' in req.body ? req.body['x-ms-test'] : DEFAULT_TEST_HEADER;
    let encodedMsTestHeader = DEFAULT_TEST_HEADER;

    resp = resp.replace(/@@amount@@/g, ares.amount);
    resp = resp.replace(/@@mstestheader@@/g, encodedMsTestHeader);
    resp = resp.replace(/@@authenticationid@@/g, ares.authenticationid);

    res.status(200);
    res.send(resp);
  });
}

/*
  Validation Functions
*/

function validateAuthChallengeParams(requestBody) {
  let errorMsg = "";

  if (requestBody.MD === undefined) {
    errorMsg += `\n"MD" field is mandatory`;
  }

  if (requestBody.PaReq === undefined) {
    errorMsg += `\n"PaReq" field is mandatory`;
  }

  if (requestBody.TermUrl === undefined) {
    errorMsg += `\n"TermUrl" field is mandatory`;
  }

  return errorMsg;
}

function validateAuthValidateParams(requestBody) {
  let errorMsg = "";

  if (requestBody.authenticationid === undefined) {
    errorMsg += `\n"authenticationid" field is mandatory`;
  }

  if (requestBody.response_parameters === undefined) {
    errorMsg += `\n"response_parameters" is mandatory`;
  }

  return errorMsg;
}

function validateAuthCreateParams(requestBody) {
  let errorMsg = "";

  if (requestBody.orderid === undefined) {
    errorMsg += `\n"ordedid" field is mandatory`;
  }

  if (requestBody.mercid === undefined) {
    errorMsg += `\n"mercid" field is mandatory`;
  }

  if (requestBody.amount === undefined) {
    errorMsg += `\n"amount" field is mandatory`;
  }

  if (requestBody.currency === undefined) {
    errorMsg += `\n"currency" field is mandatory`;
  }

  if (requestBody.authentication_type === undefined) {
    errorMsg += `\n"authentication_type" field is mandatory`;
  }

  if (requestBody.itemcode === undefined) {
    errorMsg += `\n"itemcode" field is mandatory`;
  }

  if (requestBody.payment_method_type === undefined) {
    errorMsg += `\n"payment_method_type" field is mandatory`;
  }

  if (requestBody.card === undefined) {
    errorMsg += `\n"card" object is mandatory`;
  }

  if (requestBody.device === undefined) {
    errorMsg += `\n"device" object is mandatory`;
  }

  if (requestBody.ru === undefined) {
    errorMsg += `\n"ru" field is mandatory (the success redirect url)`;
  }

  return errorMsg;
}

function isJSON(req) {
  return req.headers["content-type"].startsWith("application/json");
}

function isJOSE(req) {
  return req.headers["content-type"].startsWith("application/jose");
}

module.exports = router;
