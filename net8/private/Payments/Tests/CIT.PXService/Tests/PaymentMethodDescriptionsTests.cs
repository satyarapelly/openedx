// <copyright file="PaymentMethodDescriptionsTests.cs" company="Microsoft">Copyright (c) Microsoft. All rights reserved.</copyright>

namespace CIT.PXService.Tests
{
    using global::Tests.Common.Model;
    using global::Tests.Common.Model.Pidl;
    using global::Tests.Common.Model.Pims;
    using Microsoft.Commerce.Payments.Common;
    using Microsoft.Commerce.Payments.PidlFactory.V7;
    using Microsoft.Commerce.Payments.Tests.Emulators.PXDependencyEmulators.Mocks;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading.Tasks;
    using static Microsoft.Commerce.Payments.PXCommon.ErrorConstants;
    using PXCommonConstants = Microsoft.Commerce.Payments.PXCommon.Constants;

    [TestClass]
    public class PaymentMethodDescriptionsTests : TestBase
    {
        /// <summary>
        /// Test is to validate CommercialSignUp scenario
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="partner"></param>
        /// <returns></returns>
        [DataRow("EmpAccountNoProfile", "azure", false)]
        [DataRow("EmpAccountNoProfile", "azure", true)]
        [DataRow("EmpAccountNoProfile", "smboobe", false)]
        [DataRow("EmpAccountNoProfile", "smboobe", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", false)]
        [DataRow("EmpAccountNoProfile", "commercialstores", true)]
        [DataRow("EmpAccountNoProfile", "azure", false, true)]
        [DataRow("EmpAccountNoProfile", "azure", true, true)]
        [DataRow("EmpAccountNoProfile", "smboobe", false, true)]
        [DataRow("EmpAccountNoProfile", "smboobe", true, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", false, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", true, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ValidateCommercialSignUpScenario(string accountId, string partner, bool enableCommercialSignUpScenario, bool disableInvalidPaymentInstrumentTypeFlight = false)
        {
            // Assert
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner={partner}&country=us&language=en-us&operation=add&family=credit_card&completePrerequisites=true";

            if (enableCommercialSignUpScenario)
            {
                url += "&scenario=commercialSignUp";
            }

            Dictionary<string, string> headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            if (disableInvalidPaymentInstrumentTypeFlight)
            {
                PXFlightHandler.AddToEnabledFlights("PXDisableInvalidPaymentInstrumentType");
            }

            // Act
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);

                    List<PIDLResource> pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.IsNotNull(pidls);

                    foreach (PIDLResource pidl in pidls)
                    {
                        foreach (PIDLResource linkedPidl in pidl.LinkedPidls)
                        {
                            Assert.IsNotNull(linkedPidl);
                            Assert.AreEqual("employee", linkedPidl.Identity["type"]);
                            Assert.IsNotNull(linkedPidl.DataDescription["default_address"]);
                            Assert.AreEqual("profile", linkedPidl.Identity["description_type"]);

                            List<PIDLResource> defaultAddressPidl = linkedPidl.DataDescription["default_address"] as List<PIDLResource>;
                            Assert.IsNotNull(defaultAddressPidl);

                            Dictionary<string, object> addressDictionary = defaultAddressPidl[0].DataDescription;
                            Assert.AreEqual(addressDictionary.ContainsKey("first_name"), true);
                            Assert.AreEqual(addressDictionary.ContainsKey("last_name"), true);

                            PropertyDescription firstName = addressDictionary["first_name"] as PropertyDescription;
                            PropertyDescription lastName = addressDictionary["last_name"] as PropertyDescription;

                            DisplayHint addressFirstNameisplayHint = linkedPidl.GetDisplayHintById("addressFirstName");
                            DisplayHint addressLastNameisplayHint = linkedPidl.GetDisplayHintById("addressLastName");

                            if (enableCommercialSignUpScenario)
                            {
                                Assert.AreEqual(firstName.PropertyType, "clientData");
                                Assert.AreEqual(lastName.PropertyType, "clientData");
                                Assert.IsTrue(addressFirstNameisplayHint.IsHidden);
                                Assert.IsTrue(addressLastNameisplayHint.IsHidden);
                            }
                            else
                            {
                                Assert.AreEqual(firstName.PropertyType, "userData");
                                Assert.AreEqual(lastName.PropertyType, "userData");
                                Assert.IsNull(addressFirstNameisplayHint.IsHidden);
                                Assert.IsNull(addressLastNameisplayHint.IsHidden);
                            }

                            CheckServerErrorCode(pidl.PidlResourceStrings.ServerErrorCodes, Constants.PropertyErrorConstants.InvalidPaymentInstrumentType, disableInvalidPaymentInstrumentTypeFlight);
                        }
                    }
                });
        }

        [DataRow("macmanage", "add", true)]
        [DataRow("macmanage", "add", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_HideAcceptCardsMessageScenario(string partner, string operation, bool hideAcceptCardText)
        {
            // Arrange
            var pidls = new List<PIDLResource>();
            string url = string.Format("v7.0/Account001/paymentMethodDescriptions?type=amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb&partner={0}&operation={1}&country=US&language=en-US&family=credit_card&currency=USD", partner, operation);
            string expectedPSSResponse = "{\"add\": {\"template\": \"defaulttemplate\", \"features\": {\"removeElement\": {\"applicableMarkets\": null, \"displayCustomizationDetail\": [{\"removeAcceptCardMessage\": true}]}}}}";
            if (!hideAcceptCardText)
            {
                expectedPSSResponse = "{\"add\": {\"template\": \"defaulttemplate\", \"features\": {\"removeElement\": {\"applicableMarkets\": null, \"displayCustomizationDetail\": [{\"removeAcceptCardMessage\": false}]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            // Act
            pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            if (!hideAcceptCardText)
            {
                Assert.IsNotNull(pidls[0].GetDisplayHintById("accept_card_message"));
            }
            else
            {
                Assert.IsNull(pidls[0].GetDisplayHintById("accept_card_message"));
            }
        }

        /// <summary>
        /// Test is to validate that the modern ideal billing agreement page is displayed correctly.
        /// </summary>
        [DataRow("amcweb", "NL", true)]
        [DataRow("cart", "NL", false)]
        [DataRow("northstarweb", "NL", true)]
        [DataRow("oxowebdirect", "NL", true)]
        [DataRow("oxodime", "NL", true)]
        [DataRow("xboxnative", "NL", true)]
        [DataRow("defaulttemplate", "NL", false)]
        [DataRow("defaulttemplate", "NL", true)]
        [DataRow("webblends", "NL", true)]
        [DataRow("default", "NL", true)]
        [DataRow("bing", "NL", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ValidateModernIdealBillingPage(string partner, string country, bool pxEnableModernIdealPayment)
        {
            // Arrange
            const string Family = "direct_debit";
            const string MethodType = "ideal_billing_agreement";

            HashSet<PaymentMethod> paymentMethods = new HashSet<PaymentMethod> { new PaymentMethod() { PaymentMethodId = string.Format("{0}.{1}", Family, MethodType), PaymentMethodFamily = Family, PaymentMethodType = MethodType } };
            PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods));

            string url = $"/v7.0/Account009/paymentMethodDescriptions?type={MethodType}&partner={partner}&operation=Add&country={country}&language=en-US&family={Family}";

            Dictionary<string, string> headers = pxEnableModernIdealPayment
                ? new Dictionary<string, string> { { "x-ms-flight", "PXEnableModernIdealPayment" } }
                : null;

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            if (pxEnableModernIdealPayment && partner != "defaulttemplate")
            {
                Assert.AreEqual(pidls[0].DisplayPages[0].HintId, "modernIdealBillingAgreementPage");
                Assert.IsNull(pidls[0].GetDisplayHintById("idealBillingAgreementSelectBank"));
                Assert.IsNull(pidls[0].GetPropertyDescriptionByPropertyName("issuerId"));
            }
            else if (pxEnableModernIdealPayment && partner == "defaulttemplate")
            {
                Assert.AreEqual(pidls[0].DisplayPages[0].HintId, "idealBillingAgreementPage");
                Assert.IsNull(pidls[0].GetDisplayHintById("idealBillingAgreementSelectBank"));
                Assert.IsNull(pidls[0].GetPropertyDescriptionByPropertyName("issuerId"));
            }
            else
            {
                Assert.AreEqual(pidls[0].DisplayPages[0].HintId, "idealBillingAgreementPage");
                Assert.IsNotNull(pidls[0].GetDisplayHintById("idealBillingAgreementSelectBank"));
                Assert.IsNotNull(pidls[0].GetPropertyDescriptionByPropertyName("issuerId"));
            }
        }

        /// <summary>
        /// Test is to validate that the ideal billing agreement banks are displayed correctly.
        /// </summary>
        [DataRow("azure", false, 13)]
        [DataRow("azure", true, 13)]
        [DataRow("commercialstores", false, 13)]
        [DataRow("commercialstores", true, 13)]
        [DataRow("cart", false, 13)]
        [DataRow("cart", true, 13)]
        [DataRow("northstarweb", false, 13)]
        [DataRow("northstarweb", true, 13)]
        [DataRow("webblends", false, 13)]
        [DataRow("webblends", true, 13)]
        [DataRow("officesmb", false, 13)]
        [DataRow("officesmb", true, 13)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ValidateIdealBillingBanks(string partner, bool completePrerequisitesStatus, int bankCount)
        {
            // Arrange
            const string Family = "direct_debit";
            const string MethodType = "ideal_billing_agreement";
            bool allexist = false;
            Dictionary<string, string> profileTypes = new Dictionary<string, string>() { { "consumer", "Account001" }, { "employee", "EmpAccount001" } };
            Dictionary<string, string> additionalBanks = new Dictionary<string, string>() { { "0807", "N26" }, { "0805", "Revolut" }, { "0806", "Yoursafe" } };

            HashSet<PaymentMethod> paymentMethods = new HashSet<PaymentMethod> { new PaymentMethod() { PaymentMethodId = string.Format("{0}.{1}", Family, MethodType), PaymentMethodFamily = Family, PaymentMethodType = MethodType } };
            PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods));

            foreach (KeyValuePair<string, string> profileType in profileTypes)
            {
                string scenario = string.Empty;
                Dictionary<string, string> headers = new Dictionary<string, string>();
                string completePrerequisites = completePrerequisitesStatus ? $"&completePrerequisites={completePrerequisitesStatus.ToString()}" : string.Empty;

                if (string.Equals(profileType.Key, "employee", StringComparison.OrdinalIgnoreCase))
                {
                    headers["x-ms-flight"] = "PXSetDefaultAddressCountryForProfileUpdatePartial";
                    headers["x-ms-authinfo"] = "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU=";
                    headers["x-ms-clientcontext-encoding"] = "base64";
                    scenario = "&scenario=departmentalPurchase";
                }

                // For OfficeSMB partner, add PXDisablePSSCache flight and mock partner settings response with redirection pattern.
                if (string.Equals(partner, GlobalConstants.Partners.OfficeSMB, StringComparison.OrdinalIgnoreCase))
                {
                    headers["x-ms-flight"] = headers.ContainsKey("x-ms-flight") ? headers["x-ms-flight"] + ",PXDisablePSSCache" : "PXDisablePSSCache";

                    string partnerSettingResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":null}}";
                    PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                }

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService($"/v7.0/{profileType.Value}/paymentMethodDescriptions?type={MethodType}&partner={partner}&operation=Add&country=nl&language=en-US&family={Family}{completePrerequisites}{scenario}", additionaHeaders: headers);

                // Assert
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");
                Assert.AreEqual(1, pidls.Count, "The number of Pidls should be equal to the number of payment method types");

                foreach (PIDLResource pidl in pidls)
                {
                    PropertyDescription idealBillingDescription = pidl.GetPropertyDescriptionByPropertyName(Constants.DescriptionIdentityFields.IssuerId);
                    Assert.IsNotNull(idealBillingDescription, "Pidl is expected to be not null");
                    Dictionary<string, string> idealBanks = idealBillingDescription.PossibleValues;

                    allexist = additionalBanks.All(x => idealBanks.ContainsKey(x.Key) && idealBanks[x.Key] == x.Value);
                    Assert.IsTrue(allexist, "Unexpected banks found in the list");
                    Assert.IsTrue(idealBanks.Count == bankCount, "Bank count is unexpected");
                }
            }

            PXSettings.PimsService.ResetToDefaults();
        }

        [DataRow("Account001", "us", "webblends", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null)]
        [DataRow("Account001", "us", "oxowebdirect", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null)]
        [DataRow("Account001", "us", "xbox", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null)]
        [DataRow("Account001", "us", "cart", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null)]
        [DataRow("Account001", "us", "xboxsettings", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null)]
        [DataRow("Account001", "us", "storify", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null)]
        [DataRow("Account001", "us", "storify", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "update", "123456")]

        // CommercialStores CC, Wallet CC and XboxNative Delete Pidl is expected to not get prefilled
        [DataRow("Account001", "us", "commercialstores", null, null, null, null, "us", "add", null)]
        [DataRow("Account001", "us", "storify", null, null, null, null, "us", "delete", "123456")]

        [DataRow("EmpAccount001", "us", "azure", "Some Street 1", "Redmond", "WA", "98052", "us", "add", null)]

        // Bug 20433816: [PXService] Address of CC Pidl gets prefilled even if default address country does not match request
        // [DataRow("Account001", "ca", "webblends", 3, null, null, null, null, null)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_PrefillWorksAsExpected(string accountId, string country, string partner, string adLine1, string adCity, string adState, string adZip, string adCountry, string operation, string piid)
        {
            var ccPidls = new List<PIDLResource>();

            if (operation == "add" || operation == "update")
            {
                ccPidls = await GetPidlFromPXService(
                    string.Format(
                        "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family=credit_card",
                        accountId,
                        country,
                        partner));

                Assert.AreEqual(adLine1, ccPidls[0].TryGetPropertyDescription("details.address.address_line1").DefaultValue);
                Assert.AreEqual(adCity, ccPidls[0].TryGetPropertyDescription("details.address.city").DefaultValue);
                Assert.AreEqual(adState, ccPidls[0].TryGetPropertyDescription("details.address.region").DefaultValue);
                Assert.AreEqual(adZip, ccPidls[0].TryGetPropertyDescription("details.address.postal_code").DefaultValue);
                Assert.AreEqual(adCountry, ccPidls[0].TryGetPropertyDescription("details.address.country").DefaultValue);
            }
            else
            {
                ccPidls = await GetPidlFromPXService(
                    string.Format(
                        "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family=credit_card&operation={3}&piid={4}",
                        accountId,
                        country,
                        partner,
                        operation,
                        piid));

                Assert.IsNull(ccPidls[0].GetPropertyDescriptionByPropertyName("details"));
            }
        }

        [DataRow("Account001", "us", "webblends", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null, false, true)]
        [DataRow("Account001", "us", "webblends", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null, true, false)]
        [DataRow("Account001", "us", "oxowebdirect", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null, false, true)]
        [DataRow("Account001", "us", "oxowebdirect", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null, true, false)]
        [DataRow("Account001", "us", "xbox", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null, false, true)]
        [DataRow("Account001", "us", "xbox", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null, true, false)]
        [DataRow("Account001", "us", "pssbasedpartner", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null, false, true)]
        [DataRow("Account001", "us", "pssbasedpartner", "1 Microsoft Way", "Redmond", "WA", "98052", "us", "add", null, true, false)]

        // CommercialStores CC, Wallet CC and XboxNative Delete Pidl is expected to never get prefilled
        [DataRow("Account001", "us", "commercialstores", null, null, null, null, "us", "add", null, false, false)]
        [DataRow("Account001", "us", "commercialstores", null, null, null, null, "us", "add", null, true, false)]
        [DataRow("Account001", "us", "storify", null, null, null, null, "us", "delete", "123456", false, false)]
        [DataRow("Account001", "us", "storify", null, null, null, null, "us", "delete", "123456", true, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_PrefillWorksAsExpected_UsingPssFeature_DisablePrefillUserData(string accountId, string country, string partner, string adLine1, string adCity, string adState, string adZip, string adCountry, string operation, string piid, bool usePssFeature, bool shouldGetPrefilled)
        {
            var ccPidls = new List<PIDLResource>();

            string expectedPSSResponse = usePssFeature
                ? "{\"" + operation + "\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\",\"resources\":null,\"features\":{\"disablePrefillUserData\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":null}}}}"
                : "{\"" + operation + "\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\",\"resources\":null,\"features\":null}}";

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            string url = string.Format(
                        "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family=credit_card",
                        accountId,
                        country,
                        partner);

            if (string.Equals(operation, "delete", StringComparison.OrdinalIgnoreCase))
            {
                url += string.Format("&operation={0}&piid={1}", operation, piid);
            }

            ccPidls = await GetPidlFromPXService(url);

            if (shouldGetPrefilled)
            {
                Assert.AreEqual(adLine1, ccPidls[0].TryGetPropertyDescription("details.address.address_line1").DefaultValue);
                Assert.AreEqual(adCity, ccPidls[0].TryGetPropertyDescription("details.address.city").DefaultValue);
                Assert.AreEqual(adState, ccPidls[0].TryGetPropertyDescription("details.address.region").DefaultValue);
                Assert.AreEqual(adZip, ccPidls[0].TryGetPropertyDescription("details.address.postal_code").DefaultValue);
                Assert.AreEqual(adCountry, ccPidls[0].TryGetPropertyDescription("details.address.country").DefaultValue);
            }
            else
            {
                Assert.IsNull(ccPidls[0].GetPropertyDescriptionByPropertyName("details"));
            }
        }

        [DataRow("us", "storify", true)]
        [DataRow("us", "storify", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_DeleteNSM(string country, string partner, bool useStyleHints)
        {
            string url = string.Format(
                "/v7.0/Account001/paymentMethodDescriptions?family=mobile_billing_non_sim&partner={0}&operation=delete&language=en-us&country={1}",
                partner,
                country);
            if (useStyleHints)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableXboxNativeStyleHints");
            }

            List<PIDLResource> pidls = await GetPidlFromPXService(url);
            Assert.IsNotNull(pidls, "Pidl is expected not to be null");
            DisplayHint sptUsNonSim = pidls[0].GetDisplayHintById("spt-us-nonsim");

            if (useStyleHints)
            {
                Assert.IsTrue(sptUsNonSim.StyleHints.SequenceEqual(new List<string> { "image-small-400" }));
            }
            else
            {
                Assert.IsNull(sptUsNonSim.StyleHints);
            }
        }

        [DataRow(true)]
        [DataRow(false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXEnableAmexForIN_AmexEnableFlightWorksAsExpected_AddOperation(bool flightEnabled)
        {
            string operation = "add";
            string accountId = "Account001";
            string flightName = "PXEnableAmexForIN";
            string country = "in";
            string type = "amex";
            string family = "credit_card";
            bool isFailureExpected = !flightEnabled;

            string expectedException = "Assert.AreEqual failed. Expected:<OK>. Actual:<BadRequest>. ";
            List<string> flights = new List<string>() { "PXSampleFlight" };

            string[] partners = new string[]
            {
                "appsource",
                "azure",
                "azuresignup",
                "azureibiza",
                "bing",
                "commercialstores",
                "commercialwebblends"
            };

            if (flightEnabled)
            {
                flights.Add(flightName);
            }

            foreach (var partner in partners)
            {
                List<PIDLResource> pidls = new List<PIDLResource>();
                try
                {
                    pidls = await GetPidlFromPXServiceWithFlight(
                        string.Format(
                            "/v7.0/{0}/paymentMethodDescriptions?type={1}&partner={2}&operation={3}&language=en-us&family={4}&country={5}",
                            accountId,
                            type,
                            partner,
                            operation,
                            family,
                            country),
                            flights);

                    Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                }
                catch (Exception ex)
                {
                    Assert.IsTrue(ex.Message.StartsWith(expectedException), string.Format("Failure was detected but not as expected"));
                }
            }
        }

        [DataRow("webblends")]
        [DataRow("cart")]
        [DataRow("northstarweb")]
        [DataRow("commercialstores")]
        [DataRow("azure")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXCCNameRegexUpdate_AsExpected_AddOperation(string partner)
        {
            string operation = "add";
            string accountId = "Account001";
            string country = "us";
            string family = "credit_card";
            string flightName = "PXCCNameRegexUpdate";
            string expectedRegex = "^(?![\\.\\-\\& '0-9]+$)[\\.\\-\\& '0-9a-zA-Z\\xC0-\\uFFFF]{1,64}$";

            List<string> flights = new List<string>() { flightName };

            List<PIDLResource> pidls = new List<PIDLResource>();
            try
            {
                pidls = await GetPidlFromPXServiceWithFlight(
                    string.Format(
                        "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language=en-us&family={3}&country={4}&showChallenge=true",
                        accountId,
                        partner,
                        operation,
                        family,
                        country),
                        flights);

                Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                foreach (PIDLResource pidl in pidls)
                {
                    PropertyDescription accountHolderName = pidl.GetPropertyDescriptionByPropertyName("AccountHolderName");
                    Assert.AreEqual(accountHolderName.Validation.Regex, expectedRegex, "Updated Regex is not found");
                    Assert.AreEqual(accountHolderName.Validations[0].Regex, expectedRegex, "Updated Regex is not found in validations array");
                }
            }
            catch (Exception ex)
            {
                Assert.IsTrue(false, $"Failure was detected but not as expected. {ex.ToString()}");
            }
        }

        [DataRow("webblends")]
        [DataRow("cart")]
        [DataRow("northstarweb")]
        [DataRow("commercialstores")]
        [DataRow("azure")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_AccountHolderNameRegex_AsExpected_AddOperation(string partner)
        {
            string operation = "add";
            string accountId = "Account001";
            string country = "us";
            string family = "credit_card";
            string expectedRegex = "^(?![\\.\\- '0-9]+$)[\\.\\- '0-9a-zA-Z\\xC0-\\uFFFF]{1,64}$";

            List<PIDLResource> pidls = new List<PIDLResource>();
            try
            {
                pidls = await GetPidlFromPXService(
                    string.Format(
                        "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language=en-us&family={3}&country={4}&showChallenge=true",
                        accountId,
                        partner,
                        operation,
                        family,
                        country));

                Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                foreach (PIDLResource pidl in pidls)
                {
                    PropertyDescription accountHolderName = pidl.GetPropertyDescriptionByPropertyName("AccountHolderName");
                    Assert.AreEqual(accountHolderName.Validation.Regex, expectedRegex, "Updated Regex is not found");
                    Assert.AreEqual(accountHolderName.Validations[0].Regex, expectedRegex, "Updated Regex is not found in validations array");
                }
            }
            catch (Exception ex)
            {
                Assert.IsTrue(false, $"Failure was detected but not as expected. {ex.ToString()}");
            }
        }

        [DataRow(true)]
        [DataRow(false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXDisableAch_AchDisableFlightWorksAsExpected_AddOperation(bool flightEnabled)
        {
            string operation = "add";
            string accountId = "Account001";
            string flightName = "PXDisableAch";
            string country = "us";
            string type = "ach";
            string family = "direct_debit";
            bool isFailureExpected = flightEnabled;
            string expectedException = "Assert.AreEqual failed. Expected:<OK>. Actual:<BadRequest>. ";

            List<string> flights = new List<string>() { "PXSampleFlight" };

            string[] partners = new string[]
            {
                "webblends",
                "oxowebdirect",
                "amcweb",
                "northstarweb"
            };

            if (flightEnabled)
            {
                flights.Add(flightName);
            }

            foreach (var partner in partners)
            {
                List<PIDLResource> pidls = new List<PIDLResource>();
                try
                {
                    pidls = await GetPidlFromPXServiceWithFlight(
                        string.Format(
                            "/v7.0/{0}/paymentMethodDescriptions?type={1}&partner={2}&operation={3}&language=en-us&family={4}&country={5}",
                            accountId,
                            type,
                            partner,
                            operation,
                            family,
                            country),
                        flights);

                    Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                }
                catch (Exception ex)
                {
                    Assert.IsTrue(ex.Message.StartsWith(expectedException), string.Format("Failure was detected but not as expected"));
                }
            }
        }

        /// <summary>
        /// Verify the selection of payment methods (PaySafeCard and Klarna).
        /// </summary>
        /// <param name="partner">The partner information.</param>
        /// <param name="needsPaySafe">Indicates if PaySafeCard is required as the payment method.</param>
        /// <param name="needsKlarna">Indicates if Klarna is required as the payment method.</param>
        /// <param name="pidlSdkVersion">The version of PIDL SDK used.</param>
        /// <returns></returns>
        [DataRow("storify", true, false, "1.23.2")]
        [DataRow("xboxsettings", true, false, "1.22.3")]
        [DataRow("storify", false, false, "1.20.2")]
        [DataRow("xboxsettings", false, false, "1.20.3")]
        [DataRow("webblends", true, true, "1.22.1")]
        [DataRow("webblends", true, true, "1.20.1")]
        [DataRow("officesmb", true, true, "1.22.1")]
        [DataRow("officesmb", true, true, "1.20.1")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_CheckForPaySafeAndKlarna(string partner, bool needsPaySafe, bool needsKlarna, string pidlSdkVersion)
        {
            // Arrange
            List<PIDLResource> pidls = null;
            string operation = "select";
            string accountId = "Account001";
            string country = "dk";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.stored_value%22%2C%22invoice_credit.klarna%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22online_bank_transfer.paysafecard%22%5D";

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            PXFlightHandler.AddToEnabledFlights("enablePaymentMethodGrouping");

            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", pidlSdkVersion }
            };

            // Act
            if (string.Equals(partner, "officesmb"))
            {
                var headers = new Dictionary<string, string>()
                {
                    { "x-ms-pidlsdk-version", pidlSdkVersion },
                    { "x-ms-flight", "PXDisablePSSCache" }
                };

                string partnerSettingResponse = "{\"select\":{\"template\":\"defaulttemplate\",\"features\":null}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, additionaHeaders: headers);
            }
            else
            {
                pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);
            }

            string pidlString = JsonConvert.SerializeObject(pidls);

            // Assert
            Assert.IsTrue(needsKlarna == pidlString.Contains("klarna"));
            Assert.IsTrue(needsPaySafe == pidlString.Contains("paysafe"));
        }

        [DataRow("storify", null)]
        [DataRow("storify", "ewallet")]
        [DataRow("storify", "ewallet.")]
        [DataRow("storify", "ewallet.paypal")]
        [DataRow("xboxsettings", "ewallet.stored_value")]
        [DataRow("xboxsettings", ".")]
        [DataRow("playxbox", null)]
        [DataRow("playxbox", "ewallet")]
        [DataRow("playxbox", "ewallet.")]
        [DataRow("playxbox", "ewallet.paypal")]
        [DataRow("playxbox", "ewallet.stored_value")]
        [DataRow("playxbox", ".")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_SwapPMPagesFlightCheck(string partner, string pmGroupPageId)
        {
            string operation = "select";
            string accountId = "me";
            string country = "us";
            string language = "en-us";
            string filters = "%7B%22chargeThresholds%22%3A%5B0%5D%7D";
            string allowedPaymentMethods = "%5B%22credit_card%22%2C%22ewallet.paypal%22%2C%22ewallet.kakaopay%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet.venmo%22%5D";

            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner={partner}&operation={operation}&language={language}&filters={filters}&country={country}&allowedPaymentMethods={allowedPaymentMethods}";

            if (pmGroupPageId != null && pmGroupPageId.Length > 0)
            {
                url += $"&pmGroupPageId={pmGroupPageId}";
            }

            PXFlightHandler.AddToEnabledFlights("PxEnableVenmo, PxEnableSelectPMAddPIVenmo, PXEnableRedeemCSVFlow");

            if (string.Equals(partner, Constants.PartnerNames.PlayXbox, StringComparison.OrdinalIgnoreCase))
            {
                PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsPlayXbox);
            }

            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", "1.22.3" },
                { "x-ms-flight", "enablePaymentMethodGrouping,PXSwapSelectPMPages" }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: testHeader);

            Assert.IsNotNull(pidls, "pidl is expected to be not null");

            PageDisplayHint homePage = pidls[0].DisplayPages[0];

            if (pmGroupPageId != null && pmGroupPageId.Length > 0 && pmGroupPageId[0] != '.' && !pmGroupPageId.Contains("stored_value"))
            {
                homePage = pidls[0].DisplayPages[1];
            }

            PropertyDisplayHint paymentMethodsMap;
            Dictionary<string, int> contextDictionary = new Dictionary<string, int>();
            if (partner == "storify" || partner == "xboxsettings")
            {
                GroupDisplayHint pageWrapperGroup = homePage.Members[0] as GroupDisplayHint;
                GroupDisplayHint columnGroup = pageWrapperGroup.Members[0] as GroupDisplayHint;
                GroupDisplayHint paymentOptionsGroup = columnGroup.Members.Last() as GroupDisplayHint;
                paymentMethodsMap = paymentOptionsGroup.Members[0] as PropertyDisplayHint;
            }
            else
            {
                paymentMethodsMap = homePage.Members[1] as PropertyDisplayHint;
            }

            Assert.IsTrue(paymentMethodsMap.PossibleOptions.ContainsKey("ewallet_stored_value"));
            string homePageId = (partner == "storify" || partner == "xboxsettings") ? "paymentMethodSelectPage" : "paymentMethodSelectPMGroupingPage";
            string ewalletPageId = "paymentMethodSubGroupPage_ewallet_ewallet";
            var context = paymentMethodsMap.PossibleOptions.ElementAt(1).Value.PidlAction.Context;
            string contextString = JsonConvert.SerializeObject(context);
            contextDictionary = JsonConvert.DeserializeObject<Dictionary<string, int>>(contextString);
            if (pmGroupPageId != null && pmGroupPageId.StartsWith("ewallet") && !pmGroupPageId.Contains("stored_value"))
            {
                PageDisplayHint ewalletPage = pidls[0].DisplayPages[0];
                Assert.AreEqual(ewalletPageId, ewalletPage.HintId);
                Assert.AreEqual(homePageId, homePage.HintId);
                Assert.AreEqual(0, contextDictionary["pageIndex"]);
            }
            else
            {
                PageDisplayHint ewalletPage = pidls[0].DisplayPages[1];
                Assert.AreEqual(homePageId, homePage.HintId);
                Assert.AreEqual(ewalletPageId, ewalletPage.HintId);
                Assert.AreEqual(1, contextDictionary["pageIndex"]);
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("storify", true, "us")]
        [DataRow("xboxsettings", true, "us")]
        [DataRow("storify", false, "gb")]
        [DataRow("xboxsettings", false, "gb")]
        [DataRow("webblends", false, "gb")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_CheckForVenmo(string partner, bool needsVenmo, string country)
        {
            string operation = "select";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.venmo%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22%22%5D";

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            PXFlightHandler.AddToEnabledFlights("enablePaymentMethodGrouping");
            PXFlightHandler.AddToEnabledFlights("PxEnableVenmo");
            PXFlightHandler.AddToEnabledFlights("PxEnableSelectPMAddPIVenmo");

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(needsVenmo == pidlString.Contains("venmo"));
        }

        [DataRow("playxbox", "us")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_CheckForVenmo_PlayXbox_withPSS(string partner, string country)
        {
            string operation = "select";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.venmo%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22%22%5D";

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            // Arrange
            PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsPlayXbox);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(pidlString.Contains("venmo"));
        }

        [DataRow("playxbox", "us", true)]
        [DataRow("playxbox", "us", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_PlayXbox_withPSS(string partner, string country, bool addCancelButtonToHomePage)
        {
            string operation = "select";
            string accountId = "me";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card%22%2C%22ewallet.paypal%22%2C%22ewallet.kakaopay%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet.venmo%22%5D";

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            PXFlightHandler.AddToEnabledFlights("PXUsePartnerSettingsService");
            if (addCancelButtonToHomePage)
            {
                PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsPlayXbox);
            }
            else
            {
                PXSettings.PartnerSettingsService.ArrangeResponse("{\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":null},\"PXSwapSelectPMPages\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true}]},\"PXEnableVenmo\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true}]},\"PxEnableSelectPMAddPIVenmo\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true}]}}}}");
            }

            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);
            PIDLResource pidl = pidls[0];
            Assert.AreEqual("paymentMethodSelectPMGroupingPage", pidl.DisplayPages[0].HintId);
            if (addCancelButtonToHomePage)
            {
                PageDisplayHint homePage = pidl.DisplayPages[0];
                GroupDisplayHint cancelGroup = homePage.Members[homePage.Members.Count - 1] as GroupDisplayHint;
                ButtonDisplayHint cancelButton = cancelGroup.Members[0] as ButtonDisplayHint;
                Assert.AreEqual("cancelButton", cancelButton.HintId);
                Assert.AreEqual(DisplayHintActionType.gohome.ToString(), cancelButton.Action.ActionType);
                Assert.AreEqual(1, pidl.GetAllDisplayHintsOfId("cancelButton").Count);
            }
            else
            {
                Assert.AreEqual(0, pidl.GetAllDisplayHintsOfId("cancelButton").Count);
            }

            url = string.Format(
                "/v7.0/{0}/paymentMethodDescriptions?pmGroupPageId=ewallet.paypal&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                accountId,
                partner,
                operation,
                language,
                country,
                allowedPaymentMethods);

            pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);
            pidl = pidls[0];
            Assert.AreEqual("paymentMethodSubGroupPage_ewallet_ewallet", pidl.DisplayPages[0].HintId);
            Assert.AreEqual("paymentMethodSelectPMGroupingPage", pidl.DisplayPages[1].HintId);
            if (addCancelButtonToHomePage)
            {
                PageDisplayHint homePage = pidl.DisplayPages[1];
                GroupDisplayHint cancelGroup = homePage.Members[homePage.Members.Count - 1] as GroupDisplayHint;
                ButtonDisplayHint cancelButton = cancelGroup.Members[0] as ButtonDisplayHint;
                Assert.AreEqual("cancelButton", cancelButton.HintId);
                Assert.AreEqual(DisplayHintActionType.gohome.ToString(), cancelButton.Action.ActionType);
                Assert.AreEqual(1, pidl.GetAllDisplayHintsOfId("cancelButton").Count);
            }
            else
            {
                Assert.AreEqual(0, pidl.GetAllDisplayHintsOfId("cancelButton").Count);
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("amcweb", true, "PXEnableGooglePayApplePayOnlyInUS", "us")]
        [DataRow("amcweb", false, "PXEnableGooglePayApplePayOnlyInUS", "de")]
        [DataRow("amcweb", false, "PXEnableGooglePayApplePayOnlyInUS", "ca")]
        [DataRow("webblends", true, "PXEnableGooglePayApplePayOnlyInUS", "us")]
        [DataRow("webblends", false, "PXEnableGooglePayApplePayOnlyInUS", "de")]
        [DataRow("webblends", false, "PXEnableGooglePayApplePayOnlyInUS", "ca")]
        [DataRow("amcweb", true, "", "us")]
        [DataRow("amcweb", true, "", "de")]
        [DataRow("amcweb", true, "", "ca")]
        [DataRow("webblends", true, "", "us")]
        [DataRow("webblends", true, "", "de")]
        [DataRow("webblends", true, "", "ca")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_CheckForGooglePayApplePay(string partner, bool googleApplePayShouldBereturned, string flight, string country)
        {
            string operation = "select";
            string accountId = "Account013";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.venmo%22%2C%22ewallet.googlepay%22%2C%22ewallet.applepay%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22%22%5D";

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            PaymentMethodCapabilities properties = new PaymentMethodCapabilities();
            PaymentInstrumentDisplayDetails display = new PaymentInstrumentDisplayDetails
            {
                Logo = "https://mock.png",
                Name = "Mock",
            };

            List<PaymentMethod> paymentMethods = new List<PaymentMethod>
            {
                new PaymentMethod
                {
                    PaymentMethodFamily = "ewallet",
                    PaymentMethodType = "googlepay",
                    Properties = properties,
                    Display = display
                },
                new PaymentMethod
                {
                    PaymentMethodFamily = "ewallet",
                    PaymentMethodType = "applepay",
                    Properties = properties,
                    Display = display
                }
            };

            PXFlightHandler.AddToEnabledFlights(flight);

            PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods));

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(googleApplePayShouldBereturned == (pidlString.Contains("googlepay") && pidlString.Contains("applepay")));
        }

        [DataRow("amcweb", true, "PXEnableGooglePayApplePayOnlyInUS", "us")]
        [DataRow("amcweb", false, "PXEnableGooglePayApplePayOnlyInUS", "de")]
        [DataRow("amcweb", false, "PXEnableGooglePayApplePayOnlyInUS", "ca")]
        [DataRow("webblends", true, "PXEnableGooglePayApplePayOnlyInUS", "us")]
        [DataRow("webblends", false, "PXEnableGooglePayApplePayOnlyInUS", "de")]
        [DataRow("webblends", false, "PXEnableGooglePayApplePayOnlyInUS", "ca")]
        [DataRow("amcweb", true, "", "us")]
        [DataRow("amcweb", true, "", "de")]
        [DataRow("amcweb", true, "", "ca")]
        [DataRow("webblends", true, "", "us")]
        [DataRow("webblends", true, "", "de")]
        [DataRow("webblends", true, "", "ca")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPI_CheckForGooglePayApplePay(string partner, bool googleApplePayShouldBereturned, string flight, string country)
        {
            string operation = "selectInstance";
            string accountId = "Account013";
            string language = "en-us";

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country);

            PaymentMethodCapabilities properties = new PaymentMethodCapabilities();
            PaymentInstrumentDisplayDetails display = new PaymentInstrumentDisplayDetails
            {
                Logo = "https://mock.png",
                Name = "Mock",
            };

            List<PaymentMethod> paymentMethods = new List<PaymentMethod>
            {
                new PaymentMethod
                {
                    PaymentMethodFamily = "ewallet",
                    PaymentMethodType = "googlepay",
                    Properties = properties,
                    Display = display
                },
                new PaymentMethod
                {
                    PaymentMethodFamily = "ewallet",
                    PaymentMethodType = "applepay",
                    Properties = properties,
                    Display = display
                }
            };

            PXFlightHandler.AddToEnabledFlights(flight);

            PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods), HttpStatusCode.OK, null, ".*/paymentMethods.*");

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(googleApplePayShouldBereturned == (pidlString.Contains("googlepay") && pidlString.Contains("applepay")));
        }

        [DataRow("storify", "us", false)]
        [DataRow("xboxsettings", "us", false)]
        [DataRow("xboxsubs", "us", false)]
        [DataRow("xboxsubs", "us", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_XboxNativeSelectPM_StyleHints(string partner, string country, bool addBorderForButton)
        {
            string operation = "select";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card%22%2C%22ewallet.paypal%22%2C%22ewallet.kakaopay%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet.venmo%22%5D";
            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);
            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", "2.7.0" }
            };

            List<string> optionStyleHints = new List<string> { "width-small-200", "height-small", "margin-end-small", "padding-vertical-x-small", "margin-vertical-medium" };
            List<string> footerButtonsStyleHints = new List<string> { "width-small" };
            PXFlightHandler.AddToEnabledFlights("enablePaymentMethodGrouping,PxEnableVenmo,PxEnableSelectPMAddPIVenmo,PXEnableXboxNativeStyleHints");

            if (addBorderForButton)
            {
                PXFlightHandler.AddToEnabledFlights(Constants.PartnerFlightValues.ApplyAccentBorderWithGutterOnFocus);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            Assert.IsNotNull(pidls);
            Assert.IsTrue(pidls.Count > 0);

            var paymentMethodSelectPageWrapperGroup = pidls[0].GetDisplayHintById("paymentMethodSelectPageWrapperGroup") as GroupDisplayHint;
            var paymentMethodColumnGroup = pidls[0].GetDisplayHintById("paymentMethodColumnGroup") as GroupDisplayHint;
            var paymentOptionsGroup = pidls[0].GetDisplayHintById("paymentOptionsGroup") as GroupDisplayHint;
            var paymentMethod = pidls[0].GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
            var cancelButton = pidls[0].GetDisplayHintById("cancelButton") as ButtonDisplayHint;
            var backButton = pidls[0].GetDisplayHintById("backButton") as ButtonDisplayHint;
            var possibleOptions = paymentMethod.PossibleOptions;

            Assert.IsTrue(paymentMethodSelectPageWrapperGroup.StyleHints.SequenceEqual(new List<string>() { "height-fill", "alignment-content-space-between" }));
            Assert.IsTrue(paymentMethodColumnGroup.StyleHints.SequenceEqual(new List<string>() { "height-fill" }));
            Assert.IsTrue(paymentOptionsGroup.StyleHints.SequenceEqual(new List<string> { "dummy-stylehint" }));
            Assert.IsTrue(paymentMethod.StyleHints.SequenceEqual(new List<string>() { "layout-inline", "alignment-vertical-center", "padding-start-x-small" }));
            Assert.IsTrue(cancelButton.StyleHints?.SequenceEqual(footerButtonsStyleHints));
            Assert.IsTrue(backButton.StyleHints?.SequenceEqual(footerButtonsStyleHints));

            foreach (var option in possibleOptions)
            {
                Assert.IsTrue(option.Value.StyleHints.SequenceEqual(optionStyleHints));
            }

            foreach (PIDLResource pidlResource in pidls)
            {
                foreach (DisplayHint displayHint in pidlResource.GetAllDisplayHints())
                {
                    Assert.IsTrue(displayHint.StyleHints.Count > 0);
                    ButtonDisplayHint buttonDisplayHint = displayHint as ButtonDisplayHint;
                    PropertyDisplayHint propertyDisplayHint = displayHint as PropertyDisplayHint;

                    if (buttonDisplayHint != null)
                    {
                        if (addBorderForButton)
                        {
                            Assert.IsTrue(buttonDisplayHint.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                        }
                        else
                        {
                            Assert.IsTrue(buttonDisplayHint.DisplayTags == null || !buttonDisplayHint.DisplayTags.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints));
                        }
                    }
                    else if (propertyDisplayHint != null && propertyDisplayHint.PossibleOptions != null)
                    {
                        foreach (var option in propertyDisplayHint.PossibleOptions)
                        {
                            if (option.Value.DisplayContent != null)
                            {
                                List<string> styleHints = option.Value.StyleHints.ToList();
                                Assert.IsTrue(styleHints.Count > 0);

                                if (addBorderForButton)
                                {
                                    Assert.IsTrue(option.Value.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                                }
                                else
                                {
                                    Assert.IsTrue(option.Value.DisplayTags == null || !option.Value.DisplayTags.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints));
                                }
                            }
                        }
                    }
                }
            }
        }

        [DataRow("storify", "us", false)]
        [DataRow("xboxsettings", "us", false)]
        [DataRow("xboxsubs", "us", false)]
        [DataRow("xboxsubs", "us", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_XboxNativeSelecPMBorderAroundButton(string partner, string country, bool addBorderForButton)
        {
            string operation = "select";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card%22%2C%22ewallet.paypal%22%2C%22ewallet.kakaopay%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet.venmo%22%5D";
            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            PXFlightHandler.AddToEnabledFlights("enablePaymentMethodGrouping,PxEnableVenmo,PxEnableSelectPMAddPIVenmo,PXEnableXboxNativeStyleHints");

            if (addBorderForButton)
            {
                PXFlightHandler.AddToEnabledFlights(Constants.PartnerFlightValues.ApplyAccentBorderWithGutterOnFocus);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null);

            Assert.IsNotNull(pidls);

            foreach (PIDLResource pidlResource in pidls)
            {
                foreach (DisplayHint displayHint in pidlResource.GetAllDisplayHints())
                {
                    ButtonDisplayHint buttonDisplayHint = displayHint as ButtonDisplayHint;
                    PropertyDisplayHint propertyDisplayHint = displayHint as PropertyDisplayHint;

                    if (buttonDisplayHint != null)
                    {
                        if (addBorderForButton)
                        {
                            Assert.IsTrue(buttonDisplayHint.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                        }
                        else
                        {
                            Assert.IsTrue(buttonDisplayHint.DisplayTags == null || !buttonDisplayHint.DisplayTags.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints));
                        }
                    }
                    else if (propertyDisplayHint != null && propertyDisplayHint.PossibleOptions != null)
                    {
                        foreach (var option in propertyDisplayHint.PossibleOptions)
                        {
                            if (option.Value.DisplayContent != null)
                            {
                                if (addBorderForButton)
                                {
                                    Assert.IsTrue(option.Value.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                                }
                                else
                                {
                                    Assert.IsTrue(option.Value.DisplayTags == null || !option.Value.DisplayTags.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints));
                                }
                            }
                        }
                    }
                }
            }
        }

        // With pidlsdk version < 2.7.0, there should be no stylehints
        [DataRow(Constants.PartnerNames.Storify, "us", "2.5.0", "PXEnableXboxNativeStyleHints,enablePaymentMethodGrouping,PxEnableVenmo,PxEnableSelectPMAddPIVenmo")]
        [DataRow(Constants.PartnerNames.Storify, "us", "2.5.0", "enablePaymentMethodGrouping,PxEnableVenmo,PxEnableSelectPMAddPIVenmo")]
        [DataRow(Constants.PartnerNames.Storify, "us", "2.6.2", "PXEnableXboxNativeStyleHints,enablePaymentMethodGrouping,PxEnableVenmo,PxEnableSelectPMAddPIVenmo")]
        [DataRow(Constants.PartnerNames.Storify, "us", "2.6.2", "enablePaymentMethodGrouping,PxEnableVenmo,PxEnableSelectPMAddPIVenmo")]

        // With pidlsdk version >= 2.7.0 and without flight PXEnableXboxNativeStyleHints, there should be no stylehints
        [DataRow(Constants.PartnerNames.Storify, "us", "2.7.0", "enablePaymentMethodGrouping,PxEnableVenmo,PxEnableSelectPMAddPIVenmo")]
        [DataRow(Constants.PartnerNames.Storify, "us", "2.7.2", "enablePaymentMethodGrouping,PxEnableVenmo,PxEnableSelectPMAddPIVenmo")]

        // With pidlsdk version >= 2.7.0 and with flight PXEnableXboxNativeStyleHints, there must be atleast one stylehint for every display hint
        [DataRow(Constants.PartnerNames.Storify, "us", "2.7.0", "PXEnableXboxNativeStyleHints,enablePaymentMethodGrouping,PxEnableVenmo,PxEnableSelectPMAddPIVenmo")]
        [DataRow(Constants.PartnerNames.Storify, "us", "2.7.2", "PXEnableXboxNativeStyleHints,enablePaymentMethodGrouping,PxEnableVenmo,PxEnableSelectPMAddPIVenmo")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_XboxNativeSelectPM_NoStyleHints(string partner, string country, string pidlSdkVersion, string flightsToBePassed)
        {
            string operation = "select";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card%22%2C%22ewallet.paypal%22%2C%22ewallet.kakaopay%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet.venmo%22%5D";
            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);
            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", pidlSdkVersion },
                { "x-ms-flight", flightsToBePassed }
            };

            Version fullPidlSdkVersion = new Version(pidlSdkVersion + ".0");
            Version lowestCompatiblePidlSdkVersion = new Version("2.7.0.0");

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);
            Assert.IsNotNull(pidls);

            foreach (PIDLResource pidlResource in pidls)
            {
                foreach (DisplayHint displayHint in pidlResource.GetAllDisplayHints())
                {
                    PropertyDisplayHint propertyDisplayHint = displayHint as PropertyDisplayHint;

                    if (fullPidlSdkVersion < lowestCompatiblePidlSdkVersion)
                    {
                        Assert.IsNull(displayHint.StyleHints);
                        if (propertyDisplayHint?.PossibleOptions != null)
                        {
                            foreach (var option in propertyDisplayHint.PossibleOptions)
                            {
                                Assert.IsNull(option.Value.StyleHints);
                            }
                        }
                    }
                    else if (flightsToBePassed.Contains("PXEnableXboxNativeStyleHints"))
                    {
                        Assert.IsTrue(displayHint.StyleHints.Count > 0);
                        if (propertyDisplayHint?.PossibleOptions != null)
                        {
                            foreach (var option in propertyDisplayHint.PossibleOptions)
                            {
                                List<string> styleHints = option.Value.StyleHints?.ToList();
                                Assert.IsTrue(styleHints.Count > 0);
                            }
                        }
                    }
                }
            }
        }

        [DataRow("storify", "us")]
        [DataRow("xboxsettings", "us")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_XboxNativeSelectPM_DisableRedeemCSVFlow(string partner, string country)
        {
            string operation = "select";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card%22%2C%22ewallet.paypal%22%2C%22ewallet.kakaopay%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet.venmo%22%5D";
            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);
            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", "2.7.0" }
            };

            PXFlightHandler.AddToEnabledFlights("enablePaymentMethodGrouping");
            PXFlightHandler.AddToEnabledFlights("PXDisableRedeemCSVFlow");

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            Assert.IsNotNull(pidls);
            Assert.IsTrue(pidls.Count > 0);

            var paymentMethod = pidls[0].GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
            var possibleOptions = paymentMethod.PossibleOptions;
            var possibleValues = paymentMethod.PossibleValues;

            // pidl should not have stored_avlue option if the redeem CSV flow is disbaled
            Assert.IsFalse(possibleOptions.ContainsKey("ewallet_stored_value"));
            Assert.IsFalse(possibleValues.ContainsKey("ewallet_stored_value"));
        }

        [DataRow("us", "add", "visa", false)]
        [DataRow("us", "add", "visa", true)]
        [DataRow("in", "add", "visa", false)]
        [DataRow("in", "add", "visa", true)]
        [DataRow("us", "update", "visa", false)]
        [DataRow("us", "update", "visa", true)]
        [DataRow("in", "update", "visa", false)]
        [DataRow("in", "update", "visa", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_XboxSubs_AddAccentBorderOnFocus(string country, string operation, string type, bool addBorderOnFocus)
        {
            var testHeader = new Dictionary<string, string>();
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner=xboxsubs&operation={operation}&language=en-us&family=credit_card&type={type}&country={country}";

            if (operation == "update")
            {
                PaymentMethod pm = new PaymentMethod
                {
                    PaymentMethodFamily = "credit_card",
                    PaymentMethodType = type,
                };
                List<PaymentMethod> paymentMethods = new List<PaymentMethod> { pm };
                PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods));
            }

            if (addBorderOnFocus)
            {
                testHeader.Add("x-ms-flight", Constants.PartnerFlightValues.ApplyAccentBorderWithGutterOnFocus);

                PXFlightHandler.AddToEnabledFlights(Constants.PartnerFlightValues.ApplyAccentBorderWithGutterOnFocus);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (PIDLResource resource in pidls)
            {
                List<DisplayHint> displayHints = resource.GetAllDisplayHints();
                foreach (DisplayHint displayHint in displayHints)
                {
                    ButtonDisplayHint buttonDisplayHint = displayHint as ButtonDisplayHint;
                    PropertyDisplayHint propertyDisplayHint = displayHint as PropertyDisplayHint;

                    if (buttonDisplayHint != null)
                    {
                        Assert.AreEqual(addBorderOnFocus, buttonDisplayHint.DisplayTags?.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints) == true && buttonDisplayHint.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                    }
                    else if (propertyDisplayHint != null)
                    {
                        string elementType = resource.GetElementTypeByPropertyDisplayHint(propertyDisplayHint);
                        if (elementType == Constants.ElementTypes.Dropdown || elementType == Constants.ElementTypes.Textbox)
                        {
                            Assert.AreEqual(addBorderOnFocus, propertyDisplayHint.DisplayTags?.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints) == true && propertyDisplayHint.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                        }
                        else if (elementType == Constants.ElementTypes.ButtonList)
                        {
                            foreach (var option in propertyDisplayHint.PossibleOptions)
                            {
                                Assert.AreEqual(addBorderOnFocus, option.Value.DisplayTags?.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints) == true && option.Value.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                            }
                        }
                        else
                        {
                            Assert.IsTrue(propertyDisplayHint.DisplayTags == null || !propertyDisplayHint.DisplayTags.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints));
                        }
                    }
                    else
                    {
                        Assert.IsTrue(displayHint.DisplayTags == null || !displayHint.DisplayTags.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints));
                    }
                }
            }
        }

        [DataRow("webblends", true, "in", true)]
        [DataRow("amcweb", true, "in", true)]
        [DataRow("webblends", false, "in", false)]
        [DataRow("webblends", false, "us", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_CheckForUpi(string partner, bool needsUpi, string country, bool includeUpiInAllowedPaymentMethods)
        {
            string operation = "select";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.venmo%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22%22%5D";

            if (includeUpiInAllowedPaymentMethods)
            {
                allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.venmo%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22real_time_payments.upi%22%5D";
            }

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            PXFlightHandler.AddToEnabledFlights("PxEnableUpi");
            PXFlightHandler.AddToEnabledFlights("IndiaUPIEnable");
            PXFlightHandler.AddToEnabledFlights("vnext");

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(needsUpi == pidlString.Contains("upi"));
        }

        [DataRow("azure", true, "in", true)]
        [DataRow("commercialstores", true, "in", true)]
        [DataRow("azure", false, "in", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_CheckForUpiCommercial(string partner, bool needsUpi, string country, bool includeUpiInAllowedPaymentMethods)
        {
            string operation = "select";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.venmo%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22%22%5D";

            if (includeUpiInAllowedPaymentMethods)
            {
                allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.venmo%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22real_time_payments.upi_commercial%22%2C%22real_time_payments.upi_qr_commercial%22%5D";
            }

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            PXFlightHandler.AddToEnabledFlights("PXCommercialEnableUpi");
            PXFlightHandler.AddToEnabledFlights("IndiaUPIEnable");
            PXFlightHandler.AddToEnabledFlights("EnableCommercialSelectUpiQr");
            PXFlightHandler.AddToEnabledFlights("vnext");

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(needsUpi == pidlString.Contains("upi_commercial"));
            Assert.IsTrue(needsUpi == pidlString.Contains("upi_qr_commercial"));
        }

        [DataRow("Macmanage", true, "commercialstores")]
        [DataRow("Macmanage", false, "commercialstores")]
        [DataRow("MacManage", true, "commercialstores")]
        [DataRow("MacManage", false, "commercialstores")]
        [DataRow("macManage", true, "commercialstores")]
        [DataRow("macManage", false, "commercialstores")]
        [DataRow("macmanage", true, "commercialstores")]
        [DataRow("macmanage", false, "commercialstores")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_ChangePartnerNameForPims(string originalPartner, bool enableFeature, string expectedPartner)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?&operation=SelectInstance&language=en-US&country=us&partner={originalPartner}";
            bool assertCalled = false;

            string pssmockResponse = "{\"selectinstance\":{\"template\":\"defaulttemplate\",\"features\":{}}}";

            if (enableFeature)
            {
                pssmockResponse = "{\"selectinstance\":{\"template\":\"defaulttemplate\",\"features\":{\"changePartnerNameForPims\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true}]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);

            // Act
            PXSettings.PimsService.PreProcess = (request) =>
            {
                // only check for url which contains partner param
                // Get PM doesn't contains partner but ListPI does
                if (request.RequestUri.ToString().Contains("partner"))
                {
                    if (enableFeature)
                    {
                        Assert.IsTrue(request.RequestUri.ToString().Contains(expectedPartner));
                        Assert.IsFalse(request.RequestUri.ToString().Contains(originalPartner));
                    }
                    else
                    {
                        Assert.IsTrue(request.RequestUri.ToString().Contains(originalPartner));
                        Assert.IsFalse(request.RequestUri.ToString().Contains(expectedPartner));
                    }

                    assertCalled = true;
                }
            };

            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            string pidlString = JsonConvert.SerializeObject(pidls);
            Assert.IsTrue(assertCalled, "PimsTestHandler.PreProcess wasn't called");
            Assert.IsNotNull(pidlString);

            PXSettings.PartnerSettingsService.ResetToDefaults();
            PXSettings.PimsService.ResetToDefaults();
        }

        [DataRow("cart", true)]
        [DataRow("cart", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ListPI_GPayApayInstancePI(string partner, bool enableFeature)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?&operation=SelectInstance&language=en-US&country=us&partner={partner}";
            bool containExpectedHeader = false;

            // Act
            PXSettings.PimsService.PreProcess = (request) =>
            {
                if (request.Headers.TryGetValues("x-ms-flight", out var headerValues))
                {
                    containExpectedHeader = headerValues.Contains("ReturnCardWalletInstanceIdForPidlList");
                }
            };

            var headers = new Dictionary<string, string>();
            if (enableFeature)
            {
                headers.Add("x-ms-flight", "GPayApayInstancePI");
            }

            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, headers);
            Assert.AreEqual(containExpectedHeader, enableFeature);

            PXSettings.PimsService.ResetToDefaults();
        }

        [DataRow("playxbox")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ListPI_PlayXbox(string partner)
        {
            // Arrange
            string url = $"/v7.0/Account003/paymentMethodDescriptions?&operation=SelectInstance&language=en-US&country=us&partner={partner}";
            PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsPlayXbox);
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null);

            foreach (PIDLResource pidlResource in pidls)
            {
                HeadingDisplayHint headingDisplayHint = pidlResource.GetDisplayHintById(Constants.DisplayHintIds.PaymentInstrumentSelectHeading) as HeadingDisplayHint;
                Assert.IsNotNull(headingDisplayHint, "Expected PaymentInstrumentSelectHeading should not be null.");
                Assert.AreEqual("Pick a way to pay", headingDisplayHint.DisplayContent, "Expected PaymentInstrumentSelectHeading text should match.");

                ButtonDisplayHint backButton = pidlResource.GetDisplayHintById(Constants.ButtonDisplayHintIds.HiddenCancelBackButton) as ButtonDisplayHint;
                Assert.IsNotNull(backButton, "Expected ButtonDisplayHint should not be null.");
                Assert.IsFalse(backButton.IsHidden, "Expected ButtonDisplayHint should not be hidden.");
                Assert.IsTrue(backButton.StyleHints.Contains("large"), "Expected ButtonDisplayHint should have style hints.");

                ButtonDisplayHint pmButton = pidlResource.GetDisplayHintById(Constants.DisplayHintIds.NewPaymentMethodLink) as ButtonDisplayHint;
                Assert.IsNotNull(pmButton, "Expected NewPaymentMethodLink ButtonDisplayHint should not be null.");
                Assert.IsTrue(pmButton.DisplayTags.ContainsKey("addIcon"), "Expected NewPaymentMethodLink ButtonDisplayHint should have an addIcon tag");
                Assert.IsTrue(pmButton.StyleHints.Contains("left"), "Expected NewPaymentMethodLink ButtonDisplayHint should have a left style hint.");

                ButtonDisplayHint redeemGiftCardButton = pidlResource.GetDisplayHintById(Constants.ButtonDisplayHintIds.RedeemGiftCardLink) as ButtonDisplayHint;
                Assert.IsNotNull(redeemGiftCardButton, "Expected RedeemGiftCardLink ButtonDisplayHint should not be null.");
                Assert.IsTrue(redeemGiftCardButton.DisplayTags.ContainsKey("giftCardIcon"), "Expected RedeemGiftCardLink ButtonDisplayHint should have an giftCardIcon tag");
                Assert.IsTrue(redeemGiftCardButton.StyleHints.Contains("left"), "Expected RedeemGiftCardLink ButtonDisplayHint should have a left style hint.");

                DisplayHintAction redeemGiftCardButtonAction = redeemGiftCardButton.Action;
                ActionContext redeemGiftCardActionContext = JsonConvert.DeserializeObject<ActionContext>(JsonConvert.SerializeObject(redeemGiftCardButtonAction.Context));
                Assert.AreEqual("redeemGiftCardLink", redeemGiftCardActionContext.Instance);
                Assert.IsNull(redeemGiftCardActionContext.ResourceActionContext);

                PropertyDisplayHint listPI = pidlResource.GetDisplayHintById(Constants.DisplayHintIds.PaymentInstrument) as PropertyDisplayHint;
                var options = listPI?.PossibleOptions;

                if (options == null)
                {
                    Assert.Fail("Expected options are not found");
                }

                // for each option in options iterate through values
                foreach (var option in options)
                {
                    var value = option.Value;
                    var content = value?.DisplayContent;
                    var groupHint = content.Members[1] as GroupDisplayHint;
                    var innerGroup = groupHint?.Members[0] as TextGroupDisplayHint;
                    HyperlinkDisplayHint editLink = innerGroup?.Members?.FirstOrDefault(m => m.DisplayHintType == "hyperlink") as HyperlinkDisplayHint;
                    if (editLink != null)
                    {
                        Assert.IsTrue(editLink.DisplayTags.ContainsKey("target"), "Expected HyperlinkDisplayHint element with an Id prefix of optionUpdate_ should have a target tag");
                    }
                }
            }
        }

        /// <summary>
        /// CIT to assert the SkipSelectInstanceNoPI feature for on and off with various feature customizations.
        /// </summary>
        [DataRow("officesmb", true)]
        [DataRow("officesmb", false)]
        [DataRow("amcweb", true)]
        [DataRow("amcweb", false)]
        [DataRow("smboobe", true)]
        [DataRow("smboobe", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectInstanceNoPI_SkipSelectInstanceNoPI(string partner, bool enableFeature)
        {
            // Arrange
            bool[] status = { true, false };

            string pssmockResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{}}}";

            // Arrange no PI response for PIMS listPI call
            PXSettings.PimsService.ArrangeResponse("[]", urlPattern: ".*paymentInstruments.*");

            foreach (bool enableBackupPICheckForSkipSelectInstanceNoPI in status)
            {
                foreach (bool returnAddCCOnlyForSkipSelectInstanceNoPI in status)
                {
                    foreach (bool addTriggeredByForSkipSelectInstanceNoPI in status)
                    {
                        foreach (bool sendBackupPIOptionalFilter in status)
                        {
                            string url = $"/v7.0/Account001/paymentMethodDescriptions?&operation=SelectInstance&language=en-US&country=us&partner={partner}";
                            url = sendBackupPIOptionalFilter ? url + "&filters={\"isBackupPiOptional\":true}" : url;

                            if (enableFeature)
                            {
                                pssmockResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"skipSelectInstanceNoPI\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"enableBackupPICheckForSkipSelectInstanceNoPI\":" + enableBackupPICheckForSkipSelectInstanceNoPI.ToString().ToLower() + ",\"addTriggeredByForSkipSelectInstanceNoPI\":" + addTriggeredByForSkipSelectInstanceNoPI.ToString().ToLower() + ",\"returnAddCCOnlyForSkipSelectInstanceNoPI\":" + returnAddCCOnlyForSkipSelectInstanceNoPI.ToString().ToLower() + "}]}}}}";
                            }

                            PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);

                            // Act
                            List<PIDLResource> pidls = await GetPidlFromPXService(url);

                            // Assert
                            Assert.IsNotNull(pidls);
                            Assert.AreEqual(1, pidls.Count);
                            string validationType = "selectResourceType";

                            if (enableFeature)
                            {
                                if (enableBackupPICheckForSkipSelectInstanceNoPI)
                                {
                                    if (sendBackupPIOptionalFilter)
                                    {
                                        validationType = "pidlPages";
                                    }
                                    else
                                    {
                                        validationType = returnAddCCOnlyForSkipSelectInstanceNoPI ? "returnCCOnly" : addTriggeredByForSkipSelectInstanceNoPI ? "addTriggeredBy" : "selectResourceType";
                                    }
                                }
                                else if (returnAddCCOnlyForSkipSelectInstanceNoPI)
                                {
                                    validationType = "returnCCOnly";
                                }
                                else if (addTriggeredByForSkipSelectInstanceNoPI)
                                {
                                    validationType = "addTriggeredBy";
                                }
                                else
                                {
                                    validationType = "selectResourceType";
                                }
                            }
                            else
                            {
                                validationType = "pidlPages";
                            }

                            if (string.Equals("amcweb", partner, StringComparison.OrdinalIgnoreCase))
                            {
                                validationType = sendBackupPIOptionalFilter ? "pidlPages" : "addTriggeredBy";
                            }
                            else if (string.Equals("smboobe", partner, StringComparison.OrdinalIgnoreCase))
                            {
                                validationType = "returnCCOnly";
                            }

                            ActionContext context = JsonConvert.DeserializeObject<ActionContext>(JsonConvert.SerializeObject(pidls[0].ClientAction?.Context));

                            switch (validationType)
                            {
                                case "returnCCOnly":
                                    Assert.AreEqual(ClientActionType.ReturnContext, pidls[0].ClientAction.ActionType);
                                    Assert.AreEqual("addResource", context.Action, "Expected to have addResource action");
                                    Assert.IsTrue(context.ResourceActionContext.PidlDocInfo.Parameters.ContainsKey("family"));
                                    Assert.AreEqual("credit_card", context.ResourceActionContext.PidlDocInfo.Parameters["family"], "Expected to have family creditcard in parameters");
                                    break;
                                case "addTriggeredBy":
                                    Assert.AreEqual(ClientActionType.ReturnContext, pidls[0].ClientAction.ActionType);
                                    Assert.AreEqual("addPaymentInstrument", context.Action, "Expected to have addPaymentInstrument action");
                                    Assert.IsTrue(pidls[0].ClientAction.Context.ToString().Contains("triggeredBy"), "Expected to have triggeredBy partnerHitns");
                                    break;
                                case "selectResourceType":
                                    Assert.AreEqual(ClientActionType.ReturnContext, pidls[0].ClientAction.ActionType);
                                    Assert.AreEqual("selectResourceType", context.Action, "Expected to have selectResourceType action");
                                    break;
                                case "pidlPages":
                                    Assert.IsNotNull(pidls[0].Identity, "Pidl expected to have identity");
                                    Assert.IsNotNull(pidls[0].DataDescription, "Pidl expected to have DataDescriptions");
                                    Assert.IsNotNull(pidls[0].DisplayPages[0], "Pidl expected to have Display pages");
                                    break;
                            }

                            PXSettings.PartnerSettingsService.ResetToDefaults();
                        }
                    }
                }
            }

            PXSettings.PimsService.ResetToDefaults();
        }

        [DataRow("webblends", true, "in", true)]
        [DataRow("amcweb", true, "in", true)]
        [DataRow("webblends", false, "in", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPI_CheckForUpi(string partner, bool needsUpi, string country, bool includeFlight)
        {
            string operation = "selectInstance";
            string accountId = "Account004";
            string language = "en-us";

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country);

            if (includeFlight)
            {
                PXFlightHandler.AddToEnabledFlights("PxEnableUpi");
                PXFlightHandler.AddToEnabledFlights("vnext");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(needsUpi == (pidlString.Contains("upi") && pidlString.Contains("vpa")));
        }

        [DataRow("storify", "us", false, "1.23.2")]
        [DataRow("storify", "us", false, "1.22.3")]
        [DataRow("storify", "us", true, "1.22.2")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPI_CheckForPaySafe(string partner, string country, bool needsPaySafe, string pidlSdkVersion)
        {
            string operation = "selectInstance";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.stored_value%22%2C%22invoice_credit.klarna%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22online_bank_transfer.paysafecard%22%5D";

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            PXFlightHandler.AddToEnabledFlights("enablePaymentMethodGrouping");

            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", pidlSdkVersion }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(needsPaySafe == pidlString.Contains("paysafe"));
        }

        public List<DisplayHint> GetAllDisplayHintsByType(ContainerDisplayHint container, string type)
        {
            List<DisplayHint> displayHints = new List<DisplayHint>();
            List<DisplayHint> displayHintQueue = new List<DisplayHint>();
            type = type.ToLower();
            if (container != null)
            {
                displayHintQueue.Add(container);
            }

            while (displayHintQueue.Count > 0)
            {
                DisplayHint displayHint = displayHintQueue.First();
                displayHintQueue.RemoveAt(0);

                if (displayHint != null && displayHint.DisplayHintType.ToLower() == type)
                {
                    displayHints.Add(displayHint);
                }

                ContainerDisplayHint containerDisplayHint = displayHint as ContainerDisplayHint;

                // Here priority represents which hint needs to be processed next.
                int priority = 0;
                if (containerDisplayHint != null && containerDisplayHint.Members != null)
                {
                    foreach (DisplayHint innerMember in containerDisplayHint.Members)
                    {
                        displayHintQueue.Insert(priority++, innerMember);
                    }
                }
            }

            return displayHints;
        }

        [DataRow("storify", "us", null)]
        [DataRow("xboxsubs", "us", null)]
        [DataRow("xboxsubs", "us", new string[] { Constants.PartnerFlightValues.ApplyAccentBorderWithGutterOnFocus })]
        [DataRow("storify", "us", new string[] { Constants.PartnerFlightValues.PXUseFontIcons })]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPI_XboxNativeStyleHints(string partner, string country, string[] additionalFlightsList)
        {
            string operation = "selectInstance";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.stored_value%22%2C%22invoice_credit.klarna%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22online_bank_transfer.paysafecard%22%5D";
            bool applyBorderForButtons = false;
            bool useFontIcons = false;
            string additionalFlights = "PXEnableVenmo,PXEnableXboxNativeStyleHints";

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);
            List<string> selectOptionStyleHints = new List<string> { "width-medium", "height-medium", "padding-vertical-medium", "margin-end-small", "padding-bottom-small", "margin-vertical-medium" };

            if (additionalFlightsList != null)
            {
                foreach (string flight in additionalFlightsList)
                {
                    additionalFlights = additionalFlights + "," + flight;

                    if (flight == Constants.PartnerFlightValues.ApplyAccentBorderWithGutterOnFocus)
                    {
                        applyBorderForButtons = true;
                    }
                    else if (flight == Constants.PartnerFlightValues.PXUseFontIcons)
                    {
                        useFontIcons = true;
                    }
                }
            }

            Dictionary<string, string> testHeaders = new Dictionary<string, string>
            {
                { "x-ms-flight", additionalFlights },
                { "x-ms-pidlsdk-version", "2.7.1" }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeaders);
            Assert.IsNotNull(pidls, "pidl is expected to be not null");

            PIDLResource resource = pidls[0];
            Assert.IsTrue(resource.DisplayPages.Count == 1);
            GroupDisplayHint paymentInstrumentColumnGroup = resource.GetDisplayHintById("paymentInstrumentColumnGroup") as GroupDisplayHint;
            Assert.IsTrue(paymentInstrumentColumnGroup.Members[0].HintId == "paymentInstrumentSelectHeading");
            Assert.IsTrue(paymentInstrumentColumnGroup.StyleHints.SequenceEqual(new List<string> { "dummy-stylehint" }));
            Assert.IsTrue(paymentInstrumentColumnGroup.Members[0].StyleHints.SequenceEqual(new List<string> { "margin-bottom-small" }));
            PropertyDisplayHint paymentInstrument = paymentInstrumentColumnGroup.Members[1] as PropertyDisplayHint;
            Assert.IsTrue(paymentInstrument.HintId == "paymentInstrument");
            Assert.IsTrue(paymentInstrument.StyleHints.SequenceEqual(new List<string> { "layout-inline", "alignment-vertical-center", "padding-start-medium" }));
            Dictionary<string, SelectOptionDescription> possibleOptions = paymentInstrument.PossibleOptions;

            foreach (string key in possibleOptions.Keys)
            {
                bool isRedeemGiftCardLink = key == "redeemGiftCardLink";
                bool isNewPaymentMethodLink = key == "newPaymentMethodLink";
                int optionTextGroup = isRedeemGiftCardLink || isNewPaymentMethodLink ? 0 : 1;
                SelectOptionDescription option = possibleOptions[key];
                Assert.IsTrue(option.StyleHints.SequenceEqual(new List<string> { "width-medium", "height-medium", "padding-vertical-medium", "margin-end-small", "padding-bottom-small", "margin-vertical-medium" }));
                GroupDisplayHint optionDisplayGroup = option.DisplayContent.Members[1] as GroupDisplayHint;
                GroupDisplayHint verticalTextTopGroup = optionDisplayGroup.Members[0] as GroupDisplayHint;
                GroupDisplayHint optionSelectedTextGroup = optionDisplayGroup.Members[optionTextGroup] as GroupDisplayHint;
                List<string> optionDisplayGroupStyleHints = new List<string> { "height-fill", "padding-top-small" };

                if (!isRedeemGiftCardLink && !isNewPaymentMethodLink)
                {
                    Assert.IsTrue(verticalTextTopGroup.StyleHints.SequenceEqual(new List<string>() { "height-fill" }));
                    Assert.IsTrue(option.DisplayContent.StyleHints.SequenceEqual(new List<string> { "width-fill", "height-fill" }));
                    List<DisplayHint> textDisplayHints = GetAllDisplayHintsByType(verticalTextTopGroup, "text");
                    List<DisplayHint> textGroupDisplayHints = GetAllDisplayHintsByType(verticalTextTopGroup, "textgroup");

                    Assert.IsTrue(textGroupDisplayHints.Count == 0);
                    foreach (DisplayHint textDisplayHint in textDisplayHints)
                    {
                        List<string> styleHints = textDisplayHint.HintId.StartsWith("warning_icon") ? new List<string>() { "text-bold", "font-size-2x-small", "line-height-x-small" } : new List<string>() { "text-bold", "font-size-small", "line-height-small" };
                        Assert.IsTrue(textDisplayHint.StyleHints.SequenceEqual(styleHints));
                    }
                }
                else
                {
                    optionDisplayGroupStyleHints = new List<string> { "height-fill", "alignment-vertical-center" };
                    TextDisplayHint fontIcon = option.DisplayContent.Members[0] as TextDisplayHint;
                    if (useFontIcons)
                    {
                        Assert.AreEqual(fontIcon.HintId, $"optionFontIcon_{key}");
                        Assert.IsTrue(fontIcon.StyleHints.SequenceEqual(new List<string> { "font-family-segoe-mdl2-assets", "font-size-large", "line-height-small-600", "margin-top-one-fifth" }));
                    }
                    else
                    {
                        Assert.IsNull(fontIcon);
                    }
                }

                Assert.IsTrue(option.StyleHints.SequenceEqual(selectOptionStyleHints));
                Assert.IsTrue(optionDisplayGroup.HintId.StartsWith("optionDisplayGroup_"));
                Assert.IsTrue(optionDisplayGroup.StyleHints.SequenceEqual(optionDisplayGroupStyleHints));

                Assert.IsTrue(optionSelectedTextGroup.StyleHints.SequenceEqual(new List<string> { "dummy-stylehint" }));
                Assert.IsTrue(optionSelectedTextGroup.Members.Count == 1);
                Assert.IsTrue(optionSelectedTextGroup.Members[0].StyleHints.SequenceEqual(new List<string> { "text-bold", "font-size-small", "line-height-small" }));
            }

            foreach (PIDLResource pidlResource in pidls)
            {
                foreach (DisplayHint displayHint in pidlResource.GetAllDisplayHints())
                {
                    Assert.IsTrue(displayHint.StyleHints.Count > 0);
                    ButtonDisplayHint buttonDisplayHint = displayHint as ButtonDisplayHint;
                    PropertyDisplayHint propertyDisplayHint = displayHint as PropertyDisplayHint;

                    if (buttonDisplayHint != null)
                    {
                        Assert.AreEqual(applyBorderForButtons, buttonDisplayHint.DisplayTags?.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints) == true && buttonDisplayHint.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                    }
                    else if (propertyDisplayHint != null)
                    {
                        string elementType = pidlResource.GetElementTypeByPropertyDisplayHint(propertyDisplayHint);
                        if (elementType == Constants.ElementTypes.Dropdown || elementType == Constants.ElementTypes.Textbox)
                        {
                            Assert.AreEqual(applyBorderForButtons, propertyDisplayHint.DisplayTags?.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints) == true && propertyDisplayHint.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                        }
                        else if (elementType == Constants.ElementTypes.ButtonList)
                        {
                            foreach (var option in propertyDisplayHint.PossibleOptions)
                            {
                                List<string> styleHints = option.Value.StyleHints.ToList();
                                Assert.IsTrue(styleHints.Count > 0);
                                Assert.AreEqual(applyBorderForButtons, option.Value.DisplayTags?.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints) == true && option.Value.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                            }
                        }
                        else
                        {
                            Assert.IsTrue(propertyDisplayHint.DisplayTags == null || !propertyDisplayHint.DisplayTags.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints));
                        }
                    }
                    else
                    {
                        Assert.IsTrue(displayHint.DisplayTags == null || !displayHint.DisplayTags.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints));
                    }
                }
            }
        }

        [DataRow("macmanage", "no", true)]
        [DataRow("officesmb", "no", true)]
        [DataRow("macmanage", "dk", false)]
        [DataRow("officesmb", "no", false)]
        [DataRow("cart", "dk", false)]
        [DataRow("amcweb", "dk", false)]
        [DataRow("webblends", "dk", false)]
        [DataRow("oxowebdirect", "no", false)]
        [DataRow("oxodime", "no", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_AddPI_Klarna(string partner, string country, bool enablePSSKlarnaCheckout)
        {
            // Arrange
            string url = string.Format(
                    "/v7.0/Account001/paymentMethodDescriptions?type=klarna&partner={0}&operation=Add&country={1}&language=en-US&family=invoice_credit&currency=USD",
                    partner,
                    country);
            string partnerSettingResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":null}}";

            if (enablePSSKlarnaCheckout)
            {
                partnerSettingResponse = "{\"add\": {\"template\": \"defaulttemplate\", \"features\": {\"enableKlarnaCheckout\": {\"applicableMarkets\": [\"nl\",\"at\",\"de\",\"fi\",\"dk\",\"no\",\"se\"]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "pidl is expected to be not null");

            if (Constants.PartnersToEnableKlarnaCheckout().Contains(partner, StringComparer.OrdinalIgnoreCase) || enablePSSKlarnaCheckout)
            {
                Assert.IsNotNull(pidls[0].GetDisplayHintById(Constants.DisplayHintIds.KlarnaCheckoutAddPageHeading));
            }
            else
            {
                Assert.IsNotNull(pidls[0].GetDisplayHintById(Constants.DisplayHintIds.AddKlarnaPageHeading));
            }
        }

        [DataRow("storify", "us", false)]
        [DataRow("xboxsubs", "us", false)]
        [DataRow("xboxsubs", "us", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPI_BorderOnFocus(string partner, string country, bool applyBorderOnFocus)
        {
            string operation = "selectInstance";
            string accountId = "Account001";
            string language = "en-us";
            string enabledFlights = "PXEnableVenmo";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.stored_value%22%2C%22invoice_credit.klarna%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22online_bank_transfer.paysafecard%22%5D";
            Dictionary<string, string> testHeaders = new Dictionary<string, string>();

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            if (applyBorderOnFocus)
            {
                enabledFlights += "," + Constants.PartnerFlightValues.ApplyAccentBorderWithGutterOnFocus;
            }

            testHeaders.Add("x-ms-flight", enabledFlights);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeaders);
            Assert.IsNotNull(pidls, "pidl is expected to be not null");

            foreach (PIDLResource pidlResource in pidls)
            {
                foreach (DisplayHint displayHint in pidlResource.GetAllDisplayHints())
                {
                    ButtonDisplayHint buttonDisplayHint = displayHint as ButtonDisplayHint;
                    PropertyDisplayHint propertyDisplayHint = displayHint as PropertyDisplayHint;

                    if (buttonDisplayHint != null)
                    {
                        Assert.AreEqual(applyBorderOnFocus, buttonDisplayHint.DisplayTags?.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints) == true && buttonDisplayHint.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                    }
                    else if (propertyDisplayHint != null)
                    {
                        string elementType = pidlResource.GetElementTypeByPropertyDisplayHint(propertyDisplayHint);
                        if (elementType == Constants.ElementTypes.Dropdown || elementType == Constants.ElementTypes.Textbox)
                        {
                            Assert.AreEqual(applyBorderOnFocus, propertyDisplayHint.DisplayTags?.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints) == true && propertyDisplayHint.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                        }
                        else if (elementType == Constants.ElementTypes.ButtonList)
                        {
                            foreach (var option in propertyDisplayHint.PossibleOptions)
                            {
                                Assert.AreEqual(applyBorderOnFocus, option.Value.DisplayTags?.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints) == true && option.Value.DisplayTags[Constants.DisplayTagKeys.DisplayTagStyleHints] == Constants.DisplayTagValues.SelectionBorderGutterAccent);
                            }
                        }
                        else
                        {
                            Assert.IsTrue(propertyDisplayHint.DisplayTags == null || !propertyDisplayHint.DisplayTags.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints));
                        }
                    }
                    else
                    {
                        Assert.IsTrue(displayHint.DisplayTags == null || !displayHint.DisplayTags.ContainsKey(Constants.DisplayTagKeys.DisplayTagStyleHints));
                    }
                }
            }
        }

        // If version < 2.7.0, there should be no style hints
        [DataRow("storify", "us", "2.6.0", "PXEnableVenmo,PXEnableXboxNativeStyleHints")]
        [DataRow("storify", "us", "2.5.0", "PXEnableVenmo,PXEnableXboxNativeStyleHints")]
        [DataRow("storify", "us", "2.6.0", "PXEnableVenmo")]
        [DataRow("storify", "us", "2.6.2", "PXEnableVenmo,PXEnableXboxNativeStyleHints")]
        [DataRow("storify", "us", "2.6.2", "PXEnableVenmo")]

        // If version >= 2.7.0 but flight PXEnableXboxNativeStyleHints is not enabled, there should be no style hints
        [DataRow("storify", "us", "2.7.0", "PXEnableVenmo")]
        [DataRow("storify", "us", "2.7.2", "PXEnableVenmo")]
        [DataRow("storify", "us", "2.8.0", "PXEnableVenmo")]

        // If version >= 2.7.0 and flight is enabled, there must be atleast one stylehint for every display hint
        [DataRow("storify", "us", "2.7.0", "PXEnableVenmo,PXEnableXboxNativeStyleHints")]
        [DataRow("storify", "us", "2.7.2", "PXEnableVenmo,PXEnableXboxNativeStyleHints")]
        [DataRow("storify", "us", "2.8.0", "PXEnableVenmo,PXEnableXboxNativeStyleHints")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPI_XboxNativeNoStyleHints(string partner, string country, string pidlSdkVersion, string flightsToBeEnabled)
        {
            string operation = "selectInstance";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.stored_value%22%2C%22invoice_credit.klarna%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22online_bank_transfer.paysafecard%22%5D";
            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            Dictionary<string, string> testHeaders = new Dictionary<string, string>
            {
                { "x-ms-flight", flightsToBeEnabled },
                { "x-ms-pidlsdk-version", pidlSdkVersion }
            };

            Version fullPidlSdkVersion = new Version(pidlSdkVersion + ".0");
            Version lowestCompatiblePidlVersion = new Version(2, 7, 0, 0);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeaders);
            Assert.IsNotNull(pidls, "pidl is expected to be not null");

            foreach (PIDLResource pidlResource in pidls)
            {
                foreach (DisplayHint displayHint in pidlResource.GetAllDisplayHints())
                {
                    PropertyDisplayHint propertyDisplayHint = displayHint as PropertyDisplayHint;

                    if (fullPidlSdkVersion < lowestCompatiblePidlVersion)
                    {
                        Assert.IsNull(displayHint.StyleHints);
                        if (propertyDisplayHint?.PossibleOptions != null)
                        {
                            foreach (var option in propertyDisplayHint.PossibleOptions)
                            {
                                Assert.IsNull(option.Value.StyleHints);
                            }
                        }
                    }
                    else if (flightsToBeEnabled.Contains("PXEnableXboxNativeStyleHints"))
                    {
                        Assert.IsTrue(displayHint.StyleHints.Count > 0);
                        if (propertyDisplayHint?.PossibleOptions != null)
                        {
                            foreach (var option in propertyDisplayHint.PossibleOptions)
                            {
                                List<string> styleHints = option.Value.StyleHints?.ToList();
                                Assert.IsTrue(styleHints.Count > 0);
                            }
                        }
                    }
                }
            }
        }

        [DataRow("nl", null, false)]
        [DataRow("de", null, false)]
        [DataRow("nl", "PXDisableSepaATDE", false)]
        [DataRow("de", "PXDisableSepaATDE", true)]
        [DataRow("nl", "PXDisableSepaNonATDE", true)]
        [DataRow("de", "PXDisableSepaNonATDE", false)]
        [DataRow("nl", "PXDisableSepaATDE, PXDisableSepaNonATDE", true)]
        [DataRow("de", "PXDisableSepaATDE, PXDisableSepaNonATDE", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXDisableSepaATDE_PXDisableSepaNonATDE_SepaDisableFlightsWorkAsExpected_AddOperation(string country, string enabledFlights, bool isFailureExpected)
        {
            // Arrange
            var headers = new Dictionary<string, string>();
            string operation = "add";
            string accountId = "Account001";
            string type = "sepa";
            string family = "direct_debit";
            string expectedException = "Assert.AreEqual failed. Expected:<OK>. Actual:<BadRequest>. ";
            string flight = "PXSampleFlight";

            string[] partners = new string[]
            {
                "webblends",
                "oxowebdirect",
                "amcweb",
                "northstarweb",
                "defaulttemplate",
                "officesmb"
            };

            // Concatenate the new value only if the original string is not null or empty
            enabledFlights = string.IsNullOrEmpty(enabledFlights) ? flight : enabledFlights + ", " + flight;

            // Enclose the string within quotation marks
            enabledFlights = '"' + enabledFlights + '"';

            foreach (var partner in partners)
            {
                if (partner.Contains("officesmb"))
                {
                    string partnerSettingResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":null}, \"update\":{\"template\":\"defaulttemplate\",\"features\":null}}";
                    PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                    headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };
                }

                List<PIDLResource> pidls = new List<PIDLResource>();
                try
                {
                    pidls = await GetPidlFromPXService(
                           string.Format(
                           "/v7.0/{0}/paymentMethodDescriptions?type={1}&partner={2}&operation={3}&language=en-us&family={4}&country={5}",
                           accountId,
                           type,
                           partner,
                           operation,
                           family,
                           country),
                           flightNames: enabledFlights,
                           additionaHeaders: headers);

                    Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                    Assert.IsNotNull(pidls[0].DisplayPages, "PIDLs Displaypages are expected not to be null");
                }
                catch (Exception ex)
                {
                    Assert.IsTrue(ex.Message.StartsWith(expectedException), string.Format("Failure was detected but not as expected"));
                }
            }
        }

        [DataRow("nl", "add")]
        [DataRow("nl", "update")]
        [DataRow("nl", "select")]
        [DataRow("nl", "selectInstance")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXDisableSepaNLAddSelect_AddAndSelectOperation(string country, string operation)
        {
            // Arrange
            var headers = new Dictionary<string, string>();
            string accountId = "Account001";
            string type = "sepa";
            string family = "direct_debit";
            string expectedException = "Assert.AreEqual failed. Expected:<OK>. Actual:<BadRequest>. ";
            string flights = "PXSampleFlight";

            string[] partners = new string[]
            {
                GlobalConstants.Partners.AmcWeb,
                GlobalConstants.Partners.NorthstarWeb,
                GlobalConstants.Partners.OxoWebDirect,
                GlobalConstants.Partners.SetupOffice,
                GlobalConstants.Partners.SetupOfficesdx,
                GlobalConstants.Partners.Webblends,
                GlobalConstants.Partners.DefaultTemplate,
                GlobalConstants.Partners.OfficeSMB
            };

            HashSet<string> partnersToDisableSepaNLAddSelect = new HashSet<string>()
            {
                GlobalConstants.Partners.SetupOffice,
                GlobalConstants.Partners.SetupOfficesdx,
            };

            // Act
            foreach (var partner in partners)
            {
                if (partner.Contains("officesmb"))
                {
                    string partnerSettingResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":null}, \"update\":{\"template\":\"defaulttemplate\",\"features\":null}, \"select\":{\"template\":\"defaulttemplate\",\"features\":null}, \"selectinstance\":{\"template\":\"defaulttemplate\",\"features\":null}}";
                    PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                    headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };
                }

                List<PIDLResource> pidls = new List<PIDLResource>();
                try
                {
                    pidls = await GetPidlFromPXService(
                        string.Format(
                            "/v7.0/{0}/paymentMethodDescriptions?type={1}&partner={2}&operation={3}&language=en-us&family={4}&country={5}",
                            accountId,
                            type,
                            partner,
                            operation,
                            family,
                            country),
                        flightNames: flights,
                        additionaHeaders: headers);

                    // Assert
                    Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                    Assert.IsTrue(!((string.Equals(operation, "add") || string.Equals(operation, "select")) && partnersToDisableSepaNLAddSelect.Contains(partner)), string.Format("Sepa should be diabled for partner {0} in add or select operation", partner));
                }
                catch (Exception ex)
                {
                    Assert.IsTrue(ex.Message.StartsWith(expectedException), string.Format("Failure was detected but not as expected"));
                }
            }
        }

        [DataRow(true)]
        [DataRow(false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXEnableAmexForIN_AmexEnableFlightWorksAsExpected_SelectOperations(bool flightEnabled)
        {
            string accountId = "Account001";
            string flightName = "PXEnableAmexForIN";
            string country = "in";
            bool isFailureExpected = !flightEnabled;

            List<string> flights = new List<string>() { "PXSampleFlight" };

            string[] operations = new string[]
            {
                "select",
                "selectinstance"
            };

            string[] partners = new string[]
            {
                "appsource",
                "azure",
                "azuresignup",
                "azureibiza",
                "bing",
                "commercialstores",
                "commercialwebblends"
            };

            if (flightEnabled)
            {
                flights.Add(flightName);
            }

            foreach (var partner in partners)
            {
                foreach (var operation in operations)
                {
                    List<PIDLResource> pidls = new List<PIDLResource>();
                    pidls = await GetPidlFromPXServiceWithFlight(
                            string.Format(
                                "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language=en-us&country={3}",
                                accountId,
                                partner,
                                operation,
                                country),
                            flights);

                    PropertyDisplayHint paymentData = null;

                    Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                    foreach (var pidl in pidls)
                    {
                        foreach (var displayPage in pidl.DisplayPages)
                        {
                            foreach (var member in displayPage.Members)
                            {
                                if ((string.Equals("select", operation, StringComparison.OrdinalIgnoreCase) && string.Equals(member.HintId, "paymentMethod", StringComparison.OrdinalIgnoreCase))
                                        || (string.Equals("selectinstance", operation, StringComparison.OrdinalIgnoreCase) && string.Equals(member.HintId, "paymentInstrument", StringComparison.OrdinalIgnoreCase)))
                                {
                                    paymentData = member as PropertyDisplayHint;
                                    Assert.IsNotNull(paymentData, "Payment Data in select or selectInstance operation are expected not to be null");
                                    if (string.Equals("select", operation, StringComparison.OrdinalIgnoreCase))
                                    {
                                        if (isFailureExpected)
                                        {
                                            Assert.IsTrue(paymentData.PossibleValues.Keys.Contains("credit_card_visa_mc"));
                                        }
                                        else
                                        {
                                            Assert.IsTrue(paymentData.PossibleValues.Keys.Contains("credit_card_visa_amex_mc"));
                                        }
                                    }
                                    else if (string.Equals("selectinstance", operation, StringComparison.OrdinalIgnoreCase))
                                    {
                                        if (isFailureExpected)
                                        {
                                            Assert.IsFalse(paymentData.PossibleValues.Keys.Contains("Account001-Pi003-Amex"));
                                        }
                                        else
                                        {
                                            Assert.IsTrue(paymentData.PossibleValues.Keys.Contains("Account001-Pi003-Amex"));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        [DataRow(true)]
        [DataRow(false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXDisableAch_AchDisableFlightWorksAsExpected_SelectOperations(bool flightEnabled)
        {
            string accountId = "Account001";
            string flightName = "PXDisableAch";
            string country = "us";
            bool isFailureExpected = !flightEnabled;

            List<string> flights = new List<string>() { "PXSampleFlight" };

            string[] operations = new string[]
            {
                "select",
                "selectinstance"
            };

            string[] partners = new string[]
            {
                "webblends",
                "oxowebdirect",
                "amcweb",
                "northstarweb"
            };

            if (flightEnabled)
            {
                flights.Add(flightName);
            }

            foreach (var partner in partners)
            {
                foreach (var operation in operations)
                {
                    List<PIDLResource> pidls = new List<PIDLResource>();
                    pidls = await GetPidlFromPXServiceWithFlight(
                            string.Format(
                                "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language=en-us&country={3}",
                                accountId,
                                partner,
                                operation,
                                country),
                            flights);

                    PropertyDisplayHint paymentData = null;

                    Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                    foreach (var pidl in pidls)
                    {
                        foreach (var displayPage in pidl.DisplayPages)
                        {
                            foreach (var member in displayPage.Members)
                            {
                                if (string.Equals("select", operation, StringComparison.OrdinalIgnoreCase) && string.Equals(member.HintId, "paymentMethod", StringComparison.OrdinalIgnoreCase))
                                {
                                    paymentData = member as PropertyDisplayHint;
                                    Assert.IsNotNull(paymentData, "Payment Data in select operation is expected not to be null");
                                    Assert.AreEqual(isFailureExpected, paymentData.PossibleValues.Keys.Contains("direct_debit_ach"));
                                }
                                else if (string.Equals("selectinstance", operation, StringComparison.OrdinalIgnoreCase) && string.Equals(member.HintId, "paymentInstrument", StringComparison.OrdinalIgnoreCase))
                                {
                                    paymentData = member as PropertyDisplayHint;
                                    Assert.IsNotNull(paymentData, "Payment Data in selectInstance operation is expected not to be null");
                                    Assert.AreEqual(isFailureExpected, paymentData.PossibleValues.Keys.Contains("Account001-Pi005-Ach"));
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// This test is used to verify the inline group of state and postal code for different countries based on flighting feature enableZipCodeStateGrouping enabled.
        /// </summary>
        /// <param name="country"></param>
        /// <param name="zipCodeStateGroupDisplayHintId">Group Display HintId</param>
        /// <returns></returns>
        [DataRow("kr", "addressPostalCodeStateGroup")]
        [DataRow("fr", "addressPostalCodeProvinceGroup")]
        [DataRow("us", "addressStatePostalCodeGroup")]
        [DataRow("ca", "addressProvincePostalCodeGroup")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ValidateInlineStateAndPostalCodeGrouping_EnableZipCodeStateGrouping(string country, string zipCodeStateGroupDisplayHintId)
        {
            // Arrange
            List<string> operations = new List<string> { "add", "update" };
            List<bool> groupingFeatureStatuses = new List<bool>() { true, false };
            List<string> pssPartners = new List<string> { "defaulttemplate", "twopage" };

            Dictionary<string, string> headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            foreach (string operation in operations)
            {
                foreach (bool groupingFeatureStatus in groupingFeatureStatuses)
                {
                    foreach (string partner in pssPartners)
                    {
                        string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&family=credit_card&type=visa%2Camex%2Cmc&partner=officesmb&operation={operation}";

                        string partnerSettingResponse = "{\"add\":{\"template\":\"" + partner + "\",\"features\":{\"enableZipCodeStateGrouping\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":" + groupingFeatureStatus.ToString().ToLower() + "}]}}},\"update\":{\"template\":\"" + partner + "\",\"features\":{\"enableZipCodeStateGrouping\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":" + groupingFeatureStatus.ToString().ToLower() + "}]}}}}";
                        PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

                        // Act
                        List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

                        // Assert
                        Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                        Assert.IsNotNull(pidls[0].DisplayPages.Count, "DisplayPages are expected to not be null");

                        foreach (PIDLResource pidl in pidls)
                        {
                            DisplayHint zipCodeStateGrouping = pidl.GetDisplayHintById(zipCodeStateGroupDisplayHintId);

                            if (groupingFeatureStatus)
                            {
                                Assert.IsNotNull(zipCodeStateGrouping);
                                Assert.IsTrue(zipCodeStateGrouping.DisplayTags.ContainsKey("zipcode-state-group"));
                            }
                            else
                            {
                                Assert.IsNull(zipCodeStateGrouping);
                            }
                        }

                        PXSettings.PartnerSettingsService.Responses.Clear();
                    }
                }
            }
        }

        [DataRow("nl", null, false)]
        [DataRow("de", null, false)]
        [DataRow("nl", new string[] { "PXDisableSepaATDE" }, false)]
        [DataRow("de", new string[] { "PXDisableSepaATDE" }, true)]
        [DataRow("nl", new string[] { "PXDisableSepaNonATDE" }, true)]
        [DataRow("de", new string[] { "PXDisableSepaNonATDE" }, false)]
        [DataRow("nl", new string[] { "PXDisableSepaATDE", "PXDisableSepaNonATDE" }, true)]
        [DataRow("de", new string[] { "PXDisableSepaATDE", "PXDisableSepaNonATDE" }, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXDisableSepaATDE_PXDisableSepaNonATDE_SepaDisableFlightsWorkAsExpected_SelectOperations(string country, string[] enabledFlights, bool isFailureExpected)
        {
            string accountId = "Account001";

            List<string> flights = new List<string>() { "PXSampleFlight" };

            string[] operations = new string[]
            {
                "select",
                "selectinstance"
            };

            string[] partners = new string[]
            {
                "webblends",
                "oxowebdirect",
                "northstarweb"
            };

            if (enabledFlights != null)
            {
                foreach (var flight in enabledFlights)
                {
                    flights.Add(flight);
                }
            }

            foreach (var partner in partners)
            {
                foreach (var operation in operations)
                {
                    List<PIDLResource> pidls = new List<PIDLResource>();
                    pidls = await GetPidlFromPXServiceWithFlight(
                            string.Format(
                                "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language=en-us&country={3}",
                                accountId,
                                partner,
                                operation,
                                country),
                            flights);

                    PropertyDisplayHint paymentData = null;

                    Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                    foreach (var pidl in pidls)
                    {
                        foreach (var displayPage in pidl.DisplayPages)
                        {
                            foreach (var member in displayPage.Members)
                            {
                                if ((string.Equals("select", operation, StringComparison.OrdinalIgnoreCase) && string.Equals(member.HintId, "paymentMethod", StringComparison.OrdinalIgnoreCase))
                                        || (string.Equals("selectinstance", operation, StringComparison.OrdinalIgnoreCase) && string.Equals(member.HintId, "paymentInstrument", StringComparison.OrdinalIgnoreCase)))
                                {
                                    paymentData = member as PropertyDisplayHint;
                                    Assert.IsNotNull(paymentData, "Payment Data in select or selectInstance operation are expected not to be null");
                                    if (string.Equals("select", operation, StringComparison.OrdinalIgnoreCase))
                                    {
                                        if (isFailureExpected)
                                        {
                                            Assert.IsFalse(paymentData.PossibleValues.Keys.Contains("direct_debit_sepa"));
                                        }
                                        else
                                        {
                                            Assert.IsTrue(paymentData.PossibleValues.Keys.Contains("direct_debit_sepa"));
                                        }
                                    }
                                    else if (string.Equals("selectinstance", operation, StringComparison.OrdinalIgnoreCase))
                                    {
                                        if (isFailureExpected)
                                        {
                                            Assert.IsFalse(paymentData.PossibleValues.Keys.Contains("Account001-Pi006-Sepa"));
                                        }
                                        else
                                        {
                                            Assert.IsTrue(paymentData.PossibleValues.Keys.Contains("Account001-Pi006-Sepa"));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        // Default behavior is to allow payment methods
        [DataRow("us", "webpay", true, true)]
        [DataRow("us", "webblends", true, true)]
        [DataRow("us", "oxowebdirect", true, true)]
        [DataRow("us", "cart", true, true)]
        [DataRow("us", "xbox", true, true)]
        [DataRow("ca", "webblends", true, true)]
        [DataRow("ca", "oxowebdirect", true, true)]
        [DataRow("ca", "cart", true, true)]
        [DataRow("ca", "xbox", true, true)]

        // In China (with flights off), Visa and MC are disallowed except for amcweb and bing
        [DataRow("cn", "webblends", false, true)]
        [DataRow("cn", "oxowebdirect", false, true)]
        [DataRow("cn", "cart", false, true)]
        [DataRow("cn", "xbox", false, true)]
        [DataRow("cn", "amcweb", true, true)]
        [DataRow("cn", "bing", true, true)]

        // In  India (with flights off), Amex is disallowed for commercial partners
        [DataRow("in", "webblends", true, true)]
        [DataRow("in", "oxowebdirect", true, true)]
        [DataRow("in", "cart", true, true)]
        [DataRow("in", "xbox", true, true)]
        [DataRow("in", "amcweb", true, true)]
        [DataRow("in", "bing", true, false)]
        [DataRow("in", "azure", true, false)]
        [DataRow("in", "azuresignup", true, false)]
        [DataRow("in", "azureibiza", true, false)]
        [DataRow("in", "commercialstores", true, false)]
        [DataRow("in", "commercialwebblends", true, false)]
        [DataRow("in", "defaulttemplate", true, true, true)]
        [DataRow("in", "cart", true, true, true)]
        [DataRow("in", "webblends", true, true, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_TypesAreAsExpected(string country, string partner, bool allowVisaAndMC, bool allowAmex, bool allowRupay = false, bool allowCUPCommercial = false)
        {
            var rupayFlights = "PXEnableRupayForIN,IndiaRupayEnable";
            Dictionary<string, string> headers = null;

            if (allowRupay)
            {
                headers = new Dictionary<string, string>();
                headers.Add("x-ms-flight", rupayFlights);
            }

            var ccPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/Account001/paymentMethodDescriptions?country={0}&partner={1}&family=credit_card",
                    country,
                    partner),
                additionaHeaders: headers);

            if (string.Equals(partner, "webpay", StringComparison.InvariantCultureIgnoreCase))
            {
                var countryDisplayHint = ccPidls[0].GetDisplayHintById("addressCountry") as PropertyDisplayHint;
                Assert.IsFalse(countryDisplayHint.PossibleValues.ContainsKey("cn"));
            }

            var expectedTypes = PimsMockResponseProvider.GetPaymentMethods(country, "credit_card", null).Where(pm =>
            {
                return allowVisaAndMC
                    || (!string.Equals(pm.PaymentMethodType, "visa", StringComparison.OrdinalIgnoreCase)
                        && !string.Equals(pm.PaymentMethodType, "mc", StringComparison.OrdinalIgnoreCase));
            }).Where(pm =>
            {
                return allowAmex
                    || !string.Equals(pm.PaymentMethodType, "amex", StringComparison.OrdinalIgnoreCase);
            }).Where(pm =>
            {
                return allowRupay
                    || !string.Equals(pm.PaymentMethodType, "rupay", StringComparison.OrdinalIgnoreCase);
            }).Where(pm =>
            {
                return allowCUPCommercial
                    || !string.Equals(pm.PaymentMethodType, "unionpay_international", StringComparison.OrdinalIgnoreCase);
            }).Select(pm =>
            {
                return string.Format("{0}.{1}", pm.PaymentMethodFamily, pm.PaymentMethodType);
            }).ToArray();

            var actualTypes = ccPidls.Select(pidl =>
            {
                return string.Format("{0}.{1}", pidl.Identity["family"], pidl.Identity["type"]);
            }).ToArray();

            CollectionAssert.AreEquivalent(expectedTypes, actualTypes);
        }

        [DataRow("commercialstores", "virtual", "invoice_basic", HttpStatusCode.OK)]
        [DataRow("commercialstores", "virtual", "invoice_check", HttpStatusCode.OK)]
        [DataRow("commercialstores", "virtual", "alipay", HttpStatusCode.OK)]
        [DataRow("commercialstores", "virtual", "unionpay", HttpStatusCode.OK)]
        [DataRow("webblends", "virtual", "invoice_check", HttpStatusCode.BadRequest)]
        [DataRow("oxowebdirect", "virtual", "invoice_check", HttpStatusCode.BadRequest)]
        [DataRow("azure", "virtual", "invoice_check", HttpStatusCode.BadRequest)]
        [DataRow("officesmb", "virtual", "invoice_basic", HttpStatusCode.OK)]
        [DataRow("officesmb", "virtual", "invoice_check", HttpStatusCode.OK)]
        [DataRow("officesmb", "virtual", "alipay", HttpStatusCode.OK)]
        [DataRow("officesmb", "virtual", "unionpay", HttpStatusCode.OK)]
        [DataRow("officesmb", "virtual", "legacy_invoice", HttpStatusCode.OK)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_AdditionalPaymentMethods(string partner, string family, string type, HttpStatusCode expectedStatusCode)
        {
            string[] operations = new string[] { "add" };

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (string.Equals(type, "legacy_invoice"))
            {
                operations.Append("update");
            }

            foreach (string operation in operations)
            {
                if (string.Equals(partner, "officesmb", StringComparison.CurrentCultureIgnoreCase))
                {
                    string pssmockResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}},\"update\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}}}";
                    PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);
                }

                // Arrange
                string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation={operation}&family={family}&type={type}";

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService(url, expectedStatusCode, additionaHeaders: headers);

                // Assert
                if (expectedStatusCode == HttpStatusCode.OK)
                {
                    Assert.IsNotNull(pidls, "Pidls is expected to be not null");
                    Assert.IsNotNull(pidls[0].DisplayPages, "Pidl is expected to have page");
                }
            }
        }

        [DataRow("x-ms-flight", "showAVSSuggestions", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", true, "azure", "saveNextButton", true)]
        [DataRow("x-ms-flight", "showAVSSuggestionsModal", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", true, "azure", "saveNextButton", true)]
        [DataRow("x-ms-flight", "showAVSSuggestions", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", true, "azure", "saveNextButton", false)]
        [DataRow("x-ms-flight", "", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", false, "azure", "saveNextButton", false)]
        [DataRow("x-ms-flight", "showAVSSuggestions", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "update", true, "azure", "saveNextButton", true)]
        [DataRow("x-ms-flight", "showAVSSuggestionsModal", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "update", true, "azure", "saveNextButton", true)]
        [DataRow("x-ms-flight", "showAVSSuggestions", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "update", true, "azure", "saveNextButton", false)]
        [DataRow("x-ms-flight", "", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "update", false, "azure", "saveNextButton", false)]
        [DataRow("x-ms-flight", "showAVSSuggestions", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", true, "commercialstores", "saveButton", false)]
        [DataRow("x-ms-flight", "", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", false, "commercialstores", "saveButton", false)]
        [DataRow("x-ms-flight", "showAVSSuggestions", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", true, "xboxsettings", "saveButton", false)]
        [DataRow("x-ms-flight", "", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", false, "xboxsettings", "saveButton", false)]
        [DataRow("x-ms-flight", "showAVSSuggestions", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", true, "storify", "saveButton", false)]
        [DataRow("x-ms-flight", "", "", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", false, "storify", "saveButton", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_NoCompletePrerequisites_ModernValidate(
            string headerKey,
            string allHeaderValue,
            string leftoverHeader,
            string family,
            string type,
            string operation,
            bool expectedShowAVS,
            string partner,
            string buttonDisplayId,
            bool usePidlPage)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation={operation}&family={family}&type={type}";

            PXFlightHandler.AddToEnabledFlights("PXEnableAVSSuggestions");

            if (!usePidlPage)
            {
                PXFlightHandler.AddToEnabledFlights("TradeAVSUsePidlModalInsteadofPidlPage");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithPartnerHeader(url, headerKey, allHeaderValue, leftoverHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            VerifyAVSComponentAdded(pidls, buttonDisplayId, expectedShowAVS);

            foreach (PIDLResource piPidl in pidls)
            {
                DisplayHint saveButtonDisplayHint = piPidl.GetDisplayHintById(buttonDisplayId);
                if (string.Equals("showAVSSuggestionsModal", allHeaderValue) ||
                    (!usePidlPage && expectedShowAVS))
                {
                    Assert.IsTrue(saveButtonDisplayHint.Action.Context.ToString().Contains("scenario=suggestAddressesTradeAVSUsePidlModal"));
                }
            }
        }

        [DataRow("credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "add", true, "windowsstore", "saveButton", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ModernValidate_PartnerSettings(
            string family,
            string type,
            string operation,
            bool expectedShowAVS,
            string partner,
            string buttonDisplayId,
            bool usePidlPage)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation={operation}&family={family}&type={type}";

            string expectedPSSResponse = "{\"validateinstance\":{\"template\":\"default\",\"features\":{\"verifyAddressStyling\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true}]}}},\"add\":{\"template\":\"twopage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"useSuggestAddressesTradeAVSV1Scenario\":true}]}}}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache,PXUsePartnerSettingsService"
                }
            };

            // Act;
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            VerifyAVSComponentAdded(pidls, buttonDisplayId, expectedShowAVS);

            foreach (PIDLResource piPidl in pidls)
            {
                DisplayHint saveButtonDisplayHint = piPidl.GetDisplayHintById(buttonDisplayId);
                Assert.IsTrue(saveButtonDisplayHint.Action.Context.ToString().Contains("scenario=suggestAddressesTradeAVS"));
            }
        }

        [DataRow("showAVSSuggestions", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "", "commercialstores", "add", "saveButton", false)]
        [DataRow("showAVSSuggestions", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "departmentalPurchase", "commercialstores", "add", "saveButton", false)]
        [DataRow("showAVSSuggestions", "direct_debit", "ach", "", "commercialstores", "add", "saveButton", false)]
        [DataRow("showAVSSuggestions", "direct_debit", "ach", "departmentalPurchase", "commercialstores", "add", "saveButton", false)]
        [DataRow("showAVSSuggestions", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "", "azure", "add", "saveNextButton", false)]
        [DataRow("showAVSSuggestions,enableAVSAddtionalFlags", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "", "commercialstores", "add", "saveButton", true)]
        [DataRow("showAVSSuggestions,enableAVSAddtionalFlags", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "departmentalPurchase", "commercialstores", "add", "saveButton", true)]
        [DataRow("showAVSSuggestions,enableAVSAddtionalFlags", "direct_debit", "ach", "", "commercialstores", "add", "saveButton", true)]
        [DataRow("showAVSSuggestions,enableAVSAddtionalFlags", "direct_debit", "ach", "departmentalPurchase", "commercialstores", "add", "saveButton", true)]
        [DataRow("showAVSSuggestions,enableAVSAddtionalFlags", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "", "azure", "add", "saveNextButton", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CompletePrerequisites_ModernValidate_AVSAdditionalFlags(
            string enabledFlights,
            string family,
            string type,
            string scenario,
            string partner,
            string operation,
            string buttonDisplayId,
            bool expectAVSAdditionalProperties)
        {
            // Arrange
            string url = $"/v7.0/EmpAccountNoProfile/paymentMethodDescriptions?country=us&completePrerequisites=True&language=en-US&partner={partner}&operation={operation}&family={family}&type={type}";

            if (!string.IsNullOrEmpty(scenario))
            {
                url += $"&scenario={scenario}";
            }

            PXFlightHandler.AddToEnabledFlights("PXEnableAVSSuggestions");

            // setup for employee profile
            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-authinfo", "type=aad,context=me" },
                { "x-ms-flight", enabledFlights },
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, enabledFlights, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            VerifyAVSComponentAdded(pidls, buttonDisplayId, true);

            VerifyAdditionalAVSPropertiesAdded(pidls, expectAVSAdditionalProperties, addedInlinkedPidl: true, "default_address");
        }

        [DataRow("showAVSSuggestions,enableAVSAddtionalFlags", "virtual", "invoice_basic", "", "commercialstores", "add", "validateThenSuccessWithPayloadButton", true)]
        [DataRow("showAVSSuggestions,enableAVSAddtionalFlags", "virtual", "invoice_basic", "", "officesmb", "add", "validateThenSuccessWithPayloadButton", true)]
        [DataRow("showAVSSuggestions,enableAVSAddtionalFlags", "virtual", "invoice_check", "", "commercialstores", "add", "validateThenSuccessWithPayloadButton", true)]
        [DataRow("showAVSSuggestions,enableAVSAddtionalFlags", "virtual", "invoice_check", "", "officesmb", "add", "validateThenSuccessWithPayloadButton", true)]
        [DataRow("showAVSSuggestions", "virtual", "invoice_basic", "", "commercialstores", "add", "validateThenSuccessWithPayloadButton", false)]
        [DataRow("showAVSSuggestions", "virtual", "invoice_basic", "", "officesmb", "add", "validateThenSuccessWithPayloadButton", false)]
        [DataRow("showAVSSuggestions", "virtual", "invoice_check", "", "commercialstores", "add", "validateThenSuccessWithPayloadButton", false)]
        [DataRow("showAVSSuggestions", "virtual", "invoice_check", "", "officesmb", "add", "validateThenSuccessWithPayloadButton", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_NoCompletePrerequisites_ModernValidate_AVSAdditionalFlags(
           string enabledFlights,
           string family,
           string type,
           string scenario,
           string partner,
           string operation,
           string buttonDisplayId,
           bool expectAVSAdditionalProperties)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation={operation}&family={family}&type={type}";

            if (!string.IsNullOrEmpty(scenario))
            {
                url += $"&scenario={scenario}";
            }

            PXFlightHandler.AddToEnabledFlights("PXEnableAVSSuggestions");

            if (string.Equals(partner, "officesmb", StringComparison.CurrentCultureIgnoreCase))
            {
                enabledFlights = $"{enabledFlights},PXDisablePSSCache";
                string pssmockResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}},\"update\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);
            }

            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-flight", enabledFlights },
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, enabledFlights, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            // In the invoice_basic, we only enabled legacy error message
            // Based on the address provided in the bug below. It seems legacy error string is good enough to handle the error case.
            // Therefore, in the test case "invoice_basic", we skip skipModernAVSErrorMessageCheck
            // Bug 35298876: AVSPIDLTesting - MAC Subscription : Add payment method - Current address not getting updated for Interaction Required status for US
            bool skipModernAVSErrorMessageCheck = type == "invoice_basic";
            VerifyAVSComponentAdded(pidls, buttonDisplayId, true, skipModernAVSErrorMessageCheck);

            VerifyAdditionalAVSPropertiesAdded(pidls, expectAVSAdditionalProperties, addedInlinkedPidl: false, "default_address");
        }

        [DataRow(true, true, true, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "add", "nextModernValidateButton", "1.22.0-alpha.200_reactview", true)]
        [DataRow(true, false, true, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "add", "saveButton", "1.23.0-alpha.2_reactview", true)]
        [DataRow(false, true, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "add", "", "1.22.0", true)]
        [DataRow(true, true, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "update", "nextModernValidateButton", "1.22.0-alpha.15_reactview", false)]
        [DataRow(true, false, true, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "update", "saveButton", "1.22.0-alpha.144_reactnative", true)]
        [DataRow(true, false, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "update", "", "1.22.0_reactnative", false)]
        [DataRow(true, false, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "update", "", null, false)]
        [DataRow(false, false, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "update", "", "1.22.0", false)]
        [DataRow(true, false, true, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "update", "saveButton", "1.22.0-alpha.145_reactnative", false)]
        [DataRow(false, true, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "update", "", "1.23.0-alpha.120_reactnative", true)]
        [DataRow(false, false, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "update", "", "1.22.0", true)]
        [DataRow(true, true, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "add", "", "1.19.0-alpha.2_reactview", false)]
        [DataRow(true, true, true, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "update", "nextModernValidateButton", "1.24.0", false)]
        [DataRow(true, true, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "storify", "update", "", "1.21.0", true)]
        [DataRow(true, true, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "xboxsettings", "add", "", "1.22.0_reactview", true)]
        [DataRow(true, true, true, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "xboxsettings", "add", "nextModernValidateButton", "1.22.0-alpha.144_reactview", true)]
        [DataRow(true, true, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "xboxsettings", "add", "", "1.22.0-alpha.2_reactview", false)]
        [DataRow(false, true, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "xboxsettings", "add", "", "1.22.0", false)]
        [DataRow(true, false, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "xboxsettings", "add", "", "1.22.0-alpha.107_reactview", false)]
        [DataRow(false, false, false, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "xboxsettings", "add", "", "1.22.0", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ModernValidate_ShowSummaryPage_PidlSDKVersion(
           bool enableAVSSuggestionFlight,
           bool enableShowSummaryPageFlight,
           bool shouldContainHeaders, // if the version is < 1.22.0.144 the header will be removed, shouldContainHeaders = false.
           string family,
           string type,
           string partner,
           string operation,
           string avsButtonDisplayId,
           string pidlSdkVersion,
           bool completePrerequisites)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation={operation}&family={family}&type={type}";

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            if (enableAVSSuggestionFlight)
            {
                PXFlightHandler.AddToEnabledFlights("showAVSSuggestions");
            }

            if (enableShowSummaryPageFlight)
            {
                PXFlightHandler.AddToEnabledFlights("showSummaryPage");
            }

            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", pidlSdkVersion }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            if (shouldContainHeaders)
            {
                if (enableAVSSuggestionFlight)
                {
                    VerifyAVSComponentAdded(pidls, avsButtonDisplayId, true);
                }

                if (enableShowSummaryPageFlight)
                {
                    VerifySummaryPageComponentAdded(pidls, avsButtonDisplayId);
                }
            }
        }

        [DataRow("storify", "us", true, true)]
        [DataRow("storify", "us", false, false)]
        [DataRow("storify", "in", true, false)]
        [DataRow("storify", "in", false, false)]
        [DataRow("xboxsettings", "us", true, true)]
        [DataRow("xboxsettings", "us", false, false)]
        [DataRow("xboxsettings", "in", true, false)]
        [DataRow("xboxsettings", "in", false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXEnableXboxNativeListPIRewardsPointsDisplay(string partner, string country, bool useFlight, bool shouldShowPointsDetails)
        {
            string url = $"/v7.0/08444683-1a47-4762-9f87-3c5da05d0ee9/paymentMethodDescriptions?country={country}" +
                $"&language=en-us&partner={partner}&scenario=null&operation=selectinstance&allowedPaymentMethods=%5B%22credit_card.visa%22%2C%22credit_card.mc%22%2C%22credit_card.amex%22%2C%22credit_card.discover%22%2C%22ewallet.stored_value%22%2C%22ewallet.paypal%22%2C%22mobile_billing_non_sim%22%5D";

            if (partner == "xboxsettings")
            {
                url = $"/v7.0/08444683-1a47-4762-9f87-3c5da05d0ee9/paymentMethodDescriptions?country={country}" +
                    $"&language=en-us&partner={partner}&scenario=manage&operation=selectinstance&allowedPaymentMethods=%5B%22credit_card.visa%22%2C%22credit_card.mc%22%2C%22credit_card.amex%22%2C%22credit_card.discover%22%2C%22ewallet.stored_value%22%2C%22ewallet.paypal%22%2C%22mobile_billing_non_sim%22%5D";
            }

            string listPIResponse = "[{ \"id\": \"FgGmBAAAAAApAACA\", \"accountId\": \"08444683-1a47-4762-9f87-3c5da05d0ee9\", \"paymentMethod\": { \"paymentMethodType\": \"visa\", \"properties\": { \"offlineRecurring\": true, \"userManaged\": true, \"soldToAddressRequired\": true, \"splitPaymentSupported\": true, \"supportedOperations\": [ \"authorize\", \"charge\", \"refund\", \"chargeback\" ], \"taxable\": false, \"providerRemittable\": false }, \"paymentMethodFamily\": \"credit_card\", \"display\": { \"name\": \"Visa\", \"logo\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_visa.png\", \"logos\": [ { \"mimeType\": \"image/png\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_visa.png\" }, { \"mimeType\": \"image/svg+xml\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/v2_logo_visa.svg\" } ] } }, \"status\": \"Active\", \"creationDateTime\": \"2017-05-10T20:39:40.257\", \"lastUpdatedDateTime\": \"2017-05-10T20:39:40.257\", \"details\": { \"exportable\": true, \"accountHolderName\": \"John Doe\", \"address\": { \"address_line1\": \"1 Microsoft Way\", \"city\": \"Redmond\", \"region\": \"wa\", \"postal_code\": \"98052\", \"country\": \"US\" }, \"lastFourDigits\": \"5678\", \"expiryYear\": \"2023\", \"expiryMonth\": \"6\", \"picvRequired\": false, \"balance\": 0 } }, { \"id\": \"FgGmBAAAAAApAACB\", \"accountId\": \"08444683-1a47-4762-9f87-3c5da05d0ee9\", \"paymentMethod\": { \"paymentMethodType\": \"amex\", \"properties\": { \"offlineRecurring\": true, \"userManaged\": true, \"soldToAddressRequired\": true, \"splitPaymentSupported\": true, \"supportedOperations\": [ \"authorize\", \"charge\", \"refund\", \"chargeback\" ], \"taxable\": false, \"providerRemittable\": false }, \"paymentMethodFamily\": \"credit_card\", \"display\": { \"name\": \"Amex\", \"logo\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_amex.png\", \"logos\": [ { \"mimeType\": \"image/png\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_amex.png\" }, { \"mimeType\": \"image/svg+xml\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_amex.svg\" } ] } }, \"status\": \"Active\", \"creationDateTime\": \"2017-05-10T20:39:40.257\", \"lastUpdatedDateTime\": \"2017-05-10T20:39:40.257\", \"details\": { \"exportable\": true, \"accountHolderName\": \"John Doe\", \"address\": { \"address_line1\": \"1 Microsoft Way\", \"city\": \"Redmond\", \"region\": \"wa\", \"postal_code\": \"98052\", \"country\": \"US\" }, \"lastFourDigits\": \"0001\", \"expiryYear\": \"2023\", \"expiryMonth\": \"6\", \"picvRequired\": false, \"balance\": 0 } }, { \"id\": \"FgGmBAAAAAApAACC\", \"accountId\": \"08444683-1a47-4762-9f87-3c5da05d0ee9\", \"paymentMethod\": { \"paymentMethodType\": \"mc\", \"properties\": { \"offlineRecurring\": true, \"userManaged\": true, \"soldToAddressRequired\": true, \"splitPaymentSupported\": true, \"supportedOperations\": [ \"authorize\", \"charge\", \"refund\", \"chargeback\" ], \"taxable\": false, \"providerRemittable\": false }, \"paymentMethodFamily\": \"credit_card\", \"display\": { \"name\": \"Mc\", \"logo\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_mc.png\", \"logos\": [ { \"mimeType\": \"image/png\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_mc.png\" }, { \"mimeType\": \"image/svg+xml\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_mc.svg\" } ] } }, \"status\": \"Active\", \"creationDateTime\": \"2017-05-10T20:39:40.257\", \"lastUpdatedDateTime\": \"2017-05-10T20:39:40.257\", \"details\": { \"exportable\": true, \"accountHolderName\": \"John Doe\", \"address\": { \"address_line1\": \"1 Microsoft Way\", \"city\": \"Redmond\", \"region\": \"wa\", \"postal_code\": \"98052\", \"country\": \"US\" }, \"isXboxCoBrandedCard\": true, \"pointsBalanceDetails\": { \"rewardsEnabled\": true, \"rewardsProgramDetail\": { \"conversionRate\": 0.1, \"minRedeemPoints\": 10, \"maxRedeemPoints\": 1000 }, \"rewardsSummary\": { \"pointsBalance\": 12345, \"currencyBalance\": 1234.50, \"currencyCode\": \"USD\" } }, \"lastFourDigits\": \"0002\", \"expiryYear\": \"2023\", \"expiryMonth\": \"6\", \"picvRequired\": false, \"balance\": 0 } }]";
            PXSettings.PimsService.ArrangeResponse(listPIResponse, urlPattern: ".*paymentInstruments.*");

            List<string> flights = new List<string>();

            if (useFlight)
            {
                flights.Add("PXEnableXboxNativeListPIRewardsPointsDisplay");
            }

            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);
            Assert.IsNotNull(pidls);

            if (partner == "xboxsettings")
            {
                Assert.AreEqual(pidls[0].GetDisplayHintById("cardPointsTemplateText") != null, shouldShowPointsDetails);
                Assert.AreEqual(pidls[0].GetDisplayHintById("currencyValueTemplateText") != null, shouldShowPointsDetails);
                Assert.AreEqual(pidls[0].GetDisplayHintById("xboxCoBrandedCardCardImage") != null, shouldShowPointsDetails);

                if (shouldShowPointsDetails)
                {
                    // For older versions of pidl-react-native-xbox that use indexing for displayHints in xboxsettings
                    DisplayHint[] displayHints = pidls[0].DisplayHints().ToArray();
                    Assert.AreEqual(displayHints[12].HintId, "blankPlaceholder");
                    Assert.AreEqual(displayHints[13].HintId, "cardPointsTemplateText");
                    Assert.AreEqual(displayHints[14].HintId, "currencyValueTemplateText");
                    Assert.AreEqual(displayHints[15].HintId, "xboxCoBrandedCardCardImage");
                }
            }
            else
            {
                string serializedPidl = JsonConvert.SerializeObject(pidls[0]);
                Assert.AreEqual(serializedPidl.Contains("cardPointsGroup"), shouldShowPointsDetails);
            }
        }

        [DataRow("xboxsettings", "us", true, true)]
        [DataRow("xboxsettings", "us", false, false)]
        [DataRow("xboxsettings", "in", true, false)]
        [DataRow("xboxsettings", "in", false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXEnableXboxCardUpsellPaymentOptions(string partner, string country, bool useFlight, bool shouldShowPointsDetails)
        {
            string url = $"/v7.0/08444683-1a47-4762-9f87-3c5da05d0ee9/paymentMethodDescriptions?country={country}" +
                $"&language=en-us&partner={partner}&scenario=manage&operation=selectinstance&allowedPaymentMethods=%5B%22credit_card.visa%22%2C%22credit_card.mc%22%2C%22credit_card.amex%22%2C%22credit_card.discover%22%2C%22ewallet.stored_value%22%2C%22ewallet.paypal%22%2C%22mobile_billing_non_sim%22%5D";

            string listPIResponse = "[{ \"id\": \"FgGmBAAAAAApAACA\", \"accountId\": \"08444683-1a47-4762-9f87-3c5da05d0ee9\", \"paymentMethod\": { \"paymentMethodType\": \"visa\", \"properties\": { \"offlineRecurring\": true, \"userManaged\": true, \"soldToAddressRequired\": true, \"splitPaymentSupported\": true, \"supportedOperations\": [ \"authorize\", \"charge\", \"refund\", \"chargeback\" ], \"taxable\": false, \"providerRemittable\": false }, \"paymentMethodFamily\": \"credit_card\", \"display\": { \"name\": \"Visa\", \"logo\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_visa.png\", \"logos\": [ { \"mimeType\": \"image/png\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_visa.png\" }, { \"mimeType\": \"image/svg+xml\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/v2_logo_visa.svg\" } ] } }, \"status\": \"Active\", \"creationDateTime\": \"2017-05-10T20:39:40.257\", \"lastUpdatedDateTime\": \"2017-05-10T20:39:40.257\", \"details\": { \"exportable\": true, \"accountHolderName\": \"John Doe\", \"address\": { \"address_line1\": \"1 Microsoft Way\", \"city\": \"Redmond\", \"region\": \"wa\", \"postal_code\": \"98052\", \"country\": \"US\" }, \"lastFourDigits\": \"5678\", \"expiryYear\": \"2023\", \"expiryMonth\": \"6\", \"picvRequired\": false, \"balance\": 0 } }, { \"id\": \"FgGmBAAAAAApAACB\", \"accountId\": \"08444683-1a47-4762-9f87-3c5da05d0ee9\", \"paymentMethod\": { \"paymentMethodType\": \"amex\", \"properties\": { \"offlineRecurring\": true, \"userManaged\": true, \"soldToAddressRequired\": true, \"splitPaymentSupported\": true, \"supportedOperations\": [ \"authorize\", \"charge\", \"refund\", \"chargeback\" ], \"taxable\": false, \"providerRemittable\": false }, \"paymentMethodFamily\": \"credit_card\", \"display\": { \"name\": \"Amex\", \"logo\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_amex.png\", \"logos\": [ { \"mimeType\": \"image/png\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_amex.png\" }, { \"mimeType\": \"image/svg+xml\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_amex.svg\" } ] } }, \"status\": \"Active\", \"creationDateTime\": \"2017-05-10T20:39:40.257\", \"lastUpdatedDateTime\": \"2017-05-10T20:39:40.257\", \"details\": { \"exportable\": true, \"accountHolderName\": \"John Doe\", \"address\": { \"address_line1\": \"1 Microsoft Way\", \"city\": \"Redmond\", \"region\": \"wa\", \"postal_code\": \"98052\", \"country\": \"US\" }, \"lastFourDigits\": \"0001\", \"expiryYear\": \"2023\", \"expiryMonth\": \"6\", \"picvRequired\": false, \"balance\": 0 } }, { \"id\": \"FgGmBAAAAAApAACC\", \"accountId\": \"08444683-1a47-4762-9f87-3c5da05d0ee9\", \"paymentMethod\": { \"paymentMethodType\": \"mc\", \"properties\": { \"offlineRecurring\": true, \"userManaged\": true, \"soldToAddressRequired\": true, \"splitPaymentSupported\": true, \"supportedOperations\": [ \"authorize\", \"charge\", \"refund\", \"chargeback\" ], \"taxable\": false, \"providerRemittable\": false }, \"paymentMethodFamily\": \"credit_card\", \"display\": { \"name\": \"Mc\", \"logo\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_mc.png\", \"logos\": [ { \"mimeType\": \"image/png\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_mc.png\" }, { \"mimeType\": \"image/svg+xml\", \"url\": \"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_mc.svg\" } ] } }, \"status\": \"Active\", \"creationDateTime\": \"2017-05-10T20:39:40.257\", \"lastUpdatedDateTime\": \"2017-05-10T20:39:40.257\", \"details\": { \"exportable\": true, \"accountHolderName\": \"John Doe\", \"address\": { \"address_line1\": \"1 Microsoft Way\", \"city\": \"Redmond\", \"region\": \"wa\", \"postal_code\": \"98052\", \"country\": \"US\" }, \"isXboxCoBrandedCard\": true, \"pointsBalanceDetails\": { \"rewardsEnabled\": true, \"rewardsProgramDetail\": { \"conversionRate\": 0.1, \"minRedeemPoints\": 10, \"maxRedeemPoints\": 1000 }, \"rewardsSummary\": { \"pointsBalance\": 12345, \"currencyBalance\": 1234.50, \"currencyCode\": \"USD\" } }, \"lastFourDigits\": \"0002\", \"expiryYear\": \"2023\", \"expiryMonth\": \"6\", \"picvRequired\": false, \"balance\": 0 } }]";
            PXSettings.PimsService.ArrangeResponse(listPIResponse, urlPattern: ".*paymentInstruments.*");

            List<string> flights = new List<string>();

            if (useFlight)
            {
                flights.Add("PXEnableXboxCardUpsellPaymentOptions");
            }

            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);
            Assert.IsNotNull(pidls);

            Assert.AreEqual(pidls[0].GetDisplayHintById("xboxCardUpsellCardImage") != null, shouldShowPointsDetails);
            Assert.AreEqual(pidls[0].GetDisplayHintById("xboxCoBrandedCardPageBackgroundImage") != null, shouldShowPointsDetails);
            Assert.AreEqual(pidls[0].GetDisplayHintById("xboxCardUpsellPaymentOptionsHeading") != null, shouldShowPointsDetails);
            Assert.AreEqual(pidls[0].GetDisplayHintById("xboxCardUpsellPaymentOptionsSubheading") != null, shouldShowPointsDetails);
            Assert.AreEqual(pidls[0].GetDisplayHintById("xboxCardUpsellPaymentOptionsUsername") != null, shouldShowPointsDetails);
            Assert.AreEqual(pidls[0].GetDisplayHintById("xboxCardUpsellPaymentOptionsApplyNowText") != null, shouldShowPointsDetails);
        }

        [DataRow("amcweb", "in", "en-us", true)]
        [DataRow("mseg", "in", "en-us", true)]
        [DataRow("xboxnative", "in", "en-us", true)]
        [DataRow("amcweb", "us", "en-us", true)]
        [DataRow("mseg", "us", "en-us", true)]
        [DataRow("xboxnative", "us", "en-us", true)]
        [DataRow("amcweb", "in", "en-us", false)]
        [DataRow("mseg", "in", "en-us", false)]
        [DataRow("xboxnative", "in", "en-us", false)]
        [DataRow("payin", "in", "en-us", true)]
        [DataRow("setupoffice", "in", "en-us", true)]
        [DataRow("payin", "us", "en-us", true)]
        [DataRow("setupoffice", "us", "en-us", true)]
        [DataRow("payin", "in", "en-us", false)]
        [DataRow("setupoffice", "in", "en-us", false)]
        [DataRow("xboxsettings", "in", "en-us", true)]
        [DataRow("storify", "in", "en-us", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_IndiaTokenizationPurgeMessage(string partner, string country, string language, bool flightPassed)
        {
            string url = $"/v7.0/SelectInstanceTestsAccount/paymentMethodDescriptions?country={country}" +
                $"&language={language}&partner={partner}&scenario=null&operation=selectinstance&allowedPaymentMethods=%5B%22credit_card%22%2C%22virtual.invoice_basic%22%2C%22virtual.invoice_check%22%2C%22virtual.alipay%22%2C%22virtual.unionpay%22%2C%22direct_debit.ach%22%5D";

            // scenario = manage
            if (partner == "xboxsettings")
            {
                url = $"v7.0/Account1/paymentMethodDescriptions?scenario=manage&partner={partner}&operation=SelectInstance&language={language}" +
                    $"&filters=%7B%22chargeThresholds%22%3A%5B0%5D%7D&country={country}&allowedPaymentMethods=%5B%22credit_card%22%2C%22direct_debit%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet%22%2C%22mobile_billing_non_sim%22%2C%22virtual%22%5D";
            }

            List<string> flights = new List<string>();

            if (flightPassed && string.Equals(country, "in"))
            {
                flights.Add("IndiaTokenizationMessage");
            }

            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);
            Assert.IsNotNull(pidls);
            var root = pidls[0]?.DisplayPages[0];
            var displayType = string.Empty;

            List<string> flow1_partners = new List<string>() { "payin", "setupoffice" };
            List<string> xboxNativePartners = new List<string>() { "xboxsettings", "storify" };

            if (flow1_partners.Contains(partner) == true)
            {
                if (string.Equals(country, "in") && flightPassed)
                {
                    var page = root?.Members[0] as TextGroupDisplayHint;
                    var group = page?.Members[0] as TextDisplayHint;
                    displayType = group.HintId;
                    Assert.AreEqual("paymentInstrumentSelectMessage", displayType, "India Tokenization Purge Message not displayed");
                }
                else
                {
                    var page = root?.Members[0] as PropertyDisplayHint;
                    displayType = page.HintId;
                    Assert.AreEqual("paymentInstrumentShowPi", displayType, "India Tokenization Purge Message was displayed-not expected");
                }
            }
            else
            {
                if (string.Equals(country, "in") && flightPassed)
                {
                    if (!string.Equals(partner, "xboxnative", StringComparison.OrdinalIgnoreCase))
                    {
                        if (xboxNativePartners.Contains(partner) == true)
                        {
                            var paymentInstrumentSelectMessageHint = pidls[0].GetDisplayHintById("paymentInstrumentSelectMessage").HintId;
                            Assert.AreEqual("paymentInstrumentSelectMessage", paymentInstrumentSelectMessageHint, "Flighted Tokenization Message not displayed");
                        }
                        else
                        {
                            var page = root?.Members[0] as TextGroupDisplayHint;
                            var group = page?.Members[0] as TextDisplayHint;
                            displayType = group.HintId;
                            Assert.AreEqual("paymentInstrumentSelectMessage", displayType, "Flighted Tokenization Message not displayed");
                        }
                    }
                    else
                    {
                        var page = root?.Members[0] as GroupDisplayHint;
                        var group = page?.Members[1] as TextGroupDisplayHint;
                        displayType = group.HintId;
                        Assert.AreEqual("paymentInstrumentTokenizationTextGroup", displayType, "Flighted Tokenization Message not displayed");
                    }
                }
                else
                {
                    if (!string.Equals(partner, "xboxnative", StringComparison.OrdinalIgnoreCase))
                    {
                        var page = root?.Members[0] as PropertyDisplayHint;
                        displayType = page.HintId;
                        Assert.AreEqual("paymentInstrument", displayType, "Flighted Tokenization Message displayed-not expected");
                    }
                    else
                    {
                        var page = root?.Members[0] as GroupDisplayHint;
                        var group = page?.Members[1] as PropertyDisplayHint;
                        displayType = group.HintId;
                        Assert.AreEqual("paymentInstrument", displayType, "Flighted Tokenization Message displayed-not expected");
                    }
                }
            }
        }

        [DataRow("commercialstores", "virtual", "invoice_check", true, "x-ms-flight", "showAVSSuggestions", true)]
        [DataRow("commercialstores", "virtual", "invoice_check", true, "x-ms-flight", "showAVSSuggestions", false)]
        [DataRow("commercialstores", "virtual", "invoice_check", false, "x-ms-flight", "", false)]
        [DataRow("officesmb", "virtual", "invoice_check", true, "x-ms-flight", "showAVSSuggestions", true)]
        [DataRow("officesmb", "virtual", "invoice_check", true, "x-ms-flight", "showAVSSuggestions", false)]
        [DataRow("officesmb", "virtual", "invoice_check", false, "x-ms-flight", "", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Invoice_AddressValidation_modernValidate(string partner, string family, string type, bool showAVSSuggestions, string headerKey, string allHeaderValue, bool usePidlPage)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family={family}&type={type}";

            PXFlightHandler.AddToEnabledFlights("PXEnableAVSSuggestions");

            if (!usePidlPage)
            {
                PXFlightHandler.AddToEnabledFlights("TradeAVSUsePidlModalInsteadofPidlPage");
            }

            if (string.Equals(partner, "officesmb", StringComparison.CurrentCultureIgnoreCase))
            {
                string pssmockResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}},\"update\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithPartnerHeader(url, headerKey, allHeaderValue, string.Empty);

            // Assert
            Assert.IsNotNull(pidls);
            foreach (PIDLResource pidl in pidls)
            {
                DisplayHint validateThenSuccessWithPayloadButton = pidl.GetDisplayHintById("validateThenSuccessWithPayloadButton") as ButtonDisplayHint;
                Assert.IsNotNull(validateThenSuccessWithPayloadButton);
                Assert.IsNotNull(validateThenSuccessWithPayloadButton.Action);
                Assert.IsNotNull(validateThenSuccessWithPayloadButton.Action.Context);
                if (showAVSSuggestions)
                {
                    Assert.IsNotNull(validateThenSuccessWithPayloadButton.Action.NextAction);
                }

                Assert.AreEqual(validateThenSuccessWithPayloadButton.Action.Context.ToString().Contains("scenario=suggestAddressesTradeAVSUsePidlModal"), !usePidlPage && showAVSSuggestions);
                Assert.AreEqual(validateThenSuccessWithPayloadButton.Action.Context.ToString().Contains("ModernValidate"), showAVSSuggestions);
                AddressTestsUtil.VerifyModernValidationErrorStrings(JsonConvert.SerializeObject(pidl.PidlResourceStrings));
            }
        }

        [DataRow("azure", "us", "azureIbiza", "virtual", "legacy_invoice", "add", true, "x-ms-flight", "showAVSSuggestions", true, "saveButton")]
        [DataRow("azure", "us", "azureIbiza", "virtual", "legacy_invoice", "add", false, "x-ms-flight", "", false, "saveButton")]
        [DataRow("azure", "us", "azureIbiza", "virtual", "legacy_invoice", "update", true, "x-ms-flight", "showAVSSuggestions", true, "saveButton")]
        [DataRow("azure", "us", "azureIbiza", "virtual", "legacy_invoice", "update", false, "x-ms-flight", "", false, "saveButton")]
        [DataRow("commercialstores", "de", "", "direct_debit", "sepa", "add", true, "x-ms-flight", "showAVSSuggestions", true, "saveButton")]
        [DataRow("commercialstores", "de", "", "direct_debit", "sepa", "add", false, "x-ms-flight", "", false, "saveButton")]
        [DataRow("commercialstores", "de", "", "direct_debit", "sepa", "update", true, "x-ms-flight", "showAVSSuggestions", true, "saveButton")]
        [DataRow("commercialstores", "de", "", "direct_debit", "sepa", "update", false, "x-ms-flight", "", false, "saveButton")]
        [DataRow("commercialstores", "us", "", "direct_debit", "ach", "add", true, "x-ms-flight", "showAVSSuggestions", true, "saveButton")]
        [DataRow("commercialstores", "us", "", "direct_debit", "ach", "add", false, "x-ms-flight", "", false, "saveButton")]
        [DataRow("commercialstores", "us", "", "direct_debit", "ach", "update", true, "x-ms-flight", "showAVSSuggestions", true, "saveButton")]
        [DataRow("commercialstores", "us", "", "direct_debit", "ach", "update", false, "x-ms-flight", "", false, "saveButton")]
        [DataRow("officesmb", "de", "", "direct_debit", "sepa", "add", true, "x-ms-flight", "showAVSSuggestions", true, "saveNextButton")]
        [DataRow("officesmb", "de", "", "direct_debit", "sepa", "add", false, "x-ms-flight", "", false, "saveNextButton")]
        [DataRow("officesmb", "de", "", "direct_debit", "sepa", "update", true, "x-ms-flight", "showAVSSuggestions", true, "saveButton")]
        [DataRow("officesmb", "de", "", "direct_debit", "sepa", "update", false, "x-ms-flight", "", false, "saveButton")]
        [DataRow("officesmb", "us", "", "direct_debit", "ach", "add", true, "x-ms-flight", "showAVSSuggestions", true, "saveButton")]
        [DataRow("officesmb", "us", "", "direct_debit", "ach", "add", false, "x-ms-flight", "", false, "saveButton")]
        [DataRow("officesmb", "us", "", "direct_debit", "ach", "update", true, "x-ms-flight", "showAVSSuggestions", true, "saveButton")]
        [DataRow("officesmb", "us", "", "direct_debit", "ach", "update", false, "x-ms-flight", "", false, "saveButton")]
        [DataRow("officesmb", "us", "azureIbiza", "virtual", "legacy_invoice", "add", true, "x-ms-flight", "showAVSSuggestions,", true, "saveButton")]
        [DataRow("officesmb", "us", "azureIbiza", "virtual", "legacy_invoice", "add", false, "x-ms-flight", "", false, "saveButton")]
        [DataRow("officesmb", "us", "azureIbiza", "virtual", "legacy_invoice", "update", true, "x-ms-flight", "showAVSSuggestions,", true, "saveButton")]
        [DataRow("officesmb", "us", "azureIbiza", "virtual", "legacy_invoice", "update", false, "x-ms-flight", "", false, "saveButton")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_LegacyInvoice_DirectDebit_AddressValidation_modernValidate(string partner, string country, string scenario, string family, string type, string operation, bool showAVSSuggestions, string headerKey, string allHeaderValue, bool usePidlPage, string buttonHintId)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&scenario={scenario}&operation={operation}&family={family}&type={type}";

            PXFlightHandler.AddToEnabledFlights("PXEnableAVSSuggestions");

            if (!usePidlPage)
            {
                PXFlightHandler.AddToEnabledFlights("TradeAVSUsePidlModalInsteadofPidlPage");
            }

            if (string.Equals(partner, "officesmb"))
            {
                string pssmockResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}},\"update\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithPartnerHeader(url, headerKey, allHeaderValue, string.Empty);

            // Assert
            Assert.IsNotNull(pidls);
            foreach (PIDLResource pidl in pidls)
            {
                DisplayHint saveButton = pidl.GetDisplayHintById(buttonHintId) as ButtonDisplayHint;
                Assert.IsNotNull(saveButton);
                Assert.IsNotNull(saveButton.Action);
                Assert.IsNotNull(saveButton.Action.Context);
                if (showAVSSuggestions || string.Equals(partner, "officesmb"))
                {
                    Assert.IsNotNull(saveButton.Action.NextAction);
                }

                Assert.AreEqual(!usePidlPage && (showAVSSuggestions || string.Equals(partner, "officesmb")), saveButton.Action.Context.ToString().Contains("scenario=suggestAddressesTradeAVSUsePidlModal"));
                Assert.AreEqual(showAVSSuggestions || string.Equals(partner, "officesmb"), saveButton.Action.Context.ToString().Contains("ModernValidate"));
                AddressTestsUtil.VerifyModernValidationErrorStrings(JsonConvert.SerializeObject(pidl.PidlResourceStrings));
            }
        }

        [DataRow(true, GlobalConstants.Partners.Webblends, 2, "buttonList", "cancelBackGroup", "Choose a way to pay", "group", false)]
        [DataRow(false, GlobalConstants.Partners.Webblends, 2, "buttonList", "cancelGroup", "Pick a payment method", null, false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_Select_PMGrouping(bool shouldEnablePMGrouping, string partner, int memberPosition, string selectType, string groupHintId, string heading, string exceptedElementType, bool enableSubmitBlock)
        {
            string url = $"/v7.0/AccountPMGrouping/paymentMethodDescriptions?country=ch&language=en-us&partner={partner}&operation=select";

            Dictionary<string, string> testHeader = null;

            if (shouldEnablePMGrouping)
            {
                string enablePMGroupingSubpageSubmitBlock = enableSubmitBlock ? ",enablePMGroupingSubpageSubmitBlock" : null;

                testHeader = new Dictionary<string, string>()
                {
                    { "x-ms-flight", $"enablePaymentMethodGrouping{enablePMGroupingSubpageSubmitBlock}" },
                };
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            if (shouldEnablePMGrouping)
            {
                Assert.AreEqual(pidls[0].DisplayPages.Count, 2);
                Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "paymentMethodSelectPMGroupingPage");
                PropertyDisplayHint paymentMethod = pidls[0].DisplayPages[0].Members[1] as PropertyDisplayHint;
                Assert.AreEqual(paymentMethod.SelectType, selectType);
                SelectOptionDescription groupSelectOptionDescription = paymentMethod.PossibleOptions.ElementAt(1).Value;
                Assert.AreEqual(groupSelectOptionDescription.PidlAction.ActionType, "moveToPageIndex");
                SelectOptionDescription creditCardselectOptionDescription = paymentMethod.PossibleOptions.ElementAt(0).Value;
                Assert.AreEqual(creditCardselectOptionDescription.DisplayText, "Credit or debit card");
                Assert.AreEqual("eWallet", paymentMethod.PossibleOptions["ewallet_paypal"].DisplayText, "display name shall be group name even there is only one PM in group");

                HeadingDisplayHint paymentMethodHeading = pidls[0].DisplayPages[0].Members[0] as HeadingDisplayHint;
                Assert.AreEqual(paymentMethodHeading.DisplayContent, heading);

                if (!string.IsNullOrEmpty(groupHintId))
                {
                    GroupDisplayHint groupDisplayHint = pidls[0].DisplayPages[0].Members[memberPosition] as GroupDisplayHint;
                    Assert.AreEqual(groupDisplayHint.HintId, groupHintId);
                }

                Assert.AreEqual(pidls[0].DisplayPages[1].Members[2].DisplayHintType, exceptedElementType);
            }
            else
            {
                Assert.AreEqual(pidls[0].DisplayPages.Count, 1);
                Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "PaymentMethodSelectionPage");

                GroupDisplayHint groupDisplayHint = pidls[0].DisplayPages[0].Members[memberPosition] as GroupDisplayHint;
                PropertyDisplayHint paymentMethod = groupDisplayHint.Members[0] as PropertyDisplayHint;

                paymentMethod = pidls[0].DisplayPages[0].Members[1] as PropertyDisplayHint;

                HeadingDisplayHint paymentMethodHeading = pidls[0].DisplayPages[0].Members[0] as HeadingDisplayHint;
                Assert.AreEqual(paymentMethodHeading.DisplayContent, heading);

                SelectOptionDescription selectOptionDescription = paymentMethod.PossibleOptions.ElementAt(1).Value;

                Assert.IsNull(partner.Equals(GlobalConstants.Partners.Cart, StringComparison.OrdinalIgnoreCase) ? selectOptionDescription.PidlAction : null);
                Assert.AreEqual(paymentMethod.PossibleOptions.Count, 5);
                Assert.AreEqual(groupDisplayHint.HintId, groupHintId);
                Assert.AreEqual(paymentMethod.SelectType, selectType);
            }
        }

        [DataRow(true, GlobalConstants.Partners.Cart, 0, "buttonList", null, "Choose a way to pay", "group", true)]
        [DataRow(true, GlobalConstants.Partners.Cart, 0, "buttonList", null, "Choose a way to pay", "button", false)]
        [DataRow(false, GlobalConstants.Partners.Cart, 0, "dropDown", "paymentMethodButtonGroup", "Select a payment type", null, false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_Select_PMGrouping_Cart(bool shouldEnablePMGrouping, string partner, int memberPosition, string selectType, string groupHintId, string heading, string exceptedElementType, bool enableSubmitBlock)
        {
            string url = $"/v7.0/AccountPMGrouping/paymentMethodDescriptions?country=ch&language=en-us&partner={partner}&operation=select";

            Dictionary<string, string> testHeader = null;

            if (shouldEnablePMGrouping)
            {
                string enablePMGroupingSubpageSubmitBlock = enableSubmitBlock ? ",enablePMGroupingSubpageSubmitBlock" : null;

                testHeader = new Dictionary<string, string>()
                {
                    { "x-ms-flight", $"enablePaymentMethodGrouping{enablePMGroupingSubpageSubmitBlock}" },
                };
            }

            string featureName = "PXEnableTextForDisplayHint";
            PXFlightHandler.AddToEnabledFlights(featureName);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            if (shouldEnablePMGrouping)
            {
                Assert.AreEqual(pidls[0].DisplayPages.Count, 2);
                Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "paymentMethodSelectPMGroupingPage");
                PropertyDisplayHint paymentMethod = pidls[0].DisplayPages[0].Members[1] as PropertyDisplayHint;
                Assert.AreEqual(paymentMethod.SelectType, selectType);
                SelectOptionDescription groupSelectOptionDescription = paymentMethod.PossibleOptions.ElementAt(1).Value;
                Assert.AreEqual(groupSelectOptionDescription.PidlAction.ActionType, "moveToPageIndex");
                SelectOptionDescription creditCardselectOptionDescription = paymentMethod.PossibleOptions.ElementAt(0).Value;
                Assert.AreEqual(creditCardselectOptionDescription.DisplayText, "Credit or debit card");
                Assert.AreEqual("eWallet", paymentMethod.PossibleOptions["ewallet_paypal"].DisplayText, "display name shall be group name even there is only one PM in group");

                TextDisplayHint paymentMethodHeading = pidls[0].DisplayPages[0].Members[0] as TextDisplayHint;
                Assert.AreEqual(paymentMethodHeading.DisplayContent, heading);

                if (!string.IsNullOrEmpty(groupHintId))
                {
                    GroupDisplayHint groupDisplayHint = pidls[0].DisplayPages[0].Members[memberPosition] as GroupDisplayHint;
                    Assert.AreEqual(groupDisplayHint.HintId, groupHintId);
                }

                Assert.AreEqual(pidls[0].DisplayPages[1].Members[2].DisplayHintType, exceptedElementType);
            }
            else
            {
                Assert.AreEqual(pidls[0].DisplayPages.Count, 1);
                Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "PaymentMethodSelectionPage");

                GroupDisplayHint groupDisplayHint = pidls[0].DisplayPages[0].Members[memberPosition] as GroupDisplayHint;
                PropertyDisplayHint paymentMethod = groupDisplayHint.Members[0] as PropertyDisplayHint;

                Assert.AreEqual(paymentMethod.DisplayName, heading);

                SelectOptionDescription selectOptionDescription = paymentMethod.PossibleOptions.ElementAt(1).Value;

                Assert.IsNull(partner.Equals(GlobalConstants.Partners.Cart, StringComparison.OrdinalIgnoreCase) ? selectOptionDescription.PidlAction : null);
                Assert.AreEqual(paymentMethod.PossibleOptions.Count, 5);
                Assert.AreEqual(groupDisplayHint.HintId, groupHintId);
                Assert.AreEqual(paymentMethod.SelectType, selectType);
            }
        }

        // defaultPaymentMethod is passed and available in possibleOptions. The defaultPaymentMethod is expected to be first option
        [DataRow("oxowebdirect", "ewallet.paypal", true, false, "buttonList")]
        [DataRow("oxowebdirect", "ewallet.venmo", true, false, "buttonList")]
        [DataRow("oxowebdirect", "mobile_billing_non_sim.spt-us-nonsim", true, false, "buttonList")]

        // defaultPaymentMethod is passed but enableDefaultPaymentMethod is false. No change in the order of options
        [DataRow("oxowebdirect", "ewallet.paypal", false, false, "buttonList")]

        // defaultPaymentMethod is not available in possible options. No change in the order of options
        [DataRow("oxowebdirect", "a.b", true, false, "buttonList")]

        // defaultPaymentMethod is same as first option. No change in the order of options
        [DataRow("oxowebdirect", "credit_card.amex_discover_mc_visa", true, false, "buttonList")]

        // collapsed PM is passed as default payment method. It should appear as the first option
        [DataRow("oxowebdirect", "credit_card", true, false, "buttonList")]
        [DataRow("oxowebdirect", "mobile_billing_non_sim", true, false, "buttonList")]

        // Payment method family other than NSM and Credit card is passed as default payment method with no payment type. No change in the order of options
        [DataRow("oxowebdirect", "ewallet", true, false, "buttonList")]

        // No defaultPaymentMethod is passed. No change in the order of options
        [DataRow("oxowebdirect", null, true, false, "buttonList")]

        // defaultPaymentMethod doesn't have any effect when enabled PaymentMethodGrouping. No change in the order of options
        [DataRow("oxowebdirect", "ewallet.paypal", true, true, "buttonList")]
        [DataTestMethod]
        public async Task GetPaymentMethod_Select_DefaultPaymentMethod(string partner, string defaultPaymentMethod, bool enableDefaultPaymentMethod, bool shouldEnablePMGrouping, string selectType)
        {
            string url = $"/v7.0/AccountPMGrouping/paymentMethodDescriptions?country=us&language=en-us&partner={partner}&operation=select&defaultPaymentMethod={defaultPaymentMethod}";
            string flights = "PXEnableVenmo,PxEnableSelectPMAddPIVenmo";

            if (shouldEnablePMGrouping)
            {
                flights += ",enablePaymentMethodGrouping";
            }

            if (enableDefaultPaymentMethod)
            {
                flights += ",PXEnableDefaultPaymentMethod";
            }

            Dictionary<string, string> testHeader = new Dictionary<string, string>
            {
                { "x-ms-flight", flights }
            };

            PXFlightHandler.AddToEnabledFlights(flights);

            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            HeadingDisplayHint paymentMethodSelectHeading = pidls[0].GetDisplayHintById("paymentMethodSelectHeading") as HeadingDisplayHint;
            PropertyDisplayHint paymentMethodProperty = pidls[0].GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
            var possibleOptions = paymentMethodProperty.PossibleOptions;
            var possibleValues = paymentMethodProperty.PossibleValues;
            var firstOption = possibleOptions.FirstOrDefault();
            var firstValue = possibleValues.FirstOrDefault();
            var secondOption = possibleOptions.Skip(1).FirstOrDefault();
            var secondValue = possibleValues.Skip(1).FirstOrDefault();

            Assert.AreEqual(paymentMethodProperty.SelectType, selectType);
            Assert.AreEqual(paymentMethodSelectHeading.DisplayTags["accessibilityName"], "Pick a payment method");
            Assert.IsTrue(paymentMethodProperty.IsSelectFirstItem != true);

            var firstOptionContext = JsonConvert.DeserializeObject<Dictionary<string, string>>(firstOption.Value.PidlAction.Context.ToString());
            var secondOptionContext = JsonConvert.DeserializeObject<Dictionary<string, string>>(secondOption.Value.PidlAction.Context.ToString());
            var contextIdFirst = firstOptionContext["id"];
            var contextIdSecond = secondOptionContext["id"];
            string creditCardOptionContextId = "credit_card.amex,discover,mc,visa";

            if (shouldEnablePMGrouping || !enableDefaultPaymentMethod || string.IsNullOrEmpty(defaultPaymentMethod) || defaultPaymentMethod == "a.b" || defaultPaymentMethod.StartsWith("credit_card") == true || defaultPaymentMethod == "ewallet")
            {
                Assert.AreEqual(contextIdFirst, creditCardOptionContextId);
            }
            else
            {
                Assert.IsTrue(contextIdFirst == defaultPaymentMethod || contextIdFirst.StartsWith(defaultPaymentMethod));
                Assert.AreEqual(contextIdSecond, creditCardOptionContextId);
            }

            // Just to make sure the first and second items in possibleOptions and possibleValues are related to same payment methods
            Assert.AreEqual(contextIdFirst.Replace(".", "_").Replace(",", "_"), firstValue.Key);
            Assert.AreEqual(contextIdSecond.Replace(".", "_").Replace(",", "_"), secondValue.Key);
        }

        // DefaultPaymentMethod has no affect when paymentMethodGrouping feature is enabled.
        [DataRow("windowsstore", "ewallet.paypal")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SelectPM_DefaultPaymentMethodNoEffectPSS(string partner, string defaultPaymentMethod)
        {
            PXSettings.PartnerSettingsService.ResetToDefaults();
            string windowsStorePSS = "{\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"setDefaultPaymentMethod\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":null},\"paymentMethodGrouping\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"setGroupedSelectOptionTextBeforeLogo\":true,\"removeDefaultStyleHints\":true}]},\"selectPMButtonListStyleForWindows\":{\"applicableMarkets\":[]},\"customizeDisplayTag\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"addAccessibilityNameExpressionToNegativeValue\":true}]}}},\"add\":{\"template\":\"twopage\",\"resources\":{\"address\":{\"px_v3_billing\": {\"template\":\"defaulttemplate\"},\"billing\": {\"template\":\"defaulttemplate\"}},\"paymentMethod\":{\"ewallet.stored_value\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\"}}},\"features\":{\"addCCTwoPageForWindows\":{\"applicableMarkets\":[]},\"addPayPalForWindows\":{\"applicableMarkets\":[]},\"addVenmoForWindows\":{\"applicableMarkets\":[]},\"addBillingAddressForWindows\":{\"applicableMarkets\":[]},\"redeemGiftCard\":{\"applicableMarkets\":[]},\"showRedirectURLInIframe\":{\"applicableMarkets\":[]},\"useV3AddressPIDL\":{\"applicableMarkets\":[]},\"shortURLPaypal\":{\"applicableMarkets\":[]},\"shortURLTextPaypal\":{\"applicableMarkets\":[]},\"shortURLVenmo\":{\"applicableMarkets\":[]},\"shortURLTextVenmo\":{\"applicableMarkets\":[]},\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeEwalletYesButtons\":true,\"removeEwalletBackButtons\":true,\"removeSpaceInPrivacyTextGroup\":true}]},\"enableShortURL\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"shortUrlPayPalText\":true,\"shortUrlVenmoText\":true,\"removeAnotherDeviceTextFromShortUrlInstruction\":true,\"displayShortUrlAsHyperlink\":true}]}},\"redirectionPattern\":\"QRCode\"}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(windowsStorePSS);

            Dictionary<string, string> requestHeaders = new Dictionary<string, string>()
            {
                { "x-ms-flight", "enableDefaultPaymentMethod,vnext,PxEnableVenmo,PxEnableSelectPMAddPIVenmo,PXUsePartnerSettingsService" }
            };

            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Select&language=en-US&filters=%7B%22chargeThresholds%22%3A%5B0%5D%7D&country=US&allowedPaymentMethods=%5B%22credit_card%22%2C%22ewallet.paypal%22%2C%22ewallet.kakaopay%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet.venmo%22%5D&defaultPaymentMethod={defaultPaymentMethod}";

            await GetRequest(
                url,
                requestHeaders,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);

                    Assert.IsTrue(responseBody.Contains("paymentMethodSelectPMGroupingPage"));
                    Assert.IsTrue(responseBody.Contains("paymentMethodSubGroupPage_ewallet_ewallet"));

                    List<PIDLResource> pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource pidl in pidls)
                    {
                        var paymentMethod = pidl.GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
                        Assert.IsTrue(paymentMethod.PossibleOptions.FirstOrDefault().Key == "credit_card_amex_discover_mc_visa");
                    }
                });
        }

        // The flight enableDefaultPaymentMethod shouldn't show any affect when selectType is dropDown or enablePaymentMethodGrouping is enabled.
        [DataRow("cart", "ewallet.paypal", true, false, "dropDown")]
        [DataRow("cart", "ewallet.paypal", false, false, "dropDown")]
        [DataRow("cart", null, true, false, "dropDown")]
        [DataRow("cart", "ewallet.paypal", true, true, "buttonList")]
        [DataTestMethod]
        public async Task GetPaymentMethod_Select_DefaultPaymentMethodFeatureNoEffect(string partner, string defaultPaymentMethod, bool enableDefaultPaymentMethod, bool shouldEnablePMGrouping, string selectType)
        {
            string url = $"/v7.0/AccountPMGrouping/paymentMethodDescriptions?country=us&language=en-us&partner={partner}&operation=select&defaultPaymentMethod={defaultPaymentMethod}";
            string flights = "PXEnableVenmo,PxEnableSelectPMAddPIVenmo";

            if (shouldEnablePMGrouping)
            {
                flights += ",enablePaymentMethodGrouping";
            }

            if (enableDefaultPaymentMethod)
            {
                flights += ",PXEnableDefaultPaymentMethod";
            }

            Dictionary<string, string> testHeader = new Dictionary<string, string>
            {
                { "x-ms-flight", flights }
            };

            PXFlightHandler.AddToEnabledFlights(flights);

            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            HeadingDisplayHint paymentMethodSelectHeading = pidls[0].GetDisplayHintById("paymentMethodSelectHeading") as HeadingDisplayHint;
            PropertyDisplayHint paymentMethodProperty = pidls[0].GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
            var possibleOptions = paymentMethodProperty.PossibleOptions;
            var possibleValues = paymentMethodProperty.PossibleValues;
            var firstOption = possibleOptions.FirstOrDefault();
            var firstValue = possibleValues.FirstOrDefault();
            var secondOption = possibleOptions.Skip(1).FirstOrDefault();
            var secondValue = possibleValues.Skip(1).FirstOrDefault();

            Assert.AreEqual(paymentMethodProperty.SelectType, selectType);

            if (selectType == "buttonList")
            {
                Assert.AreEqual(paymentMethodSelectHeading.DisplayContent, "Choose a way to pay");
                var firstOptionContext = JsonConvert.DeserializeObject<Dictionary<string, string>>(firstOption.Value.PidlAction.Context.ToString());
                var secondOptionContext = JsonConvert.DeserializeObject<Dictionary<string, string>>(secondOption.Value.PidlAction.Context.ToString());
                var contextIdFirst = firstOptionContext["id"];
                var contextIdSecond = secondOptionContext["id"];
                string creditCardOptionContextId = "credit_card_amex_discover_mc_visa";

                Assert.AreEqual(contextIdFirst, creditCardOptionContextId);
                Assert.AreEqual(contextIdFirst, firstValue.Key);
                Assert.AreEqual(contextIdSecond, secondValue.Key);
            }
            else if (defaultPaymentMethod == "ewallet.paypal")
            {
                Assert.IsTrue(paymentMethodProperty.IsSelectFirstItem == true);
                Assert.IsTrue(firstOption.Value.DisplayText == "PayPal");
                Assert.IsTrue(secondOption.Value.DisplayText == "Credit card or debit card");
            }
            else
            {
                Assert.IsTrue(firstOption.Value.DisplayText == "Credit card or debit card");
            }
        }

        [TestMethod]
        public async Task GetPaymentMethod_Select_PMGrouping_UsingPartnerSettingsService()
        {
            string url = $"/v7.0/AccountPMGrouping/paymentMethodDescriptions?country=ch&language=en-us&partner=testpartner123&operation=select";
            string expectedPSSResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideFirstAndLastNameForCompletePrerequisites\":true}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"}}";

            Dictionary<string, string> testHeader = new Dictionary<string, string>()
                {
                    { "x-ms-flight", "enablePaymentMethodGrouping,PXUsePartnerSettingsService,partnerSettingsVersion_1.0.1" },
                };

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            PXSettings.PartnerSettingsService.PreProcess = (partnerSettingsRequest) =>
            {
                Uri requestUri = partnerSettingsRequest.RequestUri;
                Assert.IsTrue(requestUri.PathAndQuery.Contains("/partnersettings/"));
                Assert.IsTrue(requestUri.Query.Contains("settingsType=PaymentExperience"));
                Assert.IsTrue(requestUri.PathAndQuery.Contains("testpartner123"));
                Assert.IsTrue(requestUri.PathAndQuery.Contains("version=1.0.1"));
                Assert.IsNull(partnerSettingsRequest.Content);
            };

            PXSettings.PartnerSettingsService.PostProcess = async (partnerSettingsResponse) =>
            {
                if (partnerSettingsResponse != null)
                {
                    Assert.AreEqual(partnerSettingsResponse.StatusCode, HttpStatusCode.OK);
                    Assert.IsNotNull(partnerSettingsResponse.Content);
                    string responseContent = await partnerSettingsResponse.Content.ReadAsStringAsync();
                    Assert.AreEqual(responseContent, expectedPSSResponse);
                }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            Assert.AreEqual(pidls[0].DisplayPages.Count, 2);
            Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "paymentMethodSelectPMGroupingPage");
            PropertyDisplayHint paymentMethod = pidls[0].DisplayPages[0].Members[1] as PropertyDisplayHint;
            Assert.AreEqual(paymentMethod.SelectType, "buttonList");
            SelectOptionDescription groupSelectOptionDescription = paymentMethod.PossibleOptions.ElementAt(1).Value;
            Assert.AreEqual(groupSelectOptionDescription.PidlAction.ActionType, "moveToPageIndex");
            SelectOptionDescription creditCardselectOptionDescription = paymentMethod.PossibleOptions.ElementAt(0).Value;
            Assert.AreEqual(creditCardselectOptionDescription.DisplayText, "Credit or debit card");
            Assert.AreEqual("eWallet", paymentMethod.PossibleOptions["ewallet_paypal"].DisplayText, "display name shall be group name even there is only one PM in group");
            Assert.IsTrue(pidls[0].DisplayPages[1].StyleHints.SequenceEqual(new List<string> { "height-fill" }));
            GroupDisplayHint cancelBackGroup = pidls[0].DisplayPages[1].Members[2] as GroupDisplayHint;
            Assert.IsTrue(cancelBackGroup.StyleHints.SequenceEqual(new List<string>() { "padding-vertical-medium", "gap-medium", "width-fill" }));

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow(true, "us", "storify", true, 6, "1.22.3")] // 2 pages for US market - Initial page + ewallet breakdown page
        [DataRow(true, "us", "storify", true, 6, "1.22.3-alpha.15_reactview")]
        [DataRow(true, "us", "storify", false, 5, "1.22.3-alpha.15_reactview")] // Venmo flight is off - pm shouldn't be counted
        [DataRow(false, "us", "storify", false, null, "1.22.2")]
        [DataRow(false, "us", "storify", false, null, "1.22.1-alpha.15_reactview")]
        [DataRow(true, "us", "xboxsettings", true, 6, "1.22.3")]
        [DataRow(false, "us", "xboxsettings", false, null, "1.22.2")]
        [DataRow(false, "us", "storify", false, null, "")]
        [DataRow(false, "us", "xboxsettings", false, null)]
        [DataRow(false, "ca", "storify", false, null, "1.22.3")] // 1 page for CA market - no ewallet breakdown page
        [DataRow(false, "ca", "xboxsettings", false, null, "1.22.3")]
        [DataRow(true, "us", "storify", true, 6, "1.22.3", true)] // 2 pages for US market - Initial page + ewallet breakdown page
        [DataRow(true, "us", "storify", true, 6, "1.22.3-alpha.15_reactview", true)]
        [DataRow(true, "us", "storify", false, 5, "1.22.3-alpha.15_reactview", true)] // Venmo flight is off - pm shouldn't be counted
        [DataRow(true, "us", "xboxsettings", true, 6, "1.22.3", true)]
        [DataTestMethod]
        public async Task GetPaymentMethod_Select_PMXboxGrouping(bool shouldEnableXboxPaymentMethodGrouping, string country, string partner, bool showVenmoPM, int totalNumberOfPms, string pidlSdkVersion = null, bool usePartnerSettings = false)
        {
            string url = $"/v7.0/AccountPMGrouping/paymentMethodDescriptions?country={country}&language=en-us&partner={partner}&operation=select";

            var testHeader = new Dictionary<string, string>()
                {
                    { "x-ms-pidlsdk-version", pidlSdkVersion },
                };

            PXFlightHandler.AddToEnabledFlights("enablePaymentMethodGrouping");

            if (showVenmoPM)
            {
                PXFlightHandler.AddToEnabledFlights("PxEnableVenmo");
                PXFlightHandler.AddToEnabledFlights("PxEnableSelectPMAddPIVenmo");
            }

            if (usePartnerSettings)
            {
                testHeader.Add("x-ms-flight", "PXUsePartnerSettingsService");
                var pssResponse = "{\"default\":{\"template\":\"xboxnative\"}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(pssResponse);

                PXSettings.PartnerSettingsService.PostProcess = async (partnerSettingsResponse) =>
                {
                    if (partnerSettingsResponse != null)
                    {
                        Assert.AreEqual(partnerSettingsResponse.StatusCode, HttpStatusCode.OK);
                        Assert.IsNotNull(partnerSettingsResponse.Content);
                        string responseContent = await partnerSettingsResponse.Content.ReadAsStringAsync();
                        Assert.AreEqual(responseContent, pssResponse);
                    }
                };
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            if (shouldEnableXboxPaymentMethodGrouping)
            {
                Assert.AreEqual(pidls[0].DisplayPages.Count, 2);
                PropertyDisplayHint paymentMethod = pidls[0].GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
                Assert.AreEqual(paymentMethod.SelectType, "buttonList");
                Assert.AreEqual(paymentMethod.PossibleOptions.Count, totalNumberOfPms); // Update when change is made to PaymentMethodsByContry.json
                SelectOptionDescription groupSelectOptionDescription = paymentMethod.PossibleOptions.ElementAt(2).Value;
                Assert.AreEqual(groupSelectOptionDescription.PidlAction.ActionType, "moveToPageIndex");
                SelectOptionDescription creditCardSelectOptionDescription = paymentMethod.PossibleOptions.ElementAt(0).Value;
                Assert.AreEqual(creditCardSelectOptionDescription.PidlAction.ActionType, "success");
                Assert.AreEqual(creditCardSelectOptionDescription.DisplayText, "Credit or debit card");
                SelectOptionDescription nsmselectOptionDescription = paymentMethod.PossibleOptions.ElementAt(3).Value;
                Assert.AreEqual(nsmselectOptionDescription.PidlAction.ActionType, "success");
                Assert.AreEqual(nsmselectOptionDescription.DisplayText, "Mobile phone");
                PropertyDescription propertyDescription = pidls[0].DataDescription["displayId"] as PropertyDescription;
                Assert.IsTrue((bool)propertyDescription.IsOptional);
            }
            else
            {
                Assert.AreEqual(pidls[0].DisplayPages.Count, 1);
                Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "PaymentMethodSelectionPage");
                PropertyDisplayHint paymentMethod = pidls[0].GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
                Assert.AreEqual(paymentMethod.SelectType, "buttonList");
                SelectOptionDescription selectOptionDescription = paymentMethod.PossibleOptions.ElementAt(1).Value;
                Assert.AreEqual(selectOptionDescription.PidlAction.ActionType, "success");
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        /// <summary>
        /// This CIT is used to verify that the dataSource href contains classicProduct and billableAccountId for the select or update operation.
        /// </summary>
        /// <param name="partner">Specifies the partner.</param>
        /// <param name="operations">Sets the operations.</param>
        /// <returns></returns>
        [DataRow(Constants.PartnerNames.Azure, Constants.OperationTypes.Update)]
        [DataRow(Constants.PartnerNames.SetupOffice, Constants.OperationTypes.Update)]
        [DataRow(GlobalConstants.Partners.OfficeSMB, Constants.OperationTypes.Update)]
        [DataRow(Constants.PartnerNames.Azure, Constants.OperationTypes.SelectInstance)]
        [DataRow(Constants.PartnerNames.SetupOffice, Constants.OperationTypes.SelectInstance)]
        [DataRow(GlobalConstants.Partners.OfficeSMB, Constants.OperationTypes.SelectInstance)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_useClassicProductBillableAccountForSelectAndUpdate(string partner, string operations)
        {
            // Arrange
            string requestUrl, saveButtonHintId = null, hrefWithOrWithoutClassicProductAndBilliableAccountId = null;

            if (string.Equals(operations, Constants.OperationTypes.Update))
            {
                saveButtonHintId = string.Equals(partner, Constants.PartnerNames.Azure, StringComparison.OrdinalIgnoreCase) ? "saveNextButton" : "saveButton";
                requestUrl = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&family=credit_card&type=amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb&operation={operations}&country=us&language=en-US&classicProduct=azureClassic&billableAccountId=dummyBillableAccountId";
            }
            else
            {
                requestUrl = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation={operations}&country=us&language=en-US&classicProduct=azureClassic&billableAccountId=dummyBillableAccountId&allowedPaymentMethods=%5B%22credit_card.visa%22%2C%22credit_card.mc%22%2C%22credit_card.amex%22%2C%22credit_card.discover%22%2C%22credit_card.jcb%22%5D";
            }

            if (string.Equals(partner, GlobalConstants.Partners.OfficeSMB))
            {
                string features = string.Equals(operations, Constants.OperationTypes.SelectInstance)
                    ? "\"useClientSidePrefill\":{\"applicableMarkets\":[]}" : string.Empty;

                string pssTemplatePartner = string.Equals(operations, Constants.OperationTypes.Update) ? "defaulttemplate" : "listpidropdown";
                string expectedPSSResponse = "{\"" + operations + "\":{\"template\":\"" + pssTemplatePartner + "\",\"features\":{" + features + "}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(requestUrl);

            // Assert
            Assert.IsNotNull(pidls, "Pidls expected to not be null");

            foreach (var pidl in pidls)
            {
                if (string.Equals(operations, Constants.OperationTypes.SelectInstance, StringComparison.OrdinalIgnoreCase))
                {
                    hrefWithOrWithoutClassicProductAndBilliableAccountId = pidl.DataSources.Values.FirstOrDefault().Href.ToString();
                }
                else
                {
                    var saveButtonDisplayHint = pidl.GetDisplayHintById(saveButtonHintId) as ButtonDisplayHint;

                    Assert.IsNotNull(saveButtonDisplayHint, "Save button hint is expected not to be null");

                    var actionContext = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(saveButtonDisplayHint?.Action?.Context));
                    hrefWithOrWithoutClassicProductAndBilliableAccountId = actionContext?.Href;
                }

                Assert.IsTrue(hrefWithOrWithoutClassicProductAndBilliableAccountId?.Contains("&classicProduct=azureClassic&billableAccountId=dummyBillableAccountId"));

                PXSettings.PartnerSettingsService.ResetToDefaults();
            }
        }

        [DataRow("xboxsettings", true, true)]
        [DataRow("xboxsettings", false, false)]
        [DataRow("storify", true, false)]
        [DataRow("storify", false, false)]
        [DataTestMethod]
        public async Task XboxNative_GetPaymentMethod_XboxCardUpsell(string partner, bool useFlight, bool shouldShowUpsell)
        {
            List<string> flights = new List<string>();
            if (useFlight)
            {
                flights.Add("PXEnableXboxCardUpsellPaymentOptions");
            }

            string url = $"/v7.0/Account1/paymentMethodDescriptions?partner={partner}&operation=Select&language=en-US&country=US&allowedPaymentMethods=%5B%22credit_card%22%2C%22ewallet.paypal%22%2C%22ewallet.alipay_billing_agreement%22%2C%22mobile_billing_non_sim%22%2C%22ewallet.venmo%22%5D";

            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            PropertyDisplayHint paymentMethod = pidls[0].GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
            Assert.AreEqual(paymentMethod.SelectType, "buttonList");
            SelectOptionDescription xboxcardAppGroupSelectOptionDescription = null;
            paymentMethod.PossibleOptions.TryGetValue("xboxCardApp", out xboxcardAppGroupSelectOptionDescription);
            Assert.AreEqual(xboxcardAppGroupSelectOptionDescription != null, shouldShowUpsell);
        }

        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover", false, false, "storify", "us")]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover", false, true, "storify", "us")]
        [DataRow("mobile_billing_non_sim", "", false, true, "storify", "us")]
        [DataRow("mobile_billing_non_sim", "", false, false, "storify", "us")]
        [DataRow("online_bank_transfer", "paysafecard", true, true, "storify", "us")]
        [DataRow("online_bank_transfer", "paysafecard", true, false, "storify", "us")]
        [DataTestMethod]
        public async Task XboxNative_GetPaymentMethod_GlobalPI(string family, string type, bool isGlobalPI, bool completePrerequisites, string partner, string country)
        {
            List<string> flights = new List<string>() { "enableGlobalPiInAddResource" };

            string url = string.Format(
                        "/v7.0/Account1/paymentMethodDescriptions?type={0}&partner={1}&operation=Add&language=en-US&family={2}&country={3}",
                        type,
                        partner,
                        family,
                        country);

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            // For global PIs/PMs (e.g. paysafecard, sofort), as add PI is not needed, PX will return a restAction clientAction to PIDLSDK to get the PI details through paymentInstrumentsEx endpoint, and PIDLSDK will return PI details in the success event.
            if (isGlobalPI)
            {
                Assert.AreEqual(pidls[0].ClientAction.ActionType.ToString(), "RestAction", "RestAction to get PI should be returned for globalPI");
                RestActionContext context = JsonConvert.DeserializeObject<RestActionContext>(JsonConvert.SerializeObject(pidls[0].ClientAction.Context));

                Assert.AreEqual(context.ShouldHandleSuccess, true, "PIDLSDK should invoke success event for the response from restAction.");
                Assert.AreEqual(context.Href, "https://{pifd-endpoint}/users/{userId}/paymentInstrumentsEx/384090d0-3854-424a-be16-09e79d2e07d1?country=" + country + "&language=en-US&partner=" + partner);
                Assert.AreEqual(context.Method, "GET");
            }
            else
            {
                if (completePrerequisites)
                {
                    Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "ProfileDetailsPage", "For nonGlobalPIs like credit cards, Add PI form should be returned. if ProfileDetailsPage is true, ProfileDetailsPage should be the first pidl");
                }
                else
                {
                    Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "AccountDetailsPage", "For nonGlobalPIs like credit cards, Add PI form should be returned");
                }
            }
        }

        [DataRow("online_bank_transfer", "paysafecard", true, true, "cart", "ch")]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", false, true, "cart", "ch")]
        [DataRow("credit_card", "", false, true, "cart", "ch")]
        [DataRow("credit_card", "visa", false, true, "cart", "ch")]
        [DataRow("online_bank_transfer", "paysafecard", true, false, "cart", "ch")]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", false, false, "cart", "ch")]
        [DataRow("credit_card", "", false, false, "cart", "ch")]
        [DataRow("credit_card", "visa", false, false, "cart", "ch")]
        [DataRow("online_bank_transfer", "paysafecard", true, false, GlobalConstants.Partners.Webblends, "us")]
        [DataRow("online_bank_transfer", "paysafecard", true, false, "windowsstore", "us")]
        [DataRow("online_bank_transfer", "paysafecard", true, true, "windowsstore", "us")]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", false, true, "windowsstore", "us")]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", false, false, "windowsstore", "us")]
        [DataTestMethod]
        public async Task GetPaymentMethod_GlobalPI(string family, string type, bool isGlobalPI, bool completePrerequisites, string partner, string country)
        {
            string url = $"/v7.0/Account1/paymentMethodDescriptions?operation=Add&language=en-US";
            if (!string.IsNullOrEmpty(partner))
            {
                url += "&partner=" + partner;
            }

            if (!string.IsNullOrEmpty(country))
            {
                url += "&country=" + country;
            }

            if (!string.IsNullOrEmpty(family))
            {
                url += "&family=" + family;
            }

            if (!string.IsNullOrEmpty(type))
            {
                url += "&type=" + type;
            }

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            Dictionary<string, string> testHeader = null;

            testHeader = new Dictionary<string, string>()
                {
                    { "x-ms-flight", "enableGlobalPiInAddResource" },
                };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            // For global PIs/PMs (e.g. paysafecard, sofort), as add PI is not needed, PX will return a restAction clientAction to PIDLSDK to get the PI details through paymentInstrumentsEx endpoint, and PIDLSDK will return PI details in the success event.
            if (isGlobalPI)
            {
                Assert.AreEqual(pidls[0].ClientAction.ActionType.ToString(), "RestAction", "RestAction to get PI should be returned for globalPI");
                RestActionContext context = JsonConvert.DeserializeObject<RestActionContext>(JsonConvert.SerializeObject(pidls[0].ClientAction.Context));

                Assert.AreEqual(context.ShouldHandleSuccess, true, "PIDLSDK should invoke success event for the response from restAction.");
                Assert.AreEqual(context.Href, "https://{pifd-endpoint}/users/{userId}/paymentInstrumentsEx/384090d0-3854-424a-be16-09e79d2e07d1?country=" + country + "&language=en-US&partner=" + partner);
                Assert.AreEqual(context.Method, "GET");
            }
            else
            {
                if (completePrerequisites)
                {
                    Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "ProfileDetailsPage", "For nonGlobalPIs like credit cards, Add PI form should be returned. if ProfileDetailsPage is true, ProfileDetailsPage should be the first pidl");
                }
                else
                {
                    Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "AccountDetailsPage", "For nonGlobalPIs like credit cards, Add PI form should be returned");
                }
            }
        }

        [DataRow("online_bank_transfer", "paysafecard", true, false, "windowsstore", "us")]
        [DataRow("online_bank_transfer", "paysafecard", true, true, "windowsstore", "us")]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", false, true, "windowsstore", "us")]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", false, false, "windowsstore", "us")]
        [DataTestMethod]
        public async Task GetPaymentMethod_GlobalPI_ViaFeature(string family, string type, bool isGlobalPI, bool completePrerequisites, string partner, string country)
        {
            string url = $"/v7.0/Account1/paymentMethodDescriptions?operation=Add&language=en-US";
            if (!string.IsNullOrEmpty(partner))
            {
                url += "&partner=" + partner;
            }

            if (!string.IsNullOrEmpty(country))
            {
                url += "&country=" + country;
            }

            if (!string.IsNullOrEmpty(family))
            {
                url += "&family=" + family;
            }

            if (!string.IsNullOrEmpty(type))
            {
                url += "&type=" + type;
            }

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            Dictionary<string, string> testHeader = null;

            testHeader = new Dictionary<string, string>()
            {
                { "x-ms-flight", "PXUsePartnerSettingsService" }
            };

            PXSettings.PartnerSettingsService.ResetToDefaults();
            string partnerSettingResponse = "{\"add\":{\"template\":\"twopage\",\"features\":{\"enableGlobalPiInAddResource\":{\"applicableMarkets\":[]}, \"preventAddNewPaymentMethodDefaultSelection\":{\"applicableMarkets\":[]}}}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            // For global PIs/PMs (e.g. paysafecard, sofort), as add PI is not needed, PX will return a restAction clientAction to PIDLSDK to get the PI details through paymentInstrumentsEx endpoint, and PIDLSDK will return PI details in the success event.
            if (isGlobalPI)
            {
                Assert.AreEqual(pidls[0].ClientAction.ActionType.ToString(), "RestAction", "RestAction to get PI should be returned for globalPI");
                RestActionContext context = JsonConvert.DeserializeObject<RestActionContext>(JsonConvert.SerializeObject(pidls[0].ClientAction.Context));

                Assert.AreEqual(context.ShouldHandleSuccess, true, "PIDLSDK should invoke success event for the response from restAction.");
                Assert.AreEqual(context.Href, "https://{pifd-endpoint}/users/{userId}/paymentInstrumentsEx/384090d0-3854-424a-be16-09e79d2e07d1?country=" + country + "&language=en-US&partner=" + partner);
                Assert.AreEqual(context.Method, "GET");
            }
            else
            {
                if (completePrerequisites)
                {
                    Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "ProfileDetailsPage", "For nonGlobalPIs like credit cards, Add PI form should be returned. if ProfileDetailsPage is true, ProfileDetailsPage should be the first pidl");
                }
                else
                {
                    Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "AccountDetailsPage", "For nonGlobalPIs like credit cards, Add PI form should be returned");
                }
            }
        }

        /// <summary>
        /// This Test is used to validate the credit card form for Hipercard, Verve, and Elo.
        /// And also verifying the logo hintId based on their respective credit card types.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        [DataRow("officesmb", "hipercard")]
        [DataRow("officesmb", "elo")]
        [DataRow("officesmb", "verve")]
        [DataTestMethod]
        public async Task GetPaymentMethod_CreditCardHiperEloVerve_Validation(string partner, string type)
        {
            // Arrange
            string country = type.Contains("verve") ? "ng" : "br";
            List<string> operations = new List<string> { "add", "update" };
            string creditCardLogo = type.Contains("hipercard") ? "creditCardHiperLogo" : type.Contains("elo") ? "creditCardEloLogo" : "creditCardVerveLogo";
            List<string> pssPartners = new List<string> { "defaulttemplate", "twopage" };

            foreach (var operation in operations)
            {
                foreach (string pssPartner in pssPartners)
                {
                    string url = $"/v7.0/Account1/paymentMethodDescriptions?operation={operation}&language=en-US&partner={partner}&country={country}&family=credit_card&type={type}";

                    Dictionary<string, string> testHeader = null;

                    string partnerSettingResponse = "{\"add\":{\"template\":\"" + pssPartner + "\",\"features\":null}, \"update\":{\"template\":\"" + pssPartner + "\",\"features\":null}}";
                    PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                    testHeader = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };

                    // Act
                    List<PIDLResource> pidl = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

                    // Assert
                    Assert.IsNotNull(pidl, "Pidl is expected to be not null");

                    Assert.IsNotNull(pidl[0].DisplayPages);
                    if (operation.Equals("add"))
                    {
                        Assert.IsNotNull(pidl[0].GetDisplayHintById(creditCardLogo), $"{creditCardLogo} is expected to be not null");
                    }

                    PXSettings.PartnerSettingsService.Responses.Clear();
                }
            }
        }

        /// <summary>
        /// This Test is used to validate prefill address checkbox is added when feature is enabled.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        [DataRow("officesmb", "hipercard", "br", true)]
        [DataRow("officesmb", "elo", "br", false)]
        [DataRow("officesmb", "verve", "ng", false)]
        [DataRow("officesmb", "visa", "in", true)]
        [DataTestMethod]
        public async Task GetPaymentMethod_PrefillBillingAddress_Validation(string partner, string type, string country, bool addPrefillAddressCheckboxFlightFeatureEnable)
        {
            // Arrange
            string url = $"/v7.0/Account1/paymentMethodDescriptions?operation=add&language=en-US&partner={partner}&country={country}&family=credit_card&type={type}";

            string expectedPSSResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"addPrefillAddressCheckbox\":{\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":" + addPrefillAddressCheckboxFlightFeatureEnable.ToString().ToLower() + " }]}}}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK);

            // Assert
            foreach (PIDLResource pidlResource in pidls)
            {
                Assert.IsNotNull(pidlResource, "The PIDL resource is expected not to be null");
                Assert.IsNotNull(pidlResource.DisplayPages, "The DisplayPages is expected not to be null");

                if (addPrefillAddressCheckboxFlightFeatureEnable)
                {
                    Assert.IsNotNull(pidlResource.GetDisplayHintById("prefillBillingAddressCheckbox"));
                }
                else
                {
                    Assert.IsNull(pidlResource.GetDisplayHintById("prefillBillingAddressCheckbox"));
                }
            }

            PXSettings.PartnerSettingsService.Responses.Clear();
        }

        /// <summary>
        /// This Test is used to validate update of prefill address checkbox text.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        [DataRow("officesmb", "hipercard", "br", true, true, "test address")]
        [DataRow("officesmb", "elo", "br", false, false, "")]
        [DataRow("officesmb", "visa", "in", true, true, "")]
        [DataTestMethod]
        public async Task GetPaymentMethod_UpdatePrefillBillingAddressCheckboxText(string partner, string type, string country, bool addPrefillAddressCheckboxFlightFeatureEnable, bool updatePrefillCheckboxText, string prefillCheckboxText = null)
        {
            // Arrange
            string url = $"/v7.0/Account1/paymentMethodDescriptions?operation=add&language=en-US&partner={partner}&country={country}&family=credit_card&type={type}";

            string expectedPSSResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{" +
                "\"addPrefillAddressCheckbox\":{" +
                    "\"applicableMarkets\":[]," +
                    "\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":" + addPrefillAddressCheckboxFlightFeatureEnable.ToString().ToLower() + "}]" +
                "}," +
                "\"customizeDisplayContent\":{" +
                    "\"applicableMarkets\":[]," +
                    "\"displayCustomizationDetail\":[{\"updatePrefillCheckboxText\":" + updatePrefillCheckboxText.ToString().ToLower() +
                    ",\"prefillCheckboxText\":\"" + (prefillCheckboxText ?? string.Empty).Replace("\"", "\\\"") + "\"}]" +
                "}" +
            "}}}";

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK);

            // Assert
            Assert.IsNotNull(pidls, "PIDL list should not be null");
            foreach (PIDLResource pidlResource in pidls)
            {
                Assert.IsNotNull(pidlResource, "The PIDL resource is expected not to be null");
                Assert.IsNotNull(pidlResource.DisplayPages, "The DisplayPages is expected not to be null");

                foreach (PIDLResource pidl in pidls)
                {
                    if (pidl.DisplayPages != null)
                    {
                        foreach (PageDisplayHint displayPage in pidl.DisplayPages)
                        {
                            PrefillControlDisplayHint prefillCheckBoxDisplayHint = displayPage?.Members
                                .Find(displayHint => displayHint.HintId.Equals(Constants.DisplayHintIds.PrefillBillingAddressCheckbox, StringComparison.OrdinalIgnoreCase)) as PrefillControlDisplayHint;

                            if (addPrefillAddressCheckboxFlightFeatureEnable && updatePrefillCheckboxText)
                            {
                                if (prefillCheckboxText == string.Empty)
                                {
                                    Assert.AreEqual("Use shipping address for billing", prefillCheckBoxDisplayHint?.DisplayName);
                                }
                                else
                                {
                                    Assert.AreEqual(prefillCheckboxText, prefillCheckBoxDisplayHint?.DisplayName);
                                }
                            }
                            else
                            {
                                Assert.IsNull(pidlResource.GetDisplayHintById("prefillBillingAddressCheckbox"));
                            }
                        }
                    }
                }
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("EmpAccount001", "testpartner123", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "saveButton", "", true)]
        [DataRow("EmpAccountNoAddressName", "testpartner123", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "saveButton", "", true)]
        [DataRow("EmpAccountNoProfile", "testpartner123", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "saveButton", "", true)]
        [DataRow("EmpAccount001", "smb", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "saveButton", "", true)]
        [DataRow("EmpAccountNoAddressName", "smb", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "saveButton", "", true)]
        [DataRow("EmpAccountNoProfile", "smb", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "saveButton", "", true)]
        [DataTestMethod]
        public async Task GetPaymentMethod_tradeavs_UsingPartnerSettingsService(string accountId, string partner, string operation, string country, string language, string family, string type, string buttonDisplayId, string scenario, bool usePidlPage)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites=true";
            string expectedPSSResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideFirstAndLastNameForCompletePrerequisites\":true}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"},\"handlepaymentchallenge\":{\"template\":\"defaultTemplate\"}}";

            Dictionary<string, string> testHeader = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            PXSettings.PartnerSettingsService.PreProcess = (partnerSettingsRequest) =>
            {
                Uri requestUri = partnerSettingsRequest.RequestUri;
                Assert.IsTrue(requestUri.PathAndQuery.Contains("/partnersettings"));
                Assert.IsTrue(requestUri.Query.Contains("settingsType=PaymentExperience"));
                Assert.IsTrue(requestUri.PathAndQuery.Contains($"{partner}"));
                Assert.IsNull(partnerSettingsRequest.Content);
            };

            PXSettings.PartnerSettingsService.PostProcess = async (partnerSettingsResponse) =>
            {
                if (partnerSettingsResponse != null)
                {
                    Assert.AreEqual(partnerSettingsResponse.StatusCode, HttpStatusCode.OK);
                    Assert.IsNotNull(partnerSettingsResponse.Content);
                    string responseContent = await partnerSettingsResponse.Content.ReadAsStringAsync();
                    Assert.AreEqual(responseContent, expectedPSSResponse);
                }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (PIDLResource profilePidl in pidls)
            {
                DisplayHint saveButtonDisplayHint = profilePidl.GetDisplayHintById(buttonDisplayId);
                Assert.IsNotNull(saveButtonDisplayHint.Action);
                Assert.IsNotNull(saveButtonDisplayHint.Action.Context);
                Assert.IsNotNull(saveButtonDisplayHint.Action.NextAction);

                var context = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(saveButtonDisplayHint.Action.Context));
                Assert.IsTrue(context.Href.Contains("scenario=suggestAddressesTradeAVSUsePidlPageV2"));
                Assert.IsTrue(context.Href.Contains("ModernValidate"));
                Assert.AreEqual(context.PropertyName, accountId == "EmpAccountNoAddressName" ? "default_address" : "address", "expected propertyName is not found in the context");

                if (accountId == "EmpAccountNoProfile")
                {
                    DisplayHint saveButtonHiddenDisplayHint = profilePidl.LinkedPidls[0].GetDisplayHintById("saveButtonHidden");
                    var saveButtonHiddenContext = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(saveButtonHiddenDisplayHint.Action.Context));
                    Assert.IsTrue(saveButtonHiddenContext.Href.Contains("https://{jarvis-endpoint}/JarvisCM/{userId}/profiles"));
                }

                AddressTestsUtil.VerifyModernValidationErrorStrings(JsonConvert.SerializeObject(profilePidl.PidlResourceStrings));
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        /// <summary>
        /// Test is to validate the hidefirstandlastnameforcompleteprerequisites PSS feature
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="partner"></param>
        /// <param name="operation"></param>
        /// <param name="country"></param>
        /// <param name="language"></param>
        /// <param name="family"></param>
        /// <param name="type"></param>
        /// <param name="showMiddleName"></param>
        /// <returns></returns>
        [DataRow("EmpAccount001", "pssBasedPartner", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb")]
        [DataRow("EmpAccountNoAddressName", "pssBasedPartner", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb")]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb")]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true)]
        [DataRow("EmpAccount001", "smb", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb")]
        [DataRow("EmpAccountNoAddressName", "smb", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb")]
        [DataRow("EmpAccountNoProfile", "smb", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb")]
        [DataRow("EmpAccountNoProfile", "smb", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true)]
        [DataTestMethod]
        public async Task GetPaymentMethod_hidefirstandlastnameforcompleteprerequisites_UsingPartnerSettingsService(string accountId, string partner, string operation, string country, string language, string family, string type, bool showMiddleName = false)
        {
            // Arrange
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites=true";

            Dictionary<string, string> testHeader = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            if (showMiddleName)
            {
                testHeader.Add("x-ms-flight", "showMiddleName");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            // First and last name textbox should be hiddlen in linkedPidl with hideFirstAndLastNameForCompletePrerequisites feature
            if (accountId == "EmpAccountNoProfile")
            {
                foreach (PIDLResource profilePidl in pidls)
                {
                    {
                        foreach (var linkedPidl in profilePidl?.LinkedPidls)
                        {
                            DisplayHint addressFirstNameDisplayHint = linkedPidl.GetDisplayHintById("addressFirstName");
                            Assert.IsTrue(addressFirstNameDisplayHint.IsHidden);
                            DisplayHint addressLastNameDisplayHint = linkedPidl.GetDisplayHintById("addressLastName");
                            Assert.IsTrue(addressLastNameDisplayHint.IsHidden);
                            DisplayHint addressMiddleNameDisplayHint = linkedPidl.GetDisplayHintById("addressMiddleName");
                            if (showMiddleName)
                            {
                                Assert.IsNotNull(addressMiddleNameDisplayHint);
                                Assert.IsTrue(addressLastNameDisplayHint.IsHidden);
                            }
                            else
                            {
                                Assert.IsNull(addressMiddleNameDisplayHint);
                            }
                        }
                    }
                }
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("Account001", "pssBasedPartner", true, true)]
        [DataRow("EmpAccount001", "pssBasedPartner", true, true)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", true, true)]
        [DataRow("Account001", "pssBasedPartner", false, false)]
        [DataRow("EmpAccount001", "pssBasedPartner", false, false)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", false, false)]
        [DataRow("Account001", "pssBasedPartner", null, false)]
        [DataRow("EmpAccount001", "pssBasedPartner", null, false)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", null, false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_hideAddCreditDebitHeading_UsingPartnerSettingsService(string accountId, string partner, bool? hideAddCreditDebitHeading, bool displayHintResult)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner={partner}&country=us&language=en-us&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            // This response doesn't contain hideAddCreditDebitCardHeading property in json.
            string partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"},\"handlepaymentchallenge\":{\"template\":\"defaultTemplate\"}}";

            if (hideAddCreditDebitHeading.HasValue)
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideAddCreditDebitCardHeading\":"
                    + hideAddCreditDebitHeading.ToString().ToLower()
                    + "}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"},\"handlepaymentchallenge\":{\"template\":\"defaultTemplate\"}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            // AddCreditDebitCardHeading should be hiddlen in pidl.
            foreach (PIDLResource profilePidl in pidls)
            {
                DisplayHint addCreditDebitCardHeadingDisplayHint = profilePidl.GetDisplayHintById("add_credit_debit_heading");
                Assert.AreEqual(displayHintResult, addCreditDebitCardHeadingDisplayHint.IsHidden ?? false);
            }
        }

        [DataRow("Account001", "pssBasedPartner", true, true)]
        [DataRow("EmpAccount001", "pssBasedPartner", true, true)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", true, true)]
        [DataRow("Account001", "pssBasedPartner", false, false)]
        [DataRow("EmpAccount001", "pssBasedPartner", false, false)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", false, false)]
        [DataRow("Account001", "pssBasedPartner", null, false)]
        [DataRow("EmpAccount001", "pssBasedPartner", null, false)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", null, false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_hideCountryDropdown_UsingPartnerSettingsService(string accountId, string partner, bool? hideCountryDropdown, bool displayHintResult)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner={partner}&country=us&language=en-us&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            // This response doesn't contain hideAddCreditDebitCardHeading property in json.
            string partnerSettingResponse = "{\"add\":{\"template\":\"defaultTemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"},\"handlepaymentchallenge\":{\"template\":\"defaultTemplate\"}}";

            if (hideCountryDropdown.HasValue)
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"defaultTemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideCountryDropdown\":"
                    + hideCountryDropdown.ToString().ToLower()
                    + "}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"},\"handlepaymentchallenge\":{\"template\":\"defaultTemplate\"}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            // AddCreditDebitCardHeading should be hiddlen in pidl.
            foreach (PIDLResource profilePidl in pidls)
            {
                DisplayHint countryDropdownDisplayHint = profilePidl.GetDisplayHintById("addressCountry");
                Assert.AreEqual(displayHintResult, countryDropdownDisplayHint.IsHidden ?? false);
            }
        }

        [DataRow("Account001", "pssBasedPartner", true, true)]
        [DataRow("EmpAccount001", "pssBasedPartner", true, true)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", true, true)]
        [DataRow("Account001", "pssBasedPartner", false, false)]
        [DataRow("EmpAccount001", "pssBasedPartner", false, false)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", false, false)]
        [DataRow("Account001", "pssBasedPartner", null, false)]
        [DataRow("EmpAccount001", "pssBasedPartner", null, false)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", null, false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_removeAddCreditDebitCardHeading_UsingPartnerSettingsService(string accountId, string partner, bool? removeAddCreditDebitHeading, bool isHeadingRemoved)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner={partner}&country=us&language=en-us&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            // This response doesn't contain hideAddCreditDebitCardHeading property in json.
            string partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"},\"handlepaymentchallenge\":{\"template\":\"defaultTemplate\"}}";

            if (removeAddCreditDebitHeading.HasValue)
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeAddCreditDebitCardHeading\":"
                    + removeAddCreditDebitHeading.ToString().ToLower()
                    + "}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"},\"handlepaymentchallenge\":{\"template\":\"defaultTemplate\"}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            // AddCreditDebitCardHeading should be hiddlen in pidl.
            foreach (PIDLResource profilePidl in pidls)
            {
                DisplayHint addCreditDebitCardHeadingDisplayHint = profilePidl.GetDisplayHintById("add_credit_debit_heading");
                Assert.AreEqual(isHeadingRemoved, addCreditDebitCardHeadingDisplayHint == null);
            }
        }

        [DataRow("Account001", "pssBasedPartner", true, true)]
        [DataRow("EmpAccount001", "pssBasedPartner", true, true)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", true, true)]
        [DataRow("Account001", "pssBasedPartner", false, false)]
        [DataRow("EmpAccount001", "pssBasedPartner", false, false)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", false, false)]
        [DataRow("Account001", "pssBasedPartner", null, false)]
        [DataRow("EmpAccount001", "pssBasedPartner", null, false)]
        [DataRow("EmpAccountNoProfile", "pssBasedPartner", null, false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_removeStarRequiredTextGroup_UsingPartnerSettingsService(string accountId, string partner, bool? removeStarRequiredTextGroup, bool isStarRequiredTextGroup)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner={partner}&country=us&language=en-us&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            // This response doesn't contain hideAddCreditDebitCardHeading property in json.
            string partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"},\"handlepaymentchallenge\":{\"template\":\"defaultTemplate\"}}";

            if (removeStarRequiredTextGroup.HasValue)
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeStarRequiredTextGroup\":"
                    + removeStarRequiredTextGroup.ToString().ToLower()
                    + "}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"},\"handlepaymentchallenge\":{\"template\":\"defaultTemplate\"}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            // AddCreditDebitCardHeading should be hiddlen in pidl.
            foreach (PIDLResource profilePidl in pidls)
            {
                DisplayHint starRequiredTextGroup = profilePidl.GetDisplayHintById("starRequiredTextGroup");
                Assert.AreEqual(isStarRequiredTextGroup, starRequiredTextGroup == null);
            }
        }

        /// <summary>
        /// This CIT validates the changes made under the feature when the addAllFieldsRequiredText feature or the PXEnableAddAllFieldsRequiredText feature flight is enabled.
        /// It ensures that the fields contain the new members with "All fields are mandatory/required." based on different conditions.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="isFeatureFlightPXEnableAddAllFieldsRequiredTextEnable">Indicates if the PXEnableAddAllFieldsRequiredText feature flight is enabled.</param>
        /// <param name="isFeatureAddAllFieldsRequiredTextStatus">Checks if the addAllFieldsRequiredText feature is enabled for the pssBased partner.</param>
        /// <param name="isPSSPartnerEnabledForPartner">Checks if the partner is PSS parner or not.</param>
        /// <returns></returns>
        [DataRow("officesmb", false, true, true)]
        [DataRow("officesmb", false, false, true)]
        [DataRow("macmanage", false, true, true)]
        [DataRow("macmanage", false, false, true)]
        [DataRow("cart", true, false, false)]
        [DataRow("cart", false, false, false)]
        [DataRow("amc", true, false, false)]
        [DataRow("amc", false, false, false)]
        [DataRow("commercialstores", true, false, false)]
        [DataRow("commercialstores", false, false, false)]
        [DataRow("webblends", true, false, false)]
        [DataRow("webblends", false, false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_Validate_FeatureMandatoryFieldsMessage(string partner, bool isFeatureFlightPXEnableAddAllFieldsRequiredTextEnable, bool isFeatureAddAllFieldsRequiredTextStatus, bool isPSSPartnerEnabledForPartner)
        {
            // Arrange
            List<string> operations = new List<string> { Constants.OperationTypes.Add, Constants.OperationTypes.Update };
            string partnerSettingResponse;
            var exposedFlightFeatures = string.Empty;

            Dictionary<string, string> familyWithTypes = new Dictionary<string, string>()
            {
                { "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "credit_card" },
                { "elo", "credit_card" },
                { "verve", "credit_card" },
                { "hipercard", "credit_card" },
                { "sepa", "direct_debit" },
                { "paypal", "ewallet" },
                { "klarna", "invoice_credit" },
            };

            foreach (var familyWithType in familyWithTypes)
            {
                var headers = new Dictionary<string, string>()
                {
                    {
                        "x-ms-flight", "PXDisablePSSCache"
                    }
                };

                foreach (string operation in operations)
                {
                    if ((operation == Constants.OperationTypes.Update && string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.PayPal, StringComparison.OrdinalIgnoreCase))
                        || (operation == Constants.OperationTypes.Update && string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.Klarna, StringComparison.OrdinalIgnoreCase))
                        || (operation == Constants.OperationTypes.Add && string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.Klarna, StringComparison.OrdinalIgnoreCase) && string.Equals(partner, Constants.PartnerNames.Cart, StringComparison.OrdinalIgnoreCase))
                        || (string.Equals(partner, Constants.VirtualPartnerNames.Macmanage) && !string.Equals(familyWithType.Key, "credit_card", StringComparison.OrdinalIgnoreCase)))
                    {
                        break;
                    }

                    string country =
                        familyWithType.Key == Constants.PaymentMethodFamilyType.Verve ? "ng" :
                        familyWithType.Key == Constants.PaymentMethodFamilyType.Hipercard || familyWithType.Key == Constants.PaymentMethodFamilyType.Elo ? "br" :
                        familyWithType.Key == Constants.PaymentMethodFamilyType.Rupay ? "in" :
                        familyWithType.Key == Constants.PaymentMethodFamilyType.Sepa ? "de" :
                        familyWithType.Key == Constants.PaymentMethodFamilyType.PayPal ? "us" :
                        familyWithType.Key == Constants.PaymentMethodFamilyType.Klarna ? "dk" :
                        "us";

                    string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&country={country}&language=en-us&operation={operation}&family={familyWithType.Value}&type={familyWithType.Key}";

                        if (isPSSPartnerEnabledForPartner)
                        {
                            string pssPartnerName = string.Equals(partner, Constants.VirtualPartnerNames.OfficeSmb) ? "defaulttemplate" : "twopage";
                            partnerSettingResponse = "{\"add\":{\"template\":\"" + pssPartnerName + "\",\"features\":{\"customizeDisplayContent\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"addAllFieldsRequiredText\":" + isFeatureAddAllFieldsRequiredTextStatus.ToString().ToLower() + "}]}}},\"update\":{\"template\":\"" + pssPartnerName + "\",\"features\":{\"customizeDisplayContent\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"addAllFieldsRequiredText\":" + isFeatureAddAllFieldsRequiredTextStatus.ToString().ToLower() + "}]}}}}";
                            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                        }

                        if (isFeatureFlightPXEnableAddAllFieldsRequiredTextEnable)
                        {
                            PXFlightHandler.AddToEnabledFlights(Constants.PartnerFlightValues.PXEnableAddAllFieldsRequiredText);
                        }

                        if (string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.Rupay, StringComparison.OrdinalIgnoreCase))
                        {
                            exposedFlightFeatures = "PXEnableRupayForIN,vnext";
                        }

                        // Act
                        List<PIDLResource> pidls = await GetPidlFromPXService(url, flightNames: exposedFlightFeatures, additionaHeaders: headers);

                        // Assert
                        Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                    foreach (PIDLResource pidl in pidls)
                    {
                        if (pidl.DisplayPages != null)
                        {
                            foreach (PageDisplayHint displayPage in pidl.DisplayPages)
                            {
                                PropertyDisplayHint propertyNmaeValue = displayPage?.Members.Find(displayHint => displayHint.DisplayHintType.Equals(Constants.DisplayHintTypes.Property, StringComparison.OrdinalIgnoreCase)) as PropertyDisplayHint;

                                TextGroupDisplayHint starTextGroupDisplayHint = displayPage?.Members.Find(displayHint => displayHint.HintId.Equals(Constants.DisplayHintIds.StarRequiredTextGroup, StringComparison.OrdinalIgnoreCase)) as TextGroupDisplayHint;
                                TextDisplayHint mandatoryFieldsMessageHint = displayPage?.Members.Find(displayHint => displayHint.HintId.Equals(Constants.DisplayHintIds.MandatoryFieldsMessage, StringComparison.OrdinalIgnoreCase)) as TextDisplayHint;

                                if (isFeatureAddAllFieldsRequiredTextStatus || isFeatureFlightPXEnableAddAllFieldsRequiredTextEnable)
                                {
                                    // For the Paypal, sepa, and klarna family types, the starRequiredTextGroup and mandatory text should be null in PIDL.
                                    if (propertyNmaeValue == null)
                                    {
                                        Assert.IsNull(starTextGroupDisplayHint, $"For {url} When the feature is enabled, starRequiredTextGroup should be null in PIDL.");
                                        Assert.IsNull(mandatoryFieldsMessageHint, $"For {url} mandatory_fields_message should be null in PIDL.");
                                    }
                                    else
                                    {
                                        Assert.IsNull(starTextGroupDisplayHint, $"For {url} When the feature is enabled, starRequiredTextGroup should be null in PIDL.");
                                        Assert.IsNotNull(mandatoryFieldsMessageHint, $"For {url} mandatory_fields_message should not be in PIDL when the feature or flight feature is enabled.");
                                        Assert.AreEqual(mandatoryFieldsMessageHint.DisplayContent, "All fields are mandatory/required.", $"For {url} The mandatory message should contain 'All fields are mandatory/required.'");
                                    }
                                }
                                else
                                {
                                    if (isPSSPartnerEnabledForPartner)
                                    {
                                        if (string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.Sepa, StringComparison.OrdinalIgnoreCase)
                                            || string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.Klarna, StringComparison.OrdinalIgnoreCase)
                                            || string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.PayPal, StringComparison.OrdinalIgnoreCase))
                                        {
                                            Assert.IsNull(starTextGroupDisplayHint, $"For {url} When feature is not enabled the starRequiredTextGroup should be null in PIDL for the direct debit sepa form.");
                                        }
                                        else
                                        {
                                            Assert.IsNotNull(starTextGroupDisplayHint, $"For {url} When feature is not enabled the starRequiredTextGroup should not be null in PIDL.");
                                        }
                                    }

                                    // Exclude the Null check for the "mandatory_fields_message" hintId from here for the webblends partner since it is already present in the pidl.
                                    if (string.Equals(partner, GlobalConstants.Partners.Webblends, StringComparison.OrdinalIgnoreCase))
                                    {
                                        // Credit Card summary page should not contain the mandatory_fields_message hintId.
                                        DisplayHint creditCardSummaryPageHintId = string.Equals(displayPage.HintId, "creditCardUpdateSummaryPage", StringComparison.OrdinalIgnoreCase) ? new PageDisplayHint() : null;

                                        if ((string.Equals(operation, Constants.OperationTypes.Add, StringComparison.OrdinalIgnoreCase)
                                                && string.Equals(familyWithType.Value, "credit_card", StringComparison.OrdinalIgnoreCase)
                                                && string.Equals(familyWithType.Key, "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", StringComparison.OrdinalIgnoreCase))
                                            || (string.Equals(operation, Constants.OperationTypes.Update, StringComparison.OrdinalIgnoreCase)
                                                && (string.Equals(familyWithType.Value, "credit_card", StringComparison.OrdinalIgnoreCase) && creditCardSummaryPageHintId == null)))
                                        {
                                            Assert.IsNotNull(mandatoryFieldsMessageHint, $"For {url} mandatory_fields_message should not be null in PIDL when the feature or flight feature is enabled.");
                                            Assert.AreEqual(mandatoryFieldsMessageHint.DisplayContent, "All fields are mandatory/required.", $"For {url} The mandatory message should contain 'All fields are mandatory/required.'");
                                        }
                                        else
                                        {
                                            Assert.IsNull(mandatoryFieldsMessageHint, $"For {url} mandatory_fields_message should not be present in PIDL when feature is enabled");
                                        }
                                    }
                                    else
                                    {
                                        Assert.IsNull(mandatoryFieldsMessageHint, $"For {url} mandatory_fields_message should not be present in PIDL when feature is enabled");
                                    }
                                }
                            }
                        }
                    }

                    PXSettings.PartnerSettingsService.ResetToDefaults();
                    PXSettings.PimsService.ResetToDefaults();
                    PXFlightHandler.ResetToDefault();
                }
            }
        }

        [DataRow("officesmb", false, true, true)]
        [DataRow("officesmb", false, false, true)]
        [DataRow("macmanage", false, true, true)]
        [DataRow("macmanage", false, false, true)]
        [DataRow("cart", true, false, false)]
        [DataRow("cart", false, false, false)]
        [DataRow("amc", true, false, false)]
        [DataRow("amc", false, false, false)]
        [DataRow("commercialstores", true, false, false)]
        [DataRow("commercialstores", false, false, false)]
        [DataRow("webblends", true, false, false)]
        [DataRow("webblends", false, false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_Validate_FeatureAddAsteriskToAllMandatoryFields(string partner, bool isFeatureFlightPXEnableAddAsteriskToAllMandatoryFieldsEnable, bool isFeatureAddAsteriskToAllMandatoryFieldsStatus, bool isPSSPartnerEnabledForPartner)
        {
            // Arrange
            List<string> operations = new List<string> { Constants.OperationTypes.Add, Constants.OperationTypes.Update };
            string partnerSettingResponse;
            var exposedFlightFeatures = string.Empty;

            Dictionary<string, string> familyWithTypes = new Dictionary<string, string>()
            {
                { "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "credit_card" },
                { "elo", "credit_card" },
                { "verve", "credit_card" },
                { "hipercard", "credit_card" },
                { "sepa", "direct_debit" },
                { "paypal", "ewallet" },
                { "klarna", "invoice_credit" },
            };

            foreach (var familyWithType in familyWithTypes)
            {
                var headers = new Dictionary<string, string>()
                {
                    {
                        "x-ms-flight", "PXDisablePSSCache"
                    }
                };

                foreach (string operation in operations)
                {
                    if ((operation == Constants.OperationTypes.Update && string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.PayPal, StringComparison.OrdinalIgnoreCase))
                        || (operation == Constants.OperationTypes.Update && string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.Klarna, StringComparison.OrdinalIgnoreCase))
                        || (operation == Constants.OperationTypes.Add && string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.Klarna, StringComparison.OrdinalIgnoreCase) && string.Equals(partner, Constants.PartnerNames.Cart, StringComparison.OrdinalIgnoreCase))
                        || (string.Equals(partner, Constants.VirtualPartnerNames.Macmanage) && !string.Equals(familyWithType.Key, "credit_card", StringComparison.OrdinalIgnoreCase)))
                    {
                        break;
                    }

                    string country =
                        familyWithType.Key == Constants.PaymentMethodFamilyType.Verve ? "ng" :
                        familyWithType.Key == Constants.PaymentMethodFamilyType.Hipercard || familyWithType.Key == Constants.PaymentMethodFamilyType.Elo ? "br" :
                        familyWithType.Key == Constants.PaymentMethodFamilyType.Rupay ? "in" :
                        familyWithType.Key == Constants.PaymentMethodFamilyType.Sepa ? "de" :
                        familyWithType.Key == Constants.PaymentMethodFamilyType.PayPal ? "us" :
                        familyWithType.Key == Constants.PaymentMethodFamilyType.Klarna ? "dk" :
                        "us";

                    string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&country={country}&language=en-us&operation={operation}&family={familyWithType.Value}&type={familyWithType.Key}";

                        if (isPSSPartnerEnabledForPartner)
                        {
                            string pssPartnerName = string.Equals(partner, Constants.VirtualPartnerNames.OfficeSmb) ? "defaulttemplate" : "twopage";
                            partnerSettingResponse = "{\"add\":{\"template\":\"" + pssPartnerName + "\",\"features\":{\"customizeDisplayContent\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"addAsteriskToAllMandatoryFields\":" + isFeatureAddAsteriskToAllMandatoryFieldsStatus.ToString().ToLower() + "}]}}},\"update\":{\"template\":\"" + pssPartnerName + "\",\"features\":{\"customizeDisplayContent\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"addAsteriskToAllMandatoryFields\":" + isFeatureAddAsteriskToAllMandatoryFieldsStatus.ToString().ToLower() + "}]}}}}";
                            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                        }

                        if (isFeatureFlightPXEnableAddAsteriskToAllMandatoryFieldsEnable)
                        {
                            PXFlightHandler.AddToEnabledFlights(Constants.PartnerFlightValues.PXEnableAddAsteriskToAllMandatoryFields);
                        }

                        if (string.Equals(familyWithType.Key, Constants.PaymentMethodFamilyType.Rupay, StringComparison.OrdinalIgnoreCase))
                        {
                            exposedFlightFeatures = "PXEnableRupayForIN,vnext";
                        }

                        // Act
                        List<PIDLResource> pidls = await GetPidlFromPXService(url, flightNames: exposedFlightFeatures, additionaHeaders: headers);

                        // Assert
                        Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                    foreach (PIDLResource pidl in pidls)
                    {
                        var allHints = pidl?.GetAllDisplayHints()?.OfType<PropertyDisplayHint>().ToList();

                        if (allHints != null)
                        {
                            foreach (var propertyDisplayHint in allHints)
                            {
                                var propertydescriptionValue = pidl.GetPropertyDescriptionByPropertyName(propertyDisplayHint.PropertyName);

                                // Check DisplayName or DisplayDescription for asterisk
                                var displayText = propertyDisplayHint.DisplayName ?? propertyDisplayHint.DisplayDescription;

                                // In some cases, displayText may be null or showDisplayName may be false. To handle these scenarios safely, we use an if condition instead of an assert.
                                if (displayText != null)
                                {
                                    Assert.IsNotNull(propertyDisplayHint);
                                    Assert.IsTrue(((isFeatureAddAsteriskToAllMandatoryFieldsStatus || isFeatureFlightPXEnableAddAsteriskToAllMandatoryFieldsEnable) && propertydescriptionValue.IsOptional != true) ? displayText.EndsWith("*") : !displayText.EndsWith("*"), $"Expected asterisk in DisplayName/Description: {displayText}");
                                }
                            }
                        }
                    }

                    PXSettings.PartnerSettingsService.ResetToDefaults();
                    PXSettings.PimsService.ResetToDefaults();
                    PXFlightHandler.ResetToDefault();
                }
            }
        }

        [DataRow("Account001", "pssBasedPartner", true, "add")]
        [DataRow("AccountNoAddress", "pssBasedPartner", true, "add")]
        [DataRow("Account001", "pssBasedPartner", false, "add")]
        [DataRow("AccountNoAddress", "pssBasedPartner", false, "add")]
        [DataRow("Account001", "pssBasedPartner", true, "update")]
        [DataRow("AccountNoAddress", "pssBasedPartner", true, "update")]
        [DataRow("Account001", "pssBasedPartner", false, "update")]
        [DataRow("AccountNoAddress", "pssBasedPartner", false, "update")]
        [DataTestMethod]
        public async Task GetPaymentMethod_EnableConditionalFields_UsingPartnerSettingsService(string accountId, string partner, bool enableConditionalFields, string operation)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner={partner}&country=us&language=en-us&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            List<string> addressFieldsPropertyNames = new List<string>() { "address_line1", "address_line2", "address_line3", "city", "region", "postal_code", "country" };

            // This response doesn't contain hideAddCreditDebitCardHeading property in json.
            string partnerSettingResponse = "{\"add\":{\"template\":\"defaultTemplate\",\"features\":null}}";

            if (enableConditionalFields)
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"defaultTemplate\",\"features\":{\"enableConditionalFieldsForBillingAddress\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true}]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (PIDLResource pidl in pidls)
            {
                DisplayHint addressTitleDisplayHint = pidl.GetDisplayHintById("addressTitle");
                DisplayHint addressCheckboxDisplayHint = pidl.GetDisplayHintById("addressCheckbox");
                DisplayHint addressGroupDisplayHint = pidl.GetDisplayHintById("addressGroup");
                DisplayHint billingAddressShowAddForConditionalFieldsGroup = pidl.GetDisplayHintById("billingAddressShowAddForConditionalFieldsGroup");
                Assert.AreEqual(enableConditionalFields, addressTitleDisplayHint != null, "addressTitle should be present if enableConditionalFields");
                Assert.AreEqual(enableConditionalFields, addressCheckboxDisplayHint != null, "addressCheckbox should be present if enableConditionalFields");
                Assert.AreEqual(enableConditionalFields, addressGroupDisplayHint != null, "addressGroup should be present if enableConditionalFields");

                if (enableConditionalFields)
                {
                    Assert.AreEqual(addressGroupDisplayHint.ConditionalFields["isHidden"], "{hideAddressGroup}");
                    Assert.AreEqual(billingAddressShowAddForConditionalFieldsGroup.ConditionalFields["isHidden"], "<|not|{hideAddressGroup}|>");
                    Assert.AreEqual(addressCheckboxDisplayHint.ConditionalFields["isHidden"], "{hideAddressTitleAndCheckbox}");
                    Assert.AreEqual(addressTitleDisplayHint.ConditionalFields["isHidden"], "{hideAddressTitleAndCheckbox}");

                    Dictionary<string, object> dataDescription = pidl.DataDescription;
                    PropertyDescription hideAddressGroup = dataDescription["hideAddressGroup"] as PropertyDescription;

                    // AccountNoAddress doesn't have address fields in profile, so hideAddressGroup should be false
                    Assert.AreEqual(!string.Equals(accountId, "AccountNoAddress"), bool.Parse(hideAddressGroup.DefaultValue), "AccountNoAddress doesn't have complete address fields in profile, so hideAddressGroup should be false for only account 002");

                    var detailsDataDescription = (List<PIDLResource>)pidl.DataDescription["details"];
                    var addressPidlResources = (List<PIDLResource>)detailsDataDescription[0].DataDescription["address"];

                    foreach (string addressPropertyName in addressFieldsPropertyNames)
                    {
                        // If any of the address fields entered by user has a client side validation error, then set "hideAddressGroup" to false and show the address group
                        object addressProperty;
                        addressPidlResources[0].DataDescription.TryGetValue(addressPropertyName, out addressProperty);
                        var addressLine1Property = (PropertyDescription)addressProperty;
                        if (addressLine1Property != null)
                        {
                            Assert.IsFalse(addressLine1Property.OnValidationFailed["hideAddressGroup"]);
                        }
                    }
                }
            }
        }

        [DataRow("Account001", "pssBasedPartner", true, "add")]
        [DataRow("AccountNoAddress", "pssBasedPartner", true, "add")]
        [DataRow("Account001", "pssBasedPartner", false, "add")]
        [DataRow("AccountNoAddress", "pssBasedPartner", false, "add")]
        [DataRow("Account001", "pssBasedPartner", true, "update")]
        [DataRow("AccountNoAddress", "pssBasedPartner", true, "update")]
        [DataRow("Account001", "pssBasedPartner", false, "update")]
        [DataRow("AccountNoAddress", "pssBasedPartner", false, "update")]
        [DataTestMethod]
        public async Task GetPaymentMethod_EnableConditionalFieldsHideAddressCheckbox_UsingPartnerSettingsService(string accountId, string partner, bool hideAddressCheckBoxIfAddressIsNotPrefilledFromServer, string operation)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner={partner}&country=us&language=en-us&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            List<string> addressFieldsPropertyNames = new List<string>() { "address_line1", "address_line2", "address_line3", "city", "region", "postal_code", "country" };

            // This response doesn't contain hideAddCreditDebitCardHeading property in json.
            string partnerSettingResponse = "{\"add\":{\"template\":\"defaultTemplate\",\"features\":{\"enableConditionalFieldsForBillingAddress\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true}]}}}}";

            if (hideAddressCheckBoxIfAddressIsNotPrefilledFromServer)
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"defaultTemplate\",\"features\":{\"enableConditionalFieldsForBillingAddress\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true,\"hideAddressCheckBoxIfAddressIsNotPrefilledFromServer\":true}]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (PIDLResource pidl in pidls)
            {
                Dictionary<string, object> dataDescription = pidl.DataDescription;
                PropertyDescription hideAddressGroup = dataDescription["hideAddressGroup"] as PropertyDescription;
                PropertyDescription hideAddressTitleAndCheckbox = dataDescription["hideAddressTitleAndCheckbox"] as PropertyDescription;
                Assert.AreEqual(!string.Equals(accountId, "AccountNoAddress"), bool.Parse(hideAddressGroup.DefaultValue), "AccountNoAddress doesn't have complete address fields in profile, so hideAddressGroup should be false for only account 002");

                if (hideAddressCheckBoxIfAddressIsNotPrefilledFromServer)
                {
                    Assert.AreEqual(string.Equals(accountId, "AccountNoAddress"), bool.Parse(hideAddressTitleAndCheckbox.DefaultValue), "AccountNoAddress doesn't have complete address fields in profile, so hideAddressTitleAndCheckbox should be true for AccountNoAddress if hideAddressCheckBoxIfAddressIsNotPrefilledFromServer is enabled");
                }
                else
                {
                    Assert.IsFalse(bool.Parse(hideAddressTitleAndCheckbox.DefaultValue), "hideAddressTitleAndCheckbox should be true for AccountNoAddress without hideAddressCheckBoxIfAddressIsNotPrefilledFromServer enabled");
                }
            }
        }

        [DataRow("Account001", "cart", false, "https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_visa.svg")]
        [DataRow("Account001", "cart", true, "https://staticresources.payments.microsoft-int.com/staticresourceservice/images/v4/logo_visa.svg")]
        [DataTestMethod]
        public async Task GetPaymentMethod_TestLogoUrl(string accountId, string partner, bool addflight, string expectedLogoUrl)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner={partner}&country=us&language=en-us&operation=add&family=credit_card&type=visa";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", (addflight ? "PXUseCDNForStaticResourceService" : string.Empty)
                }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            var visaLogoDisplayHint = pidls.First().GetDisplayHintById("creditCardVisaLogo") as LogoDisplayHint;
            Assert.IsNotNull(visaLogoDisplayHint, "Visa logo is expected");
            Assert.AreEqual(expectedLogoUrl, visaLogoDisplayHint.SourceUrl);
        }

        [DataRow("EmpAccountNoAddressName", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "direct_debit", "ach", true, "saveButton", "", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "direct_debit", "ach", true, "saveButton", "", false)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "direct_debit", "ach", false, "saveButton", "", false)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "", false)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, "saveButton", "", false)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "signup", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "signup", false)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, "saveButton", "signup", false)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "departmentalPurchase", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "departmentalPurchase", false)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, "saveButton", "departmentalPurchase", false)]
        [DataRow("EmpAccountNoProfile", "azure", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveNextButton", "", true)]
        [DataRow("EmpAccountNoProfile", "azure", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveNextButton", "", false)]
        [DataRow("EmpAccountNoProfile", "azure", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, "saveNextButton", "", false)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "direct_debit", "ach", true, "saveButton", "", true)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "direct_debit", "ach", true, "saveButton", "", false)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "direct_debit", "ach", false, "saveButton", "", false)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "", true)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "", false)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, "saveButton", "", false)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "signup", true)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "signup", false)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, "saveButton", "signup", false)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "departmentalPurchase", true)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveButton", "departmentalPurchase", false)]
        [DataRow("EmpAccount001", "commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, "saveButton", "departmentalPurchase", false)]
        [DataRow("EmpAccount001", "azure", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveNextButton", "", true)]
        [DataRow("EmpAccount001", "azure", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, "saveNextButton", "", false)]
        [DataRow("EmpAccount001", "azure", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, "saveNextButton", "", false)]
        [DataTestMethod]
        public async Task AddPaymentMethod_Profile_Employee_CompletePrereq_ModernValidate(string accountId, string partner, string operation, string country, string language, string family, string type, bool showAVSSuggestions, string buttonDisplayId, string scenario, bool usePidlPage)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites=true";

            if (!string.IsNullOrEmpty(scenario))
            {
                url += $"&scenario={scenario}";
            }

            if (string.Equals(partner, "azure", StringComparison.OrdinalIgnoreCase))
            {
                PXFlightHandler.AddToEnabledFlights("PXEnablePreReqForAzure");
            }

            if (!usePidlPage)
            {
                PXFlightHandler.AddToEnabledFlights("TradeAVSUsePidlModalInsteadofPidlPage");
            }

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            if (showAVSSuggestions)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableAVSSuggestions");
                headers["x-ms-flight"] = "showAVSSuggestions";
            }

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource profilePidl in pidls)
                    {
                        DisplayHint saveButtonDisplayHint = profilePidl.GetDisplayHintById(buttonDisplayId);
                        Assert.IsNotNull(saveButtonDisplayHint.Action);
                        Assert.IsNotNull(saveButtonDisplayHint.Action.Context);
                        if (showAVSSuggestions)
                        {
                            Assert.IsNotNull(saveButtonDisplayHint.Action.NextAction);
                        }

                        var context = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(saveButtonDisplayHint.Action.Context));
                        Assert.AreEqual(context.Href.Contains("scenario=suggestAddressesTradeAVSUsePidlModal"), !usePidlPage && showAVSSuggestions);
                        Assert.AreEqual(context.Href.Contains("ModernValidate"), showAVSSuggestions);
                        if (showAVSSuggestions)
                        {
                            Assert.AreEqual(context.PropertyName, accountId == "EmpAccountNoAddressName" ? "default_address" : "address", "expected propertyName is not found in the context");
                        }

                        AddressTestsUtil.VerifyModernValidationErrorStrings(JsonConvert.SerializeObject(profilePidl.PidlResourceStrings));
                    }
                });
        }

        [DataRow("px.risk.approved.success", null)]
        [DataRow("px.risk.badrequest.failed", null)]
        [DataRow("px.risk.servererror.failed", null)]
        [DataRow("px.risk.approved.success", true)]
        [DataRow("px.risk.badrequest.failed", true)]
        [DataRow("px.risk.servererror.failed", true)]
        [DataRow("px.risk.approved.success", false)]
        [DataRow("px.risk.badrequest.failed", false)]
        [DataRow("px.risk.servererror.failed", false)]
        [DataTestMethod]
        public async Task AddPaymentMethod_SEPA_RiskValidation_Success(string scenario, bool? isCompletePrerequistites)
        {
            ////Arrange
            PXSettings.RiskService.ResponseProvider.TestScenario = scenario;
            string url = $"/v7.0/Account008/paymentMethodDescriptions?type=sepa&partner=commercialstores&operation=Add&country=de&language=en-US&family=direct_debit&currency=USD";
            if (isCompletePrerequistites != null && isCompletePrerequistites.HasValue)
            {
                url += $"&completePrerequisites={isCompletePrerequistites.Value}";
            }

            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PxEnableRiskEligibilityCheck" }, { "x-ms-authinfo", "type=AAD,context=my-org" } };

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.IsNotNull(pidls);
                    Assert.AreEqual(pidls[0].DisplayPages[0].Members.Count, 9);
                    PropertyDisplayHint sepaAccountHolderProperty = pidls[0].GetDisplayHintById("directDebitSepaAccountholderName") as PropertyDisplayHint;
                    Assert.IsNotNull(sepaAccountHolderProperty);
                    PropertyDisplayHint sepaBankCodeProperty = pidls[0].GetDisplayHintById("directDebitSepaBankCode") as PropertyDisplayHint;
                    Assert.IsNotNull(sepaBankCodeProperty);
                    PropertyDisplayHint speaBankAccountProperty = pidls[0].GetDisplayHintById("directDebitSepaAccount") as PropertyDisplayHint;
                    Assert.IsNotNull(speaBankAccountProperty);
                });
        }

        [DataRow(null)]
        [DataRow(true)]
        [DataRow(false)]
        [DataTestMethod]
        public async Task AddPaymentMethod_SEPA_RiskValidation_Rejected(bool? isCompletePrerequistites)
        {
            ////Arrange
            PXSettings.RiskService.ResponseProvider.TestScenario = "px.risk.rejected.success";
            string url = $"/v7.0/Account008/paymentMethodDescriptions?type=sepa&partner=commercialstores&operation=Add&country=de&language=en-US&family=direct_debit&currency=USD";
            if (isCompletePrerequistites != null && isCompletePrerequistites.HasValue)
            {
                url += $"&completePrerequisites={isCompletePrerequistites.Value}";
            }

            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PxEnableRiskEligibilityCheck" }, { "x-ms-test", "{\"scenarios\":\"px.risk.rejected.success,px.pims.sepa.add.success\",\"contact\":\"pidlsdk\"}" } };

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.IsNotNull(pidls);
                    Assert.IsNull(pidls[0].DisplayPages);
                    Assert.IsNotNull(pidls[0].ClientAction);
                    Assert.AreEqual(pidls[0].ClientAction.ActionType, ClientActionType.Failure);
                    Assert.IsTrue(pidls[0].ClientAction.Context.ToString().Contains("PIEligibilityCheckRejectedbyRisk"));
                });
        }

        [DataRow("EmpAccountNoAddressName", "add", "officesmb", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb")]
        [DataRow("EmpAccountNoAddressName", "add", "commercialstores", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb")]
        [DataTestMethod]
        public async Task AddPaymentMethod_Profile_Employee_CompletePrereq_IE(string accountId, string operation, string partner, string family, string type)
        {
            // Arrange
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country=ie&language=en-IE&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites=true";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            HttpRequestMessage pxRequest = new HttpRequestMessage(HttpMethod.Get, GetPXServiceUrl(url));
            headers?.ToList()?.ForEach(pair => pxRequest.Headers.TryAddWithoutValidation(pair.Key, pair.Value));

            // Act
            var response = await PXClient.SendAsync(pxRequest);
            string responseJson = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, responseJson);
            var pidls = ReadPidlResourceFromJson(responseJson);
            Assert.IsNotNull(pidls, "PIDLs are expected not to be null");

            ButtonDisplayHint submitButton = pidls[0].GetDisplayHintById("saveButton") as ButtonDisplayHint;
            var context = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(submitButton.Action.Context));
            Assert.AreEqual("PATCH", context.Method);
            Assert.IsNotNull(context.Href, "Submit button URL is not expected to be null");
        }

        [DataRow("commercialstores", "virtual", "invoice_basic")]
        [DataRow("officesmb", "virtual", "invoice_basic")]
        [DataRow("commercialstores", "virtual", "invoice_check")]
        [DataRow("officesmb", "virtual", "invoice_check")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Invoice_AddressValidation(string partner, string family, string type)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family={family}&type={type}";

            if (string.Equals(partner, "officesmb", StringComparison.CurrentCultureIgnoreCase))
            {
                string pssmockResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}},\"update\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls);
            foreach (PIDLResource pidl in pidls)
            {
                DisplayHint validateThenSuccessWithPayloadButton = pidl.GetDisplayHintById("validateThenSuccessWithPayloadButton") as ButtonDisplayHint;
                Assert.IsNotNull(validateThenSuccessWithPayloadButton);
                Assert.IsNotNull(validateThenSuccessWithPayloadButton.Action);
                Assert.IsNotNull(validateThenSuccessWithPayloadButton.Action.Context);
                Assert.IsNotNull(validateThenSuccessWithPayloadButton.Action.NextAction);
            }
        }

        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "de", "de", null, "direct_debit", "sepa", false, false, true, "de", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "de", "de", null, "direct_debit", "sepa", false, true, true, "de", false, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "de", "es", null, "direct_debit", "sepa", false, true, true, "de", true, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "fr", "fr", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "fr", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "fr", "fr", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, true, "fr", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "fr", "fi", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, false, "fi", false, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "cn", "cn", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "cn", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "cn", "cn", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, true, "cn", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "cn", "cn", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, true, "cn", false, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "de", "de", "departmentalPurchase", "direct_debit", "sepa", false, false, true, "({dataSources.profileResource.default_address.country})", true, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "de", "de", "departmentalPurchase", "direct_debit", "sepa", false, true, true, "({dataSources.profileResource.default_address.country})", true, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "de", "es", "departmentalPurchase", "direct_debit", "sepa", false, true, true, "({dataSources.profileResource.default_address.country})", false, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "fr", "fr", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "({dataSources.profileResource.default_address.country})", false, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "fr", "fr", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, true, "({dataSources.profileResource.default_address.country})", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores,officesmb", "add", "fr", "fi", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, false, "fi", false, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "cn", "cn", "commercialsignup", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "cn", false, true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "cn", "cn", "commercialsignup", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, true, "cn", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "cn", "cn", "commercialsignup", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, true, "cn", false, true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores,officesmb", "add", "de", "de", null, "direct_debit", "sepa", true, false, true, null, true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores,officesmb", "add", "de", "de", null, "direct_debit", "sepa", true, true, true, null, false)]
        [DataRow("EmpAccountNoAddressName", "commercialstores,officesmb", "add", "de", "es", null, "direct_debit", "sepa", true, true, true, null, true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "add", "fr", "fr", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, false, true, "us", true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "add", "fr", "fr", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, true, "us", false, true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "add", "fr", "fi", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, true, "us", false)]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "add", "cn", "cn", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, false, true, "us", true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "add", "cn", "cn", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, true, "us", false, true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "add", "cn", "cn", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, true, "us", false)]
        [DataRow("EmpAccountNoAddressName", "commercialstores,officesmb", "add", "de", "de", "departmentalPurchase", "direct_debit", "sepa", true, false, true, "({dataSources.profileResource.default_address.country})", false)]
        [DataRow("EmpAccountNoAddressName", "commercialstores,officesmb", "add", "de", "de", "departmentalPurchase", "direct_debit", "sepa", true, false, true, "({dataSources.profileResource.default_address.country})", true, true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores,officesmb", "add", "de", "es", "departmentalPurchase", "direct_debit", "sepa", true, true, true, "({dataSources.profileResource.default_address.country})", false, true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores,officesmb", "add", "fr", "fr", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, false, false, "us", true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores,officesmb", "add", "fr", "fr", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, false, "us", true, true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores,officesmb", "add", "fr", "fi", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, false, "us", false, true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "add", "cn", "cn", "commercialsignup", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, false, false, "us", true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "add", "cn", "cn", "commercialsignup", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, false, "us", true, true)]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "add", "cn", "cn", "commercialsignup", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, false, "us", false, true)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "de", "de", null, "direct_debit", "sepa", false, false, true, "de", false)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "de", "de", null, "direct_debit", "sepa", false, true, true, "de", true)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "de", "es", null, "direct_debit", "sepa", false, true, true, "de", false)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "fr", "fr", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "fr", true, true)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "fr", "fr", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, true, "fr", false, true)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "fr", "fi", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, false, "fi", false)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "de", "de", "departmentalPurchase", "direct_debit", "sepa", false, false, true, "({dataSources.profileResource.default_address.country})", true)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "de", "de", "departmentalPurchase", "direct_debit", "sepa", false, true, true, "({dataSources.profileResource.default_address.country})", true)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "de", "es", "departmentalPurchase", "direct_debit", "sepa", false, true, true, "({dataSources.profileResource.default_address.country})", false, true)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "fr", "fr", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "({dataSources.profileResource.default_address.country})", true, true)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "fr", "fr", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, true, "({dataSources.profileResource.default_address.country})", false, true)]
        [DataRow("EmpAccountNoProfile", "azure,officesmb", "add", "fr", "fi", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true, false, "fi", true)]
        [DataRow("EmpAccountNoAddressName", "azure", "add", "de", "de", null, "direct_debit", "sepa", true, false, false, null, false)]
        [DataRow("EmpAccountNoAddressName", "azure", "add", "de", "de", null, "direct_debit", "sepa", true, true, false, null, true, true)]
        [DataRow("EmpAccountNoAddressName", "azure", "add", "de", "es", null, "direct_debit", "sepa", true, true, false, null, false)]
        [DataRow("EmpAccountNoAddressName", "azure", "add", "fr", "fr", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, false, false, "us", true, true)]
        [DataRow("EmpAccountNoAddressNameFR", "azure", "add", "fr", "fr", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, false, "fr", true, true)]
        [DataRow("EmpAccountNoAddressNameFI", "azure", "add", "fr", "fi", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, true, "fi", false)]
        [DataRow("EmpAccountNoAddressName", "azure", "add", "de", "de", "departmentalPurchase", "direct_debit", "sepa", true, false, true, "({dataSources.profileResource.default_address.country})", true)]
        [DataRow("EmpAccountNoAddressName", "azure", "add", "de", "de", "departmentalPurchase", "direct_debit", "sepa", true, true, true, "({dataSources.profileResource.default_address.country})", false)]
        [DataRow("EmpAccountNoAddressName", "azure", "add", "de", "es", "departmentalPurchase", "direct_debit", "sepa", true, true, true, "({dataSources.profileResource.default_address.country})", false)]
        [DataRow("EmpAccountNoAddressName", "azure", "add", "fr", "fr", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, false, false, "us", false, true)]
        [DataRow("EmpAccountNoAddressName", "azure", "add", "fr", "fr", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, false, "us", false, true)]
        [DataRow("EmpAccountNoAddressName", "azure", "add", "fr", "fi", "departmentalPurchase", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true, false, "us", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "ao", "ao", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "ao", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "cv", "cv", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "cv", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "tw", "tw", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "tw", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "hk", "hk", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "hk", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "mo", "mo", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "mo", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "me", "me", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "me", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "pt", "pt", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "pt", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "sg", "sg", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "sg", true)]
        [DataRow("EmpAccountNoProfile", "commercialstores", "add", "rs", "rs", null, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false, true, "rs", true)]
        [DataTestMethod]
        public async Task AddPaymentMethod_Profile_Employee_CompletePrereq_CommercialSmd(string accountId, string partners, string operation, string piCountry, string originCountry, string scenario, string family, string type, bool isEmployeeWithNoAddressNameProfile, bool sendOriginCountry, bool addressFieldsExpected, string expectedProfileCountry, bool enableOverrideCAndLFlight, bool enableIncludeCAndLFlight = false)
        {
            // Arrange
            List<PIDLResource> subPidl;
            Dictionary<string, object> addressDictionary;
            string[] countriesNotHavingPostalCode = { "hk", "ao", "mo" };
            List<string> flights = new List<string>() { "AADSupportSMD" };
            string[] testPartners = partners.Split(',');
            Dictionary<string, string> cultureTransformationRegexByCountry = new Dictionary<string, string>()
            {
                { "de", "^(?!de-DE$|en-US$|de-de$|en-us$).*" },
                { "es", "^(?!es-ES$|ca-ES$|eu-ES$|gl-ES$|en-US$|es-es$|ca-es$|eu-es$|gl-es$|en-us$).*" },
                { "fr", "^(?!fr-FR$|en-US$|fr-fr$|en-us$).*" },
                { "fi", "^(?!fi-FI$|sv-FI$|en-US$|fi-fi$|sv-fi$|en-us$).*" },
                { "cn", "^(?!zh-CN$|en-US$|zh-cn$|en-us$).*" },
                { "ao", "^(?!pt-PT$|en-US$|pt-pt$|en-us$).*" },
                { "tw", "^(?!zh-TW$|en-US$|zh-tw$|en-us$).*" },
                { "cv", "^(?!pt-CV$|en-US$|pt-cv$|en-us$).*" },
                { "hk", "^(?!zh-HK$|en-US$|zh-hk$|en-us$).*" },
                { "mo", "^(?!zh-MO$|en-US$|zh-mo$|en-us$).*" },
                { "me", "^(?!sr-Latn-ME$|en-US$|sr-latn-me$|en-us$).*" },
                { "pt", "^(?!pt-PT$|en-US$|pt-pt$|en-us$).*" },
                { "sg", "^(?!en-SG$|zh-SG$|en-US$|en-sg$|zh-sg$|en-us$).*" },
                { "rs", "^(?!sr-Latn-RS$|sr-Cyrl-RS$|en-US$|sr-latn-rs$|sr-cyrl-rs$|en-us$).*" }
            };

            Dictionary<string, string> languagesTransformationRegexByCountry = new Dictionary<string, string>()
            {
                { "de", "^(?!en$|de$|EN$|DE$).*" },
                { "es", "^(?!en$|es$|ca$|eu$|gl$|EN$|ES$|CA$|EU$|GL$).*" },
                { "fr", "^(?!en$|fr$|EN$|FR$).*" },
                { "fi", "^(?!en$|fi$|sv$|EN$|FI$|SV$).*" },
                { "cn", "^(?!zh-CHS$|en$|ZH-CHS$|EN$).*" },
                { "ao", "^(?!en$|pt-PT$|EN$|PT-PT$).*" },
                { "tw", "^(?!en$|zh-CHT$|EN$|ZH-CHT$).*" },
                { "cv", "^(?!en$|pt-PT$|EN$|PT-PT$).*" },
                { "hk", "^(?!en$|zh-CHT$|EN$|ZH-CHT$).*" },
                { "mo", "^(?!en$|zh-CHT$|EN$|ZH-CHT$).*" },
                { "me", "^(?!sr-Latn-CS$|en$|sr-Cyrl$|SR-LATN-CS$|EN$|SR-CYRL$).*" },
                { "pt", "^(?!en$|pt-PT$|EN$|PT-PT$).*" },
                { "sg", "^(?!en$|zh-CHS$|EN$|ZH-CHS$).*" },
                { "rs", "^(?!sr-Latn-CS$|en$|sr-Cyrl$|SR-LATN-CS$|EN$|SR-CYRL$).*" }
            };

            Dictionary<string, string> headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            foreach (string partner in testPartners)
            {
                string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={piCountry}&language=en-US&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites=true";

                if (!string.IsNullOrEmpty(scenario))
                {
                    url += $"&scenario={scenario}";
                }

                List<string> features = new List<string>() { "\"singleMarketDirective\":{\"applicableMarkets\":[]}" };
                if (enableOverrideCAndLFlight)
                {
                    flights.Add("PXOverrideCultureAndLanguageTransformation");
                    features.Add("\"overrideLinkedProfileCultureAndLanguageTransformation\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":null}");
                }

                if (enableIncludeCAndLFlight)
                {
                    flights.Add("PXIncludeCultureAndLanguageTransformation");
                    features.Add("\"enableCultureAndLanguageTransformation\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":null}");
                }

                if (string.Equals("officesmb", partner))
                {
                    string expectedPSSResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{" + string.Join(",", features) + "}}}";
                    PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

                    // We only need the origin country flight for officesmb/pss partner
                    flights = new List<string>();
                }

                if (sendOriginCountry)
                {
                    flights.Add($"originCountry_{originCountry}");
                }

                headers["x-ms-flight"] = string.Join(",", flights);

                // Act
                await GetRequest(
                    url,
                    headers,
                    null,
                    (responseCode, responseBody, responseHeaders) =>
                    {
                        // Assert
                        Assert.AreEqual(HttpStatusCode.OK, responseCode, responseBody);
                        var pidls = ReadPidlResourceFromJson(responseBody);
                        foreach (PIDLResource pidl in pidls)
                        {
                            if (isEmployeeWithNoAddressNameProfile && !string.Equals("departmentalPurchase", scenario, StringComparison.OrdinalIgnoreCase))
                            {
                                // Employee Profile PIDL
                                Assert.IsNull(pidl.LinkedPidls);
                                subPidl = pidl.DataDescription["default_address"] as List<PIDLResource>;
                                addressDictionary = subPidl[0].DataDescription;
                                Assert.IsTrue(addressDictionary.ContainsKey("address_line1"));
                                Assert.IsTrue(addressDictionary.ContainsKey("city"));
                                Assert.IsTrue(addressDictionary.ContainsKey("postal_code"));
                                Assert.AreEqual(expectedProfileCountry, (addressDictionary["country"] as PropertyDescription).DefaultValue, true);
                                return;
                            }

                            var profilePidl = pidl.LinkedPidls[0];
                            Assert.AreEqual("profile", profilePidl.Identity["description_type"]);
                            Assert.AreEqual("employee", profilePidl.Identity["type"]);
                            Assert.IsNotNull(profilePidl.DataDescription["default_address"]);

                            subPidl = profilePidl.DataDescription["default_address"] as List<PIDLResource>;
                            addressDictionary = subPidl[0].DataDescription;
                            var culture = profilePidl.DataDescription.ContainsKey("culture") ? profilePidl.DataDescription["culture"] as PropertyDescription : null;
                            var language = profilePidl.DataDescription.ContainsKey("language") ? profilePidl.DataDescription["language"] as PropertyDescription : null;

                            if (addressFieldsExpected)
                            {
                                Assert.IsTrue(addressDictionary.ContainsKey("address_line1"));
                                Assert.IsTrue(addressDictionary.ContainsKey("city"));
                                Assert.AreEqual(expectedProfileCountry, (addressDictionary["country"] as PropertyDescription).DefaultValue, true);

                                if (!countriesNotHavingPostalCode.Contains(piCountry))
                                {
                                    Assert.IsTrue(addressDictionary.ContainsKey("postal_code"));
                                }

                                if (enableIncludeCAndLFlight)
                                {
                                    Assert.IsTrue(culture == null || string.Equals(cultureTransformationRegexByCountry[piCountry], culture.Transformation["forSubmit"].InputRegex));
                                    Assert.IsTrue(language == null || string.Equals(languagesTransformationRegexByCountry[piCountry], language.Transformation["forSubmit"].InputRegex));
                                }
                                else
                                {
                                    Assert.IsNull(culture?.Transformation);
                                    Assert.IsNull(language?.Transformation);
                                }
                            }
                            else
                            {
                                Assert.IsFalse(addressDictionary.ContainsKey("address_line1"));
                                Assert.IsFalse(addressDictionary.ContainsKey("city"));
                                Assert.IsFalse(addressDictionary.ContainsKey("postal_code"));

                                if (enableOverrideCAndLFlight)
                                {
                                    Assert.IsTrue(culture == null || string.Equals(cultureTransformationRegexByCountry[originCountry], culture.Transformation["forSubmit"].InputRegex));
                                    Assert.IsTrue(language == null || string.Equals(languagesTransformationRegexByCountry[originCountry], language.Transformation["forSubmit"].InputRegex));
                                }
                                else if (enableIncludeCAndLFlight)
                                {
                                    Assert.IsTrue(culture == null || string.Equals(cultureTransformationRegexByCountry[piCountry], culture.Transformation["forSubmit"].InputRegex));
                                    Assert.IsTrue(language == null || string.Equals(languagesTransformationRegexByCountry[piCountry], language.Transformation["forSubmit"].InputRegex));
                                }
                                else
                                {
                                    Assert.IsNull(culture?.Transformation);
                                    Assert.IsNull(language?.Transformation);
                                }

                                if (string.Equals(scenario, "departmentalPurchase", StringComparison.OrdinalIgnoreCase) && isEmployeeWithNoAddressNameProfile)
                                {
                                    Assert.IsFalse(addressDictionary.ContainsKey("country"));
                                    Assert.AreEqual(7, addressDictionary.Count);
                                }
                                else if (string.Equals(scenario, "departmentalPurchase", StringComparison.OrdinalIgnoreCase))
                                {
                                    Assert.AreEqual(expectedProfileCountry, (addressDictionary["country"] as PropertyDescription).DefaultValue, true);
                                    Assert.AreEqual(8, addressDictionary.Count);
                                }
                                else
                                {
                                    Assert.AreEqual(expectedProfileCountry, (addressDictionary["country"] as PropertyDescription).DefaultValue, true);
                                    Assert.AreEqual(32, addressDictionary.Count);
                                }
                            }
                        }
                    });

                PXSettings.PartnerSettingsService.ResetToDefaults();
            }
        }

        [DataRow("EmpAccountNoProfile", "commercialstores", "us", "us", true, true, "us")]
        [DataRow("EmpAccountNoProfile", "commercialstores", "us", "jm", true, true, "us")]
        [DataRow("EmpAccountNoProfile", "commercialstores", "us", "jm", false, true, "us")]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "us", "us", true, true, "us")]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "jm", "us", true, true, "us")]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "us", "jm", true, true, "us")]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "us", "us", true, false, "us")]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "jm", "us", true, false, "jm")]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "us", "jm", true, false, "us")]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "us", "us", false, false, "us")]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "jm", "us", true, false, "jm")]
        [DataRow("EmpAccountNoAddressName", "commercialstores", "us", "jm", false, true, "us")]
        [DataTestMethod]
        public async Task AddPaymentMethod_Profile_Employee_UpdatePartial_CompletePrereq(string accountId, string partner, string piCountry, string originCountry, bool disableSMDCommercial, bool sendAddressCountryUpdatePartialFlight, string expectedProfileCountry)
        {
            // Arrange
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={piCountry}&language=en-US&partner={partner}&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb&completePrerequisites=true";
            List<string> flights = new List<string>() { $"originCountry_{originCountry}" };

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            if (sendAddressCountryUpdatePartialFlight)
            {
                flights.Add("PXSetDefaultAddressCountryForProfileUpdatePartial");
            }

            if (disableSMDCommercial)
            {
                // Using to make the smdCommercialEnabled to false if not already in paymentMethodDescription
                flights.Add("SMDDisabled");
            }

            headers["x-ms-flight"] = string.Join(",", flights);

            // Act
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);

                    switch (accountId)
                    {
                        // Account with no profile
                        case "EmpAccountNoProfile":
                            // Will have add PI pidls with linked profile pidl
                            Assert.IsTrue(pidls.Count > 1);

                            foreach (PIDLResource pidl in pidls)
                            {
                                Assert.AreEqual("paymentMethod", pidl.Identity["description_type"]);
                                Assert.AreEqual("profile", pidl.LinkedPidls[0].Identity["description_type"]);
                                Assert.AreEqual("employee", pidl.LinkedPidls[0].Identity["type"]);

                                // If SMDDisabled flight is not passed then smdCommercialEnabled will be true which will use originCountry flight to get
                                // the Profile Pidl and if SMDDisabled flight is passed then it will use piCountry as  as account does not have Profile.
                                if (!disableSMDCommercial)
                                {
                                    Assert.AreEqual(expectedProfileCountry, pidl.LinkedPidls[0].Identity["country"]);
                                }
                                else
                                {
                                    Assert.AreEqual(expectedProfileCountry, pidl.LinkedPidls[0].Identity["country"]);
                                }
                            }

                            break;

                        // Account with profile & US default address
                        case "EmpAccountNoAddressName":
                            // Will only have Update Profile PIDL
                            Assert.AreEqual(1, pidls.Count);
                            Assert.AreEqual("profile", pidls[0].Identity["description_type"]);
                            Assert.AreEqual("employee", pidls[0].Identity["type"]);
                            Assert.AreEqual("update", pidls[0].Identity["operation"]);

                            if (disableSMDCommercial)
                            {
                                // If AddressCountryUpdatePartial Flight is passed then expected Profile Pidl country should be
                                // default address country i.e. US, else it should be piCountry
                                if (sendAddressCountryUpdatePartialFlight)
                                {
                                    Assert.AreEqual(expectedProfileCountry, pidls[0].Identity["country"]);
                                }
                                else
                                {
                                    Assert.AreEqual(expectedProfileCountry, pidls[0].Identity["country"]);
                                }
                            }
                            else
                            {
                                Assert.AreEqual(expectedProfileCountry, pidls[0].Identity["country"]);
                            }

                            // Update Profile PIDL will contain the link for the second call to get the ADD PI Pidl, the url for the
                            // second call should contain piCountry which is passed while making the first call to add PI
                            Assert.IsTrue(pidls[0].Links.Values.First().Href.Contains($"country={piCountry}"));
                            break;
                    }
                });
        }

        [DataRow("EmpAccount001", "pssbasedpartner", "fr", "at", true, true)]
        [DataRow("EmpAccount001", "pssbasedpartner", "fr", "at", true, false)]
        [DataRow("EmpAccount001", "pssbasedpartner", "fr", "at", false, true)]
        [DataRow("EmpAccount001", "pssbasedpartner", "fr", "at", false, false)]
        [DataTestMethod]
        public async Task AddPaymentMethod_SMD_UsePartnerSetting_CompletePrereq(string accountId, string partner, string country, string originCountry, bool enableSMDUsingPSS, bool setSMDDisable)
        {
            // Arrange
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb&completePrerequisites=true";
            List<string> flights = new List<string>() { $"originCountry_{originCountry}" };

            string expectedPSSResponse = "{\"add\":{\"template\":\"defaulttemplate\"}}";

            if (enableSMDUsingPSS)
            {
                expectedPSSResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"singleMarketDirective\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":null}}}}";
            }

            if (setSMDDisable)
            {
                flights.Add("SMDDisabled");
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            headers["x-ms-flight"] = string.Join(",", flights);
            int numberToCallAddressesAPI = 0;

            PXSettings.AccountsService.PreProcess = (accountServiceRequest) =>
            {
                if (accountServiceRequest.RequestUri.AbsoluteUri.Contains($"EmpAccount001/addresses/EmpAccount001-Address001"))
                {
                    numberToCallAddressesAPI += 1;
                }
            };

            // Act
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    // Without SMD, addressess API should be called only once in function ReturnDefaultAddressV3ByCountry to get the default address
                    // If SMD is enabled using PSS, then the addresses API will be called again to get the address details in order to update the profileCountry
                    Assert.AreEqual(enableSMDUsingPSS && !setSMDDisable ? 2 : 1, numberToCallAddressesAPI);

                    // Without SMD, the returned PIDL is a profile form, this is because there is no address avaiable in country #1 (fr in this test) for an account which only has account in country #2 (at in this test), so updating profile address is needed in this case
                    // With SMD, the returned PIDL is credit card form, this is because although there is no address avaiable in country #1 (fr in this test), but with SMD PX could update the profileCountry as country #2 to avoid updating profile address in country #1
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.AreEqual(enableSMDUsingPSS && !setSMDDisable ? "AccountDetailsPage" : "ProfileDetailsPage", pidls[0].DisplayPages[0].DisplayName);
                    if (!enableSMDUsingPSS || (enableSMDUsingPSS && setSMDDisable))
                    {
                        Assert.IsTrue(pidls[0].GetDisplayHintById("addressCountry").IsDisabled);
                    }
                    else
                    {
                        Assert.IsFalse(pidls[0].GetDisplayHintById("addressCountry").IsDisabled);
                    }
                });

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("amcweb", "paynow", "update")]
        [DataRow("amcweb", "paynow", "add")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_NorthStarExperiencePartner_AddEditPaymentMethodCreditCardMatchesNorthStarPidl(string partner, string scenario, string operation)
        {
            // Arrange
            string northStarUrl = $"/v7.0/Account001/paymentMethodDescriptions?country=US&language=en-US&partner=northstarweb&operation={operation}&family=credit_card";

            if (operation.Equals("add"))
            {
                northStarUrl += "&completePrerequisites=true";
            }

            string partnerUrl = northStarUrl.Replace("northstarweb", partner) + $"&scenario={scenario}";

            // Act
            List<PIDLResource> partnerPidls = await GetPidlFromPXService(partnerUrl);
            List<PIDLResource> northStarPidls = await GetPidlFromPXService(northStarUrl);

            // Assert
            Assert.AreEqual(partnerPidls.Count, northStarPidls.Count);

            for (int i = 0; i < partnerPidls.Count; i += 1)
            {
                PIDLResource partnerPidl = partnerPidls[i];
                PIDLResource northStarPidl = northStarPidls[i];
                Assert.IsNotNull(partnerPidl);
                Assert.IsNotNull(northStarPidl);
                Assert.AreEqual(partnerPidl.DisplayPages.Count, northStarPidl.DisplayPages.Count);

                PageDisplayHint partnerPageOne = partnerPidl.DisplayPages[0];
                PageDisplayHint northStarPageOne = northStarPidl.DisplayPages[0];
                Assert.IsNotNull(partnerPageOne);
                Assert.IsNotNull(northStarPageOne);
                Assert.AreEqual(partnerPageOne.HintId, northStarPageOne.HintId);
                Assert.AreEqual(partnerPageOne.Members.Count, northStarPageOne.Members.Count);

                for (int j = 0; j < partnerPageOne.Members.Count; j += 1)
                {
                    Assert.AreEqual(partnerPageOne.Members[j].HintId, northStarPageOne.Members[j].HintId);
                }

                ButtonDisplayHint partnerSave = partnerPidl.GetDisplayHintById("saveButton") as ButtonDisplayHint;

                dynamic link = partnerSave.Action.Context; // Microsoft.Commerce.Payments.PXCommon.RestLink
                Assert.IsNotNull(link);
                StringAssert.Contains(link.href.ToString(), $"partner={partner}");
            }
        }

        [DataRow("update")]
        [DataRow("add")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_NorthStarLikeExperienceForAzure_AddEditPaymentMethodCreditCard(string operation)
        {
            // Arrange
            string azureUrl = $"/v7.0/Account001/paymentMethodDescriptions?country=US&language=en-US&partner=azure&operation={operation}&family=credit_card&scenario=editAddress";

            // Act
            List<PIDLResource> azurePidls = await GetPidlFromPXService(azureUrl);

            // Assert
            Assert.IsTrue(azurePidls.Count == 4);
            for (int i = 0; i < azurePidls.Count; i++)
            {
                PIDLResource azurePidl = azurePidls[i];
                Assert.IsNotNull(azurePidl.GetDisplayHintById("billingAddressTextGroup"));
                Assert.IsNotNull(azurePidl.GetDisplayHintById("billingAddressTitle"));
                Assert.IsNotNull(azurePidl.GetDisplayHintById("editAddressText"));
                Assert.IsNotNull(azurePidl.GetDisplayHintById("addNewText"));

                if (operation.Equals("add", StringComparison.OrdinalIgnoreCase))
                {
                    Assert.IsNotNull(azurePidl.GetDisplayHintById("billingAddressShowAddGroup"));
                    Assert.IsNotNull(azurePidl.GetDisplayHintById("billingAddressAddSummaryLine1"));
                    Assert.IsNotNull(azurePidl.GetDisplayHintById("billingAddressAddSummaryLine2"));
                }
                else if (operation.Equals("update", StringComparison.OrdinalIgnoreCase))
                {
                    Assert.IsNotNull(azurePidl.GetDisplayHintById("billingAddressShowUpdateGroup"));
                    Assert.IsNotNull(azurePidl.GetDisplayHintById("billingAddressUpdateSummaryLine1"));
                    Assert.IsNotNull(azurePidl.GetDisplayHintById("billingAddressUpdateSummaryLine2"));
                }

                Assert.IsNotNull(azurePidl.GetDisplayHintById("billingAddressEditGroup"));
            }
        }

        [DataRow("azure", "credit_card", true)]
        [DataRow("webblends", "credit_card", true)]
        [DataRow("oxowebdirect", "credit_card", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_ValidateServerErrorDetails(string partner, string family, bool hasRetryForInvalidRequestData)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family={family}";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, new List<string>());

            // Assert
            Assert.IsNotNull(pidls);
            foreach (PIDLResource pidl in pidls)
            {
                // verify ValidationFailed setup
                ServerErrorCode validationFailed;
                pidl.PidlResourceStrings.ServerErrorCodes.TryGetValue("ValidationFailed", out validationFailed);
                Assert.IsNotNull(validationFailed);
                Assert.AreEqual(validationFailed.RetryPolicy.RetryPolicyType, RetryPolicyType.limitedRetry);
                Assert.AreEqual(validationFailed.RetryPolicy.Context.MaxRetryCount, 3);
                Assert.AreEqual("accountHolderName,accountToken,cvvToken,expiryMonth,expiryYear,address_line1,address_line2,address_line3,city,region,country,postal_code", validationFailed.Target);

                // verify InvalidRequestData setup
                ServerErrorCode invalidRequestData;
                pidl.PidlResourceStrings.ServerErrorCodes.TryGetValue("InvalidRequestData", out invalidRequestData);
                if (hasRetryForInvalidRequestData)
                {
                    Assert.IsNotNull(invalidRequestData);
                    Assert.AreEqual(invalidRequestData.RetryPolicy.RetryPolicyType, RetryPolicyType.limitedRetry);
                    Assert.AreEqual(invalidRequestData.RetryPolicy.Context.MaxRetryCount, 3);
                    Assert.AreEqual("accountToken,cvvToken", invalidRequestData.Target);
                }
                else
                {
                    Assert.IsNull(invalidRequestData);
                }
            }
        }

        [DataRow("azure", "credit_card", "PXDisplay3dsNotEnabledErrorInline")]
        [DataRow("azure", "credit_card", null)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_ValidateInvalidIssuerErrorCodesServerErrorDetails(string partner, string family, string flightName)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family={family}";
            var headers = new Dictionary<string, string>() { { "x-ms-flight", flightName } };

            // Act, Assert
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.IsNotNull(pidls);
                    foreach (PIDLResource pidl in pidls)
                    {
                        ServerErrorCode invalidIssuerResponseWithTRPAU0009;
                        pidl.PidlResourceStrings.ServerErrorCodes.TryGetValue("InvalidIssuerResponseWithTRPAU0009", out invalidIssuerResponseWithTRPAU0009);
                        if (string.Equals(flightName, "PXDisplay3dsNotEnabledErrorInline"))
                        {
                            Assert.IsNotNull(invalidIssuerResponseWithTRPAU0009);
                            Assert.AreEqual("accountToken", invalidIssuerResponseWithTRPAU0009.Target);
                        }
                        else
                        {
                            Assert.IsNull(invalidIssuerResponseWithTRPAU0009);
                        }

                        ServerErrorCode invalidIssuerResponseWithTRPAU0008;
                        pidl.PidlResourceStrings.ServerErrorCodes.TryGetValue("InvalidIssuerResponseWithTRPAU0008", out invalidIssuerResponseWithTRPAU0008);
                        if (string.Equals(flightName, "PXDisplay3dsNotEnabledErrorInline"))
                        {
                            Assert.IsNotNull(invalidIssuerResponseWithTRPAU0008);
                            Assert.AreEqual("accountToken", invalidIssuerResponseWithTRPAU0008.Target);
                        }
                        else
                        {
                            Assert.IsNull(invalidIssuerResponseWithTRPAU0008);
                        }
                    }
                });
        }

        [DataRow("webblends", "credit_card", false)]
        [DataRow("oxowebdirect", "credit_card", false)]
        [DataRow("azure", "credit_card", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_ValidateTokenizationFailedServerErrorDetails(string partner, string family, bool tokenizationRetryExpected)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family={family}";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, new List<string>());

            // Assert
            Assert.IsNotNull(pidls);
            foreach (PIDLResource pidl in pidls)
            {
                // verify tokenizationFailed setup
                ServerErrorCode tokenizationFailed;
                pidl.PidlResourceStrings.ServerErrorCodes.TryGetValue("TokenizationFailed", out tokenizationFailed);
                if (tokenizationRetryExpected)
                {
                    Assert.IsNotNull(tokenizationFailed);
                    Assert.AreEqual(tokenizationFailed.RetryPolicy.RetryPolicyType, RetryPolicyType.limitedRetry);
                    Assert.AreEqual(tokenizationFailed.RetryPolicy.Context.MaxRetryCount, 3);
                    Assert.AreEqual("accountToken", tokenizationFailed.Target);
                }
                else
                {
                    Assert.IsNull(tokenizationFailed);
                }
            }
        }

        [DataRow("pssBasedPartner")]
        [DataRow("oxowebdirect")]
        [DataTestMethod]
        public async Task SelectPaymentResource_UseCLientSidePrefill_DataSourceHasPIListAndConfig_ViaFeature(string partner)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=selectinstance";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXUsePartnerSettingsService,PIDLEnableLocalCards"
                },
                {
                    "x-ms-test", "{\"scenarios\":\"px.pims.listpi.success\",\"contact\":\"pidlsdk\"}"
                }
            };

            PXSettings.PartnerSettingsService.ResetToDefaults();
            string partnerSettingResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"useClientSidePrefill\":{\"applicableMarkets\":[]},\"includeCreditCardLogos\":{\"applicableMarkets\":[]},\"addNewPaymentMethodOption\":{\"applicableMarkets\":[]},\"useListModernResource\":{\"applicableMarkets\":[]},\"inlineLocalCardDetails\":{\"applicableMarkets\":[]},\"addLocalCardFiltering\":{\"applicableMarkets\":[]},\"preventAddNewPaymentMethodDefaultSelection\":{\"applicableMarkets\":[]}}}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                Assert.IsNotNull(pidl.DataSources, "For client side prefilling to work, Pidl DataSources is expected to be not null");
                var dataSources = pidl.DataSources;
                Assert.IsTrue(dataSources.Count > 0, "For client side prefilling to work, Pidl is expected to have atleast one DataSource");
                Assert.IsTrue(dataSources.ContainsKey("paymentInstruments"), "For client side prefilling to work, Pidl is expected to have paymentInstruments DataSource");
                Assert.IsTrue(dataSources["paymentInstruments"].Members.Count > 0, "Pi list should atleast have 1 member");
                Assert.IsNotNull(dataSources["paymentInstruments"].DataSourceConfig);
            }
        }

        [DataRow("defaulttemplate", false, false, false)]
        [DataRow("defaulttemplate", true, false, false)]
        [DataRow("defaulttemplate", true, true, false)]
        [DataRow("defaulttemplate", true, false, true)]
        [DataTestMethod]
        public async Task SelectPaymentResource_ExpressCheckout(string partner, bool usePXUseInlineExpressCheckoutHtml, bool usePXExpressCheckoutUseIntStaticResources, bool usePXExpressCheckoutUseProdStaticResources)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=ExpressCheckout&expressCheckoutData=%7B%22amount%22%3A0.99%2C%22currency%22%3A%22USD%22%2C%22country%22%3A%22US%22%2C%22language%22%3A%22en-US%22%2C%22topDomainUrl%22%3A%22%22%2C%22recurringPaymentDetails%22%3A%7B%22frequencyUnit%22%3A%22month%22%2C%22frequency%22%3A1%2C%22startTime%22%3A%222025-03-07T20%3A54%3A52.122Z%22%2C%22amount%22%3A1%2C%22label%22%3A%22Monthly%20Subscription%22%7D%2C%22options%22%3A%7B%22cornerRadius%22%3A%228px%22%2C%22buttonColor%22%3A%7B%22googlepay%22%3A%22black%22%2C%22applepay%22%3A%22white%22%7D%2C%22buttonType%22%3A%7B%22googlepay%22%3A%22buy%22%2C%22applepay%22%3A%22plain%22%7D%7D%7D&country=US&allowedPaymentMethods=%5B%22ewallet.applepay%22%2C%22ewallet.googlepay%22%5D";

            string expectedPIMSResponse = "[{\"paymentMethodType\":\"applepay\",\"properties\":{\"offlineRecurring\":true,\"userManaged\":false,\"chargeThresholds\":null,\"redirectRequired\":null,\"soldToAddressRequired\":true,\"splitPaymentSupported\":true,\"supportedOperations\":[\"authorize\",\"charge\",\"refund\",\"chargeback\"],\"taxable\":false,\"providerRemittable\":false,\"providerCountry\":null,\"nonStoredPaymentMethodId\":\"be4de87d-7e38-4b2d-8836-9237eb32848e\",\"isNonStoredPaymentMethod\":true},\"paymentMethodGroup\":\"ewallet\",\"groupDisplayName\":\"eWallet\",\"exclusionTags\":null,\"paymentMethodFamily\":\"ewallet\",\"display\":{\"name\":\"ApplePay\",\"logo\":\"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_applepay.svg\",\"logos\":[{\"mimeType\":\"image/svg+xml\",\"url\":\"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_applepay.svg\"}]},\"AdditionalDisplayText\":null},{\"paymentMethodType\":\"googlepay\",\"properties\":{\"offlineRecurring\":true,\"userManaged\":false,\"chargeThresholds\":null,\"redirectRequired\":null,\"soldToAddressRequired\":true,\"splitPaymentSupported\":true,\"supportedOperations\":[\"authorize\",\"charge\",\"refund\",\"chargeback\"],\"taxable\":false,\"providerRemittable\":false,\"providerCountry\":null,\"nonStoredPaymentMethodId\":\"cdc85313-9b57-4052-81fb-dea336132cbf\",\"isNonStoredPaymentMethod\":true},\"paymentMethodGroup\":\"ewallet\",\"groupDisplayName\":\"eWallet\",\"exclusionTags\":null,\"paymentMethodFamily\":\"ewallet\",\"display\":{\"name\":\"GooglePay\",\"logo\":\"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_googlepay.svg\",\"logos\":[{\"mimeType\":\"image/svg+xml\",\"url\":\"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_googlepay.svg\"}]},\"AdditionalDisplayText\":null}]";
            PXSettings.PimsService.ArrangeResponse(expectedPIMSResponse);

            if (usePXUseInlineExpressCheckoutHtml)
            {
                PXFlightHandler.AddToEnabledFlights("PXUseInlineExpressCheckoutHtml");
            }

            if (usePXExpressCheckoutUseIntStaticResources)
            {
                PXFlightHandler.AddToEnabledFlights("PXExpressCheckoutUseIntStaticResources");
            }

            if (usePXExpressCheckoutUseProdStaticResources)
            {
                PXFlightHandler.AddToEnabledFlights("PXExpressCheckoutUseProdStaticResources");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                var googlePayButton = pidl.GetDisplayHintById("googlepayExpressCheckoutFrame") as ExpressCheckoutButtonDisplayHint;
                Assert.IsNotNull(googlePayButton, "Google pay button should not be null");
                Assert.AreEqual("triggerSubmit", Convert.ToString(googlePayButton.Payload["actionType"]), "Action type for express checkout should be success");
                Assert.AreEqual("en", Convert.ToString(googlePayButton.Payload["language"]), "language should be en");
                Assert.IsNotNull(googlePayButton.Payload["options"], "Google pay button should have options");
                Assert.IsNotNull(googlePayButton.Payload["recurringPaymentDetails"], "Google pay button should have recurring payment details");

                if (usePXUseInlineExpressCheckoutHtml)
                {
                    Assert.IsTrue(googlePayButton.SourceUrl.Contains("inline/googlepay.html"));
                }

                if (usePXExpressCheckoutUseIntStaticResources)
                {
                    Assert.IsTrue(googlePayButton.SourceUrl.Contains("pmservices.cp.microsoft-int.com"));
                }
                else if (usePXExpressCheckoutUseProdStaticResources)
                {
                    Assert.IsTrue(googlePayButton.SourceUrl.Contains("pmservices.cp.microsoft.com"));
                }

                var applePayButton = pidl.GetDisplayHintById("applepayExpressCheckoutFrame") as ExpressCheckoutButtonDisplayHint;
                Assert.IsNotNull(applePayButton, "Apple pay button should not be null");
                Assert.AreEqual("triggerSubmit", Convert.ToString(applePayButton.Payload["actionType"]), "Action type for express checkout should be success");
                Assert.AreEqual("en-US", Convert.ToString(applePayButton.Payload["language"]), "language should be en-US");
                Assert.IsNotNull(applePayButton.Payload["options"], "Apple pay button should have options");
                Assert.IsNotNull(applePayButton.Payload["recurringPaymentDetails"], "Apple pay button should have recurring payment details");

                if (usePXUseInlineExpressCheckoutHtml)
                {
                    Assert.IsTrue(applePayButton.SourceUrl.Contains("inline/applepay.html"));
                }

                if (usePXExpressCheckoutUseIntStaticResources)
                {
                    Assert.IsTrue(applePayButton.SourceUrl.Contains("pmservices.cp.microsoft-int.com"));
                }
                else if (usePXExpressCheckoutUseProdStaticResources)
                {
                    Assert.IsTrue(applePayButton.SourceUrl.Contains("pmservices.cp.microsoft.com"));
                }
            }
        }

        [DataRow("windowsstore")]
        [DataTestMethod]
        public async Task SelectPaymentResource_PreventAddNewPaymentMethodDefaultSelection_DataSourceHasEmptyPIList_ViaFeature(string partner)
        {
            // Arrange
            string url = $"/v7.0/Account000/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=selectinstance";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXUsePartnerSettingsService"
                }
            };

            PXSettings.PartnerSettingsService.ResetToDefaults();
            string partnerSettingResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"addNewPaymentMethodOption\":{\"applicableMarkets\":[]}, \"preventAddNewPaymentMethodDefaultSelection\":{\"applicableMarkets\":[]}}}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                Assert.IsNotNull(pidl.DataSources, "For client side prefilling to work, Pidl DataSources is expected to be not null");
                Assert.IsTrue(pidl.DataSources.Count > 0, "For client side prefilling to work, Pidl is expected to have atleast one DataSource");
                foreach (var keyValPair in pidl.DataSources)
                {
                    Assert.IsNotNull(keyValPair.Value.Members, "Expected data source members are not found");
                }

                var pi = pidl.DataSources["paymentInstruments"].Members[0];
                var addNewPM = JsonConvert.DeserializeObject<PaymentInstrument>(pi.ToString());
                Assert.AreEqual(addNewPM.PaymentMethod.PaymentMethodType, "addnewpm_no_default_selection");

                PropertyDisplayHint listPI = pidl.GetDisplayHintById(Constants.DisplayHintIds.PaymentInstrumentListPi) as PropertyDisplayHint;
                Assert.IsNotNull(listPI, "pidl does not have a paymentInstrumentListPi element");
                Assert.IsTrue(listPI.AlwaysUpdateModelValue, "AlwaysUpdateModelValue flag must be set to true");
            }
        }

        [DataRow("windowsstore")]
        [DataTestMethod]
        public async Task SelectPaymentResource_PreventAddNewPaymentMethodDefaultSelection_DataSourceHasEmptyPIList(string partner)
        {
            // Arrange
            string url = $"/v7.0/Account000/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=selectinstance";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXPreventAddNewPaymentMethodDefaultSelection,PXUsePartnerSettingsService"
                }
            };

            PXSettings.PartnerSettingsService.ResetToDefaults();
            string partnerSettingResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"addNewPaymentMethodOption\":{\"applicableMarkets\":[]}}}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                Assert.IsNotNull(pidl.DataSources, "For client side prefilling to work, Pidl DataSources is expected to be not null");
                Assert.IsTrue(pidl.DataSources.Count > 0, "For client side prefilling to work, Pidl is expected to have atleast one DataSource");
                foreach (var keyValPair in pidl.DataSources)
                {
                    Assert.IsNotNull(keyValPair.Value.Members, "Expected data source members are not found");
                }

                var pi = pidl.DataSources["paymentInstruments"].Members[0];
                var addNewPM = JsonConvert.DeserializeObject<PaymentInstrument>(pi.ToString());
                Assert.AreEqual(addNewPM.PaymentMethod.PaymentMethodType, "addnewpm_no_default_selection");

                PropertyDisplayHint listPI = pidl.GetDisplayHintById(Constants.DisplayHintIds.PaymentInstrumentListPi) as PropertyDisplayHint;
                Assert.IsNotNull(listPI, "pidl does not have a paymentInstrumentListPi element");
                Assert.IsTrue(listPI.AlwaysUpdateModelValue, "AlwaysUpdateModelValue flag must be set to true");
            }
        }

        [DataRow("windowsstore")]
        [DataTestMethod]
        public async Task SelectPaymentResource_PreventAddNewPaymentMethodDefaultSelection_DataSourceHasPIList(string partner)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=selectinstance";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXPreventAddNewPaymentMethodDefaultSelection,PXUsePartnerSettingsService"
                }
            };

            PXSettings.PartnerSettingsService.ResetToDefaults();
            string partnerSettingResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"addNewPaymentMethodOption\":{\"applicableMarkets\":[]}}}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                Assert.IsNotNull(pidl.DataSources, "For client side prefilling to work, Pidl DataSources is expected to be not null");
                Assert.IsTrue(pidl.DataSources.Count > 0, "For client side prefilling to work, Pidl is expected to have atleast one DataSource");
                foreach (var keyValPair in pidl.DataSources)
                {
                    Assert.IsNotNull(keyValPair.Value.Members, "Expected data source members are not found");
                }

                foreach (var pi in pidl.DataSources["paymentInstruments"].Members)
                {
                    var pm = JsonConvert.DeserializeObject<PaymentInstrument>(pi.ToString());
                    var pm_family = pm.PaymentMethod.PaymentMethodFamily;
                    if (pm_family == "add_new_payment_method")
                    {
                        Assert.AreEqual(pm.PaymentMethod.PaymentMethodType, "addnewpm");
                    }
                }

                PropertyDisplayHint listPI = pidl.GetDisplayHintById(Constants.DisplayHintIds.PaymentInstrumentListPi) as PropertyDisplayHint;
                Assert.IsNotNull(listPI, "pidl does not have a paymentInstrumentListPi element");
                Assert.IsNull(listPI.AlwaysUpdateModelValue, "AlwaysUpdateModelValue flag must not be set");
            }
        }

        [DataRow("azure")]
        [DataRow("appsource")]
        [DataRow("commercialstores")]
        [DataRow("marketplace")]
        [DataRow("windowsstore")]
        [DataTestMethod]
        public async Task SelectPaymentResource_ClientSidePrefilling_PidlHasDataSource(string partner)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=selectinstance";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                Assert.IsNotNull(pidl.DataSources, "For client side prefilling to work, Pidl DataSources is expected to be not null");
                Assert.IsTrue(pidl.DataSources.Count > 0, "For client side prefilling to work, Pidl is expected to have atleast one DataSource");
                foreach (var keyValPair in pidl.DataSources)
                {
                    Assert.IsTrue(keyValPair.Value.Href.Contains("{pifd-endpoint}"), "Expected data source href is not found");
                }
            }
        }

        [DataRow("oxowebdirect", true)]
        [DataRow("oxowebdirect", false)]
        [DataTestMethod]
        public async Task SelectPaymentResource_ClientSidePrefilling_ViaFeature(string partner, bool useClientSideFeature)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=selectinstance";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXUsePartnerSettingsService,PXDisablePSSCache"
                }
            };

            if (useClientSideFeature)
            {
                string partnerSettingResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"useClientSidePrefill\":{\"applicableMarkets\":[]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                if (useClientSideFeature)
                {
                    Assert.IsNotNull(pidl.DataSources, "For client side prefilling to work, Pidl DataSources is expected to be not null");
                    Assert.IsTrue(pidl.DataSources.Count > 0, "For client side prefilling to work, Pidl is expected to have atleast one DataSource");
                    foreach (var keyValPair in pidl.DataSources)
                    {
                        Assert.IsTrue(keyValPair.Value.Href.Contains("{pifd-endpoint}"), "Expected data source href is not found");
                    }
                }
                else
                {
                    Assert.IsNull(pidl.DataSources, "For client side prefilling to work, Pidl DataSources is expected to be not null");
                }
            }
        }

        [DataRow("oxowebdirect", "us", true, false)]
        [DataRow("oxowebdirect", "us", false, false)]
        [DataRow("oxowebdirect", "gb", true, true)]
        [DataRow("oxowebdirect", "gb", false, true)]
        [DataRow("oxowebdirect", "de", true, true)]
        [DataRow("oxowebdirect", "de", false, true)]
        [DataTestMethod]
        public async Task SelectPaymentResource_LocalCardFiltering(string partner, string country, bool featureEnabled, bool isSMD)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation=selectinstance";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXUsePartnerSettingsService,PXDisablePSSCache"
                }
            };

            string partnerSettingResponse;
            if (featureEnabled)
            {
                partnerSettingResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"useClientSidePrefill\":{\"applicableMarkets\":[]}, \"addLocalCardFiltering\":{\"applicableMarkets\":[]}}}}";
            }
            else
            {
                partnerSettingResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"useClientSidePrefill\":{\"applicableMarkets\":[]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                var dataSources = pidl.DataSources;
                Assert.IsNotNull(dataSources, "Expected data sources are not found");

                var piSource = dataSources["paymentInstruments"] as DataSource;
                Assert.IsNotNull(piSource, "Expected data sources are not found");

                if (featureEnabled)
                {
                    Assert.IsTrue(piSource.DataSourceConfig.UseLocalDataSource, "UseLocalDataSource should be true");

                    var functionContext = piSource.DataSourceConfig.Filter.FunctionContext;
                    var allowedCountries = functionContext["allowedCountries"];
                    Assert.IsTrue(allowedCountries.Contains(country), "Expected country not found");

                    if (isSMD)
                    {
                        Assert.IsTrue(allowedCountries.Count > 20, "Expected allowedCountries count not found");
                    }
                    else
                    {
                        Assert.IsTrue(allowedCountries.Count == 1, "Expected allowedCountries count not found");
                    }
                }
                else
                {
                    Assert.IsNull(piSource.DataSourceConfig, "DataSourceConfig should be null");
                }
            }
        }

        [DataRow("oxowebdirect", true)]
        [DataRow("oxowebdirect", false)]
        [DataTestMethod]
        public async Task SelectPaymentResource_InlineLocalCardDetails(string partner, bool featureEnabled)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=selectinstance";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXUsePartnerSettingsService,PXDisablePSSCache"
                }
            };

            string partnerSettingResponse;
            if (featureEnabled)
            {
                partnerSettingResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"useClientSidePrefill\":{\"applicableMarkets\":[]}, \"inlineLocalCardDetails\":{\"applicableMarkets\":[]}}}}";
            }
            else
            {
                partnerSettingResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"useClientSidePrefill\":{\"applicableMarkets\":[]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                PropertyDisplayHint listPI = pidl.GetDisplayHintById(Constants.DisplayHintIds.PaymentInstrumentListPi) as PropertyDisplayHint;

                var options = listPI?.PossibleOptions;

                if (options == null)
                {
                    Assert.Fail("Expected options are not found");
                }

                // for each option in options iterate through values
                foreach (var option in options)
                {
                    var value = option.Value;
                    var content = value?.DisplayContent;

                    // return element from content.members where displayId is paymentInstrumentItemWalletCardGroup
                    GroupDisplayHint walletCardGroup = content?.Members?.FirstOrDefault(m => m.HintId == Constants.DisplayHintIds.PaymentInstrumentItemWalletCardGroup) as GroupDisplayHint;
                    GroupDisplayHint detailsGroup = walletCardGroup?.Members?.FirstOrDefault(m => m.HintId == Constants.DisplayHintIds.PaymentInstrumentItemWalletDetailsGroup) as GroupDisplayHint;
                    Assert.IsNotNull(detailsGroup, "Expected details group is not found");

                    // After feature change, details group should have 2 members
                    if (featureEnabled)
                    {
                        Assert.IsTrue(detailsGroup.Members.Count == 2, "Expected detailsGroup Count not found");
                        Assert.IsTrue(detailsGroup.Members[0].DisplayHintType == "image", "Expected image display hint is not found");
                        Assert.IsTrue(detailsGroup.Members[1].DisplayHintType == "group", "Expected group display hint is not found");
                    }
                    else
                    {
                        Assert.IsTrue(detailsGroup.Members.Count == 3, "Expected detailsGroup Count not found");
                        Assert.IsTrue(detailsGroup.Members[0].DisplayHintType == "image", "Expected image display hint is not found");
                        Assert.IsTrue(detailsGroup.Members[1].DisplayHintType == "group", "Expected group display hint is not found");
                        Assert.IsTrue(detailsGroup.Members[2].DisplayHintType == "text", "Expected group display hint is not found");
                    }
                }
            }
        }

        [DataRow("payin", true)]
        [DataRow("payin", false)]
        [DataTestMethod]
        public async Task SelectPaymentResource_UpdateNewPaymentMethodLinkActionContext(string partner, bool includeFlight)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=in&language=en-US&partner={partner}&operation=selectinstance";

            if (includeFlight)
            {
                PXFlightHandler.AddToEnabledFlights("UpdateNewPaymentMethodLinkActionContext");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                var displayHint = pidl.GetDisplayHintById("newPaymentMethodLink") as ButtonDisplayHint;
                Assert.IsNotNull(displayHint, "newPaymentMethodLink button should be present in the pidl");

                if (includeFlight)
                {
                    Assert.AreEqual(displayHint.Action.ActionType, "success");
                }
                else
                {
                    Assert.AreEqual(displayHint.Action.ActionType, "partnerAction");
                }
            }
        }

        [DataRow("appsource", "credit_card", "")]
        [DataTestMethod]
        public async Task ShowPaymentInstrument_ClientSidePrefilling_PidlIsValid(string partner, string family, string type)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&family={family}&partner={partner}&operation=show";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
        }

        /// <summary>
        /// This test is used to validate the pidl for search operation.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="family"></param>
        /// <param name="type"></param>
        /// <param name="usePartnerSettings"></param>
        /// <returns></returns>
        [DataRow("consumersupport", "credit_card")]
        [DataRow("commercialsupport", "credit_card")]
        [DataRow("defaulttemplate", "credit_card")]
        [DataRow("officesmb", "credit_card", true)]
        [DataTestMethod]
        public async Task SearchPaymentInstrument_PidlIsValid(string partner, string family, bool usePartnerSettings = false)
        {
            // Arrange
            string url = $"/v7.0/paymentMethodDescriptions?country=us&language=en-US&family={family}&partner={partner}&operation=search";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (usePartnerSettings)
            {
                string partnerSettingResponse = "{\"search\":{\"template\":\"defaulttemplate\",\"features\":null}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            Assert.IsTrue(pidls.Count > 0, "Pidl is expected to be not null");
            Assert.IsTrue(pidls[0].DisplayPages.Count > 0, "Pidl is expected to have atleast one pidl");
            Assert.AreEqual("creditCardSearchPage", pidls[0].DisplayPages[0].HintId, "search PI pidl sequenceId is expected to creditCardSearchPage");
        }

        /// <summary>
        /// This test is used to verify the pidl for show operation.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="family"></param>
        /// <param name="type"></param>
        /// <param name="usePartnerSettings"></param>
        /// <returns></returns>
        [DataRow("commercialsupport", "credit_card", "")]
        [DataRow("commercialsupport", "ewallet", "paypal")]
        [DataRow("commercialsupport", "direct_debit", "sepa")]
        [DataRow("defaulttemplate", "credit_card", "")]
        [DataRow("defaulttemplate", "ewallet", "paypal")]
        [DataRow("defaulttemplate", "direct_debit", "sepa")]
        [DataRow("officesmb", "credit_card", "", true)]
        [DataRow("officesmb", "ewallet", "paypal", true)]
        [DataRow("officesmb", "direct_debit", "sepa", true)]
        [DataTestMethod]
        public async Task ShowPaymentInstrument_PidlIsValid(string partner, string family, string type, bool usePartnerSettings = false)
        {
            // Arrange
            var displayHintValueBasedOnFamilyOrType =
                family == "credit_card" ? "paymentInstrumentShowCCSinglePage" :
                type == "paypal" ? "paymentInstrumentShowPaypalSinglePage" :
                type == "sepa" ? "paymentInstrumentShowSepaSinglePage" :
                type == "ach" ? "paymentInstrumentShowAchSinglePage" :
                null;

            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&family={family}&type={type}&partner={partner}&operation=show";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (usePartnerSettings)
            {
                string partnerSettingResponse = "{\"show\":{\"template\":\"defaulttemplate\",\"features\":null}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            Assert.AreEqual(1, pidls[0].DisplayPages.Count, "Only one DisplayPages PI PIDL is expected");
            Assert.AreEqual(displayHintValueBasedOnFamilyOrType, pidls[0].DisplayPages[0].HintId, "show PI pidl sequenceId is expected HintId");
        }

        [DataRow("commercialstores", "SMDDisabled,originCountry_es", "SMDDisabled", true)]
        [DataRow("commercialstores", "AADSupportSMD", "AADSupportSMD", false)]
        [DataRow("commercialstores", "AADSupportSMD,SMDDisabled", "AADSupportSMD,SMDDisabled", true)]
        [DataRow("azure", "SMDDisabled", "SMDDisabled", false)]
        [DataRow("azure", "AADSupportSMD", "AADSupportSMD", true)]
        [DataRow("azure", "AADSupportSMD,SMDDisabled", "AADSupportSMD,SMDDisabled", false)]
        [DataRow("setupoffice", "AADSupportSMD,SMDDisabled", null, true)]
        [DataTestMethod]
        public async Task SelectPaymentInstrument_SelectInstance_CommercialSMD(string partner, string sendFlights, string expectedFlights, bool sendOriginCountry)
        {
            // Arrange
            string expectedResourceId = "list";
            string operation = "selectinstance";
            string country = "fi";
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&partner={partner}&operation={operation}";
            string originCountryFlight = "originCountry_es";

            if (sendOriginCountry)
            {
                sendFlights = string.Join(",", sendFlights, originCountryFlight);
            }

            var headers = new Dictionary<string, string>() { { "x-ms-flight", sendFlights } };

            // Act
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    VerifySelectPaymentInstrumentPidl(responseBody, operation, country, expectedResourceId);

                    Assert.AreEqual(sendOriginCountry, responseHeaders.GetValues(GlobalConstants.HeaderValues.ExtendedFlightName).First().IndexOf(originCountryFlight) > 0);

                    foreach (var pidl in ReadPidlResourceFromJson(responseBody))
                    {
                        Assert.IsNotNull(pidl);
                        Assert.AreEqual(1, pidl.DataSources.Count);

                        if (!string.IsNullOrEmpty(expectedFlights))
                        {
                            Assert.AreEqual(1, pidl.DataSources["paymentInstruments"].Headers.Count);
                            Assert.AreEqual(expectedFlights, pidl.DataSources["paymentInstruments"].Headers["x-ms-flight"]);
                        }
                        else
                        {
                            Assert.AreEqual(0, pidl.DataSources["paymentInstruments"].Headers.Count);
                            Assert.IsFalse(pidl.DataSources["paymentInstruments"].Headers.ContainsKey("x-ms-flight"));
                        }
                    }
                });
        }

        [DataRow("xboxsettings", "selectinstance", "us", "en-GB", "")]
        [DataRow("xboxsettings", "selectinstance", "us", "en-GB", null)]
        [DataRow("xboxsettings", "selectinstance", "us", "en-GB", "%5B%22credit_card%22%2C%22ewallet.paypal%22%5D")]
        [DataRow("xboxsettings", "selectinstance", "us", "en-US", "%5B%22credit_card%22%2C%22ewallet.venmo%22%2C%22ewallet.paypal%22%5D")]
        [DataTestMethod]
        public async Task SelectPaymentInstrument_SelectInstance_AllowedPayementMethods(
            string partner,
            string operation,
            string country,
            string language,
            string allowedPaymentMethods)
        {
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&allowedPaymentMethods={allowedPaymentMethods}";
            if (partner == "xboxsettings")
            {
                url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&scenario=manage&allowedPaymentMethods={allowedPaymentMethods}";
            }

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);

                    foreach (var pidl in ReadPidlResourceFromJson(responseBody))
                    {
                        Assert.IsNotNull(pidl);

                        if (partner.Equals("xboxsettings"))
                        {
                            Assert.AreEqual(1, pidl.DataSources.Count);
                            if (string.IsNullOrEmpty(allowedPaymentMethods))
                            {
                                Assert.IsTrue(pidl.DataSources["paymentInstruments"].Members.Count > 0, "The actual members Count was not greater than zero");
                            }
                            else
                            {
                                foreach (var pi in pidl.DataSources["paymentInstruments"].Members)
                                {
                                    var pm = JsonConvert.DeserializeObject<PaymentInstrument>(pi.ToString());
                                    var pm_family = pm.PaymentMethod.PaymentMethodFamily;
                                    var pm_type = pm.PaymentMethod.PaymentMethodType;
                                    Assert.AreNotEqual("mobile_billing_non_sim", pm_family);
                                    Assert.AreNotEqual("stored_value", pm_type);
                                }
                            }
                        }
                        else
                        {
                            var pi_group = pidl.DisplayPages.First().Members.First() as PropertyDisplayHint;
                            if (string.IsNullOrEmpty(allowedPaymentMethods))
                            {
                                Assert.IsTrue(pi_group.PossibleOptions.Count > 0, "The actual PossibleOptions Count was not greater than zero");
                            }
                            else
                            {
                                foreach (var pi in pi_group.PossibleOptions)
                                {
                                    var context = JsonConvert.DeserializeObject<JObject>(pi.Value.PidlAction.Context.ToString());
                                    var instance = JsonConvert.DeserializeObject<PaymentInstrument>(context["instance"].ToString());
                                    var pm_family = instance.PaymentMethod.PaymentMethodFamily;
                                    var pm_type = instance.PaymentMethod.PaymentMethodType;
                                    Assert.AreNotEqual("mobile_billing_non_sim", pm_family);
                                    Assert.AreNotEqual("stored_value", pm_type);
                                }
                            }
                        }
                    }
                });
        }

        [DataRow("azure", "in", "", false)]
        [DataRow("azure", "in", "%5B%22credit_card%22%2C%22ewallet.paypal%22%5D", false)]
        [DataRow("azure", "in", "%5B%22credit_card%22%2C%22ewallet.legacy_billdesk_payment%22%5D", true)]
        [DataRow("commercialstores", "in", "", false)]
        [DataRow("commercialstores", "in", "%5B%22credit_card%22%2C%22ewallet.paypal%22%5D", false)]
        [DataRow("commercialstores", "in", "%5B%22credit_card%22%2C%22ewallet.legacy_billdesk_payment%22%5D", true)]
        [DataRow("azure", "us", "", false)]
        [DataRow("azure", "us", "%5B%22credit_card%22%2C%22ewallet.paypal%22%5D", false)]
        [DataRow("azure", "us", "%5B%22credit_card%22%2C%22ewallet.legacy_billdesk_payment%22%5D", true)]
        [DataRow("commercialstores", "us", "", false)]
        [DataRow("commercialstores", "us", "%5B%22credit_card%22%2C%22ewallet.paypal%22%5D", false)]
        [DataRow("commercialstores", "us", "%5B%22credit_card%22%2C%22ewallet.legacy_billdesk_payment%22%5D", true)]
        [DataTestMethod]
        public async Task SelectPaymentInstrument_SelectInstance_EwalletLegacyBillDeskPayment(
            string partner,
            string country,
            string allowedPaymentMethods,
            bool includeOneTimeChargeInstrumentExpected)
        {
            string operation = "selectinstance";
            string language = "en-GB";

            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&allowedPaymentMethods={allowedPaymentMethods}";

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);

                    foreach (var pidl in ReadPidlResourceFromJson(responseBody))
                    {
                        Assert.IsNotNull(pidl);
                        Assert.AreEqual(1, pidl.DataSources.Count);
                        Assert.AreEqual(includeOneTimeChargeInstrumentExpected, pidl.DataSources["paymentInstruments"].Href.Contains("includeOneTimeChargeInstrument"));
                    }
                });
        }

        [DataTestMethod]
        public async Task SelectPaymentInstrument_SelectInstance_UpiQrCommercial()
        {
            string operation = "selectinstance";

            string url = $"/v7.0/Account008/paymentMethodDescriptions?country=in&language=en-US&partner=bing&operation={operation}"; // &allowedPaymentMethods=%5B%22credit_card%22%2C%22real_time_payments.upi_qr_commercial%22%5D";
            var headers = new Dictionary<string, string>() { { "x-ms-flight", "EnableCommercialGlobalUpiQr" } };
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    Assert.IsTrue(responseBody.Contains("upi_qr_commercial"));
                });
        }

        [DataRow("azure", "in", true)]
        [DataRow("azure", "in", false)]
        [DataRow("azure", "us", true)]
        [DataRow("azure", "us", false)]
        [DataRow("bing", "in", true)]
        [DataRow("bing", "in", false)]
        [DataRow("bing", "us", true)]
        [DataRow("bing", "us", false)]
        [DataRow("commercialstores", "in", true)]
        [DataRow("commercialstores", "in", false)]
        [DataRow("commercialstores", "us", true)]
        [DataRow("commercialstores", "us", false)]
        [DataTestMethod]
        public async Task PaymentMethodDescriptions_Add_EwalletLegacyBillDeskPayment(string partner, string country, bool enablePrerequisites)
        {
            // Arrange
            PaymentInstrument expectedPI = PimsMockResponseProvider.GetPaymentInstrument("Account001", "Account001-Pi011-LegacyBillDeskPayment");
            PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(expectedPI));

            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation=add&type=legacy_billdesk_payment&family=ewallet";

            if (enablePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidlResource = ReadPidlResourceFromJson(responseBody);
                    Assert.AreEqual(1, pidlResource.Count, "Only one PIDL resource is expected");
                    Assert.IsNotNull(pidlResource[0].ClientAction, "Client action missing");
                    Assert.AreEqual(ClientActionType.ReturnContext, pidlResource[0].ClientAction.ActionType);
                    Assert.IsNotNull(pidlResource[0].ClientAction.Context, "Client action context missing");
                    Assert.AreEqual("ewallet", JObject.Parse(pidlResource[0].ClientAction.Context.ToString()).SelectToken("response.paymentMethod.paymentMethodFamily"));
                    Assert.AreEqual("legacy_billdesk_payment", JObject.Parse(pidlResource[0].ClientAction.Context.ToString()).SelectToken("response.paymentMethod.paymentMethodType"));
                });
        }

        [DataRow("cart", "us", true, "ewallet", "googlepay", false)]
        [DataRow("cart", "us", false, "ewallet", "googlepay", false)]
        [DataRow("cart", "us", true, "ewallet", "googlepay", true)]
        [DataRow("cart", "us", false, "ewallet", "googlepay", true)]
        [DataTestMethod]
        public async Task PaymentMethodDescriptions_Add_InstancePI(string partner, string country, bool enableInstancePI, string family, string type, bool completePrerequisites)
        {
            // Arrange
            PaymentInstrument expectedPI = PimsMockResponseProvider.GetPaymentInstrument("Account013", "cw_gpay_cc80ac8e-3e33-40f3-9fed-6efb5be47762");
            PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(expectedPI), HttpStatusCode.OK, null, ".*/paymentInstruments.*");

            PaymentMethodCapabilities properties = new PaymentMethodCapabilities()
            {
                NonStoredPaymentMethodId = "globalpiid",
                IsNonStoredPaymentMethod = true
            };
            PaymentInstrumentDisplayDetails display = new PaymentInstrumentDisplayDetails
            {
                Logo = "https://mock.png",
                Name = "Mock",
            };

            List<PaymentMethod> paymentMethods = new List<PaymentMethod>
            {
                new PaymentMethod
                {
                    PaymentMethodFamily = "ewallet",
                    PaymentMethodType = "googlepay",
                    Properties = properties,
                    Display = display
                }
            };

            PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods), HttpStatusCode.OK, null, ".*/paymentMethods.*");

            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation=add&type={type}&family={family}";

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            var headers = new Dictionary<string, string>();
            if (enableInstancePI)
            {
                headers.Add("x-ms-flight", "GPayApayInstancePI");
            }
            else
            {
                headers.Add("x-ms-flight", "EnableGlobalPiInAddResource");
            }

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidlResource = ReadPidlResourceFromJson(responseBody);
                    Assert.AreEqual(1, pidlResource.Count, "Only one PIDL resource is expected");
                    Assert.IsNotNull(pidlResource[0].ClientAction, "Client action missing");
                    if (enableInstancePI)
                    {
                        Assert.AreEqual(ClientActionType.ReturnContext, pidlResource[0].ClientAction.ActionType, "with instance PI flight enabled, PX should return a returnContext clientAction");
                        Assert.IsNotNull(pidlResource[0].ClientAction.Context, "Client action context missing");
                        Assert.AreEqual(family, JObject.Parse(pidlResource[0].ClientAction.Context.ToString()).SelectToken("response.paymentMethod.paymentMethodFamily"));
                        Assert.AreEqual(type, JObject.Parse(pidlResource[0].ClientAction.Context.ToString()).SelectToken("response.paymentMethod.paymentMethodType"));
                    }
                    else
                    {
                        Assert.AreEqual(ClientActionType.RestAction, pidlResource[0].ClientAction.ActionType, "without enabling instancePI, the current enable global PI flow should return a restAction clientAction");
                    }
                });
        }

        [DataRow("windowsstore", true)]
        [DataRow("windowsstore", false)]
        [DataTestMethod]
        public async Task WindowsNative_AddCC(string partner, bool completePrerequisites)
        {
            PXSettings.PartnerSettingsService.ResetToDefaults();
            PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsWindowsStore);

            Dictionary<string, string> requestHeaders = new Dictionary<string, string>()
            {
                { "x-ms-flight", "PXUsePartnerSettingsService" }
            };

            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=visa%2Cmc%2Camex%2Cdiscover&partner={partner}&operation=Add&language=en-us&family=credit_card&country=us";
            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            await GetRequest(
                url,
                requestHeaders,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    List<PIDLResource> pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource pidl in pidls)
                    {
                        if (partner == "windowsstore")
                        {
                            Assert.IsTrue(pidl.DisplayPages.Count > 1);
                            GroupDisplayHint expiryGroup = pidl.GetDisplayHintById("expiryGroup") as GroupDisplayHint;
                            List<string> expiryGroupStyleHints = new List<string>() { "width-triquarter", "gap-small" };
                            Assert.IsTrue(expiryGroup != null);
                            Assert.IsTrue(expiryGroup.StyleHints.SequenceEqual(expiryGroupStyleHints));
                        }
                    }
                });
        }

        [DataRow("windowsstore", true)]
        [DataRow("windowsstore", false)]
        [DataTestMethod]
        public async Task WindowsNative_PayPal(string partner, bool completePrerequisites)
        {
            PXSettings.PartnerSettingsService.ResetToDefaults();
            PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsWindowsStore);

            Dictionary<string, string> requestHeaders = new Dictionary<string, string>()
            {
                { "x-ms-flight", "PXUsePartnerSettingsService" }
            };

            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=paypal&partner={partner}&operation=Add&language=en-US&family=ewallet&country=US";
            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            await GetRequest(
                url,
                requestHeaders,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    List<PIDLResource> pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource pidl in pidls)
                    {
                        Assert.IsTrue(pidl.DisplayPages.Count > 0);
                        DisplayHint instructionsGroup = pidl.GetDisplayHintById("paypalInstructionTextGroup");
                        List<string> instructionsGroupStyleHintsSequence = new List<string>() { "flex-wrap", "display-textgroup" };
                        Assert.IsTrue(instructionsGroup != null);
                        Assert.IsTrue(instructionsGroup.StyleHints.SequenceEqual(instructionsGroupStyleHintsSequence));
                    }
                });
        }

        [DataRow("windowsstore", true)]
        [DataRow("windowsstore", false)]
        [DataTestMethod]
        public async Task WindowsNative_VenmoQRCode(string partner, bool completePrerequisites)
        {
            PXSettings.PartnerSettingsService.ResetToDefaults();
            PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsWindowsStore);

            Dictionary<string, string> requestHeaders = new Dictionary<string, string>()
            {
                { "x-ms-flight", "enablePaymentMethodGrouping,vnext,PxEnableVenmo,PxEnableSelectPMAddPIVenmo,PXUsePartnerSettingsService,PXUsePartnerSettingsService" }
            };

            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=venmo&partner={partner}&operation=Add&language=en-US&family=ewallet&country=US";
            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            await GetRequest(
                url,
                requestHeaders,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    List<PIDLResource> pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource pidl in pidls)
                    {
                        Assert.IsTrue(pidl.DisplayPages.Count > 0);
                        DisplayHint instructionsGroup = pidl.GetDisplayHintById("venmoInstructionTextGroup");
                        List<string> instructionsGroupSequence = new List<string>() { "flex-wrap", "display-textgroup" };
                        Assert.IsTrue(instructionsGroup != null);
                        Assert.IsTrue(instructionsGroup.StyleHints.SequenceEqual(instructionsGroupSequence));
                    }
                });
        }

        [DataRow("windowsstore")]
        [DataTestMethod]
        public async Task WindowsNative_RedeemCSVToken(string partner)
        {
            PXSettings.PartnerSettingsService.ResetToDefaults();
            PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsWindowsStore);

            Dictionary<string, string> requestHeaders = new Dictionary<string, string>()
            {
                { "x-ms-flight", "PXUsePartnerSettingsService" }
            };

            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=stored_value&partner={partner}&operation=Add&language=en-US&family=ewallet&country=US";

            await GetRequest(
                url,
                requestHeaders,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    List<PIDLResource> pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource pidl in pidls)
                    {
                        Assert.IsTrue(pidl.DisplayPages.Count > 0);
                        DisplayHint cancelNextSave = pidl.GetDisplayHintById("cancelSaveNextGroup");
                        List<string> cancelNextSaveStyleHints = new List<string>() { "padding-top-small", "gap-medium", "dock-bottom" };
                        Assert.IsTrue(cancelNextSave != null);
                        Assert.IsTrue(cancelNextSave.StyleHints.SequenceEqual(cancelNextSaveStyleHints));
                    }
                });
        }

        [DataRow("xboxsettings", true)]
        [DataRow("xboxsettings", false)]
        [DataTestMethod]
        public async Task XboxNative_RedeemCSVToken(string partner, bool useStyleHints)
        {
            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=stored_value&partner={partner}&operation=Add&language=en-US&family=ewallet&country=US";
            if (useStyleHints)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableXboxNativeStyleHints");
            }

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    List<PIDLResource> pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource pidl in pidls)
                    {
                        Assert.IsTrue(pidl.DisplayPages.Count > 0);
                        DisplayHint cancelNextSave = pidl.GetDisplayHintById("cancelSaveNextGroupGapSmall");
                        List<string> cancelNextSaveStyleHints = new List<string>() { "gap-small" };
                        Assert.IsTrue(cancelNextSave != null);
                        if (useStyleHints)
                        {
                            Assert.IsTrue(cancelNextSave.StyleHints.SequenceEqual(cancelNextSaveStyleHints));
                        }
                        else
                        {
                            Assert.IsNull(cancelNextSave.StyleHints);
                        }
                    }
                });
        }

        [DataRow("windowsstore")]
        [DataTestMethod]
        public async Task WindowsNative_SelectPM(string partner)
        {
            PXSettings.PartnerSettingsService.ResetToDefaults();
            PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsWindowsStore);
            List<string> styleHintList = new List<string>() { "direction-horizontal", "width-fill", "justify-content-space-between" };

            Dictionary<string, string> requestHeaders = new Dictionary<string, string>()
            {
                { "x-ms-flight", "enablePaymentMethodGrouping,vnext,PxEnableVenmo,PxEnableSelectPMAddPIVenmo,PXUsePartnerSettingsService" }
            };

            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Select&language=en-US&filters=%7B%22chargeThresholds%22%3A%5B0%5D%7D&country=US&allowedPaymentMethods=%5B%22credit_card%22%2C%22ewallet.paypal%22%2C%22ewallet.kakaopay%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet.venmo%22%5D";

            await GetRequest(
                url,
                requestHeaders,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);

                    Assert.IsTrue(responseBody.Contains("paymentMethodSelectPMGroupingPage"));
                    Assert.IsTrue(responseBody.Contains("paymentMethodSubGroupPage_ewallet_ewallet"));

                    List<PIDLResource> pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource pidl in pidls)
                    {
                        foreach (PageDisplayHint page in pidl.DisplayPages)
                        {
                            PropertyDisplayHint paymentMethods = page.Members.FindLast(member => member.HintId == "paymentMethod") as PropertyDisplayHint;
                            foreach (KeyValuePair<string, SelectOptionDescription> option in paymentMethods.PossibleOptions)
                            {
                                Assert.IsTrue(option.Value.DisplayContent.StyleHints.TrueForAll(item => styleHintList.Contains(item)));
                            }
                        }
                    }
                });
        }

        /// <summary>
        /// Test to validate the PiDisplay resource for SelectSingleInstance operation
        /// </summary>
        [DataRow("Account001-Pi001-Visa", "Visa ** 5678", "amcweb", HttpStatusCode.OK)] // Will expire in 06/40. Hello from the year 2021.
        [DataRow("Account001-Pi001-Visa", "John Doe ••5678 6/40", "officesmb", HttpStatusCode.OK, "defaulttemplate")]
        [DataRow("Account001-Pi001-Visa", "John Doe ••5678 6/40", "officesmb", HttpStatusCode.OK, "listpiradiobutton")]
        [DataRow("Account001-Pi001-Visa", "John Doe ••5678 6/40", "officesmb", HttpStatusCode.OK, "listpidropdown")]
        [DataRow("Account001-Pi001-Visa", "John Doe ••5678", "windowssettings", HttpStatusCode.OK)]
        [DataRow("Account001-Pi002-MC", "MasterCard ** 0002 (expired)", "amcweb", HttpStatusCode.OK)]
        [DataRow("Account001-Pi002-MC", "John Doe ••0002 (expired)", "officesmb", HttpStatusCode.OK, "defaulttemplate")]
        [DataRow("Account001-Pi002-MC", "John Doe ••0002 (expired)", "officesmb", HttpStatusCode.OK, "listpiradiobutton")]
        [DataRow("Account001-Pi002-MC", "John Doe ••0002 (expired)", "officesmb", HttpStatusCode.OK, "listpidropdown")]
        [DataRow("Account001-Pi002-MC", "John Doe ••0002 (expired)", "windowssettings", HttpStatusCode.OK)]
        [DataRow("xxxxx", "", "amcweb", HttpStatusCode.BadRequest)]
        [DataRow("xxxxx", "", "officesmb", HttpStatusCode.BadRequest, "defaulttemplate")]
        [DataRow("xxxxx", "", "officesmb", HttpStatusCode.BadRequest, "listpiradiobutton")]
        [DataRow("xxxxx", "", "officesmb", HttpStatusCode.BadRequest, "listpidropdown")]
        [DataRow("xxxxx", "", "windowssettings", HttpStatusCode.BadRequest)]
        [DataTestMethod]
        public async Task SelectPaymentInstrument_DisplayInstance(
            string piid,
            string expectedResponse,
            string partner,
            HttpStatusCode expectedStatusCode,
            string templateName = null)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?scenario=changepi&partner={partner}&operation=selectsingleinstance&country=us&language=en-US&filters=%7B%22id%22%3A%22{piid}%22%7D";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (string.Equals(partner, "officesmb", StringComparison.InvariantCultureIgnoreCase))
            {
                string pssResponse = "{\"selectSingleInstance\":{\"template\":\"templateName\",\"features\":{\"enableSelectSingleInstancePiDisplay\":{\"applicableMarkets\":[]}}}}".Replace("templateName", templateName);
                PXSettings.PartnerSettingsService.ArrangeResponse(pssResponse);
            }

            // Act
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(expectedStatusCode, responseCode);

                    if (expectedStatusCode == HttpStatusCode.OK)
                    {
                        if (partner.Equals("amcweb", StringComparison.InvariantCultureIgnoreCase) || partner.Equals("officesmb", StringComparison.InvariantCultureIgnoreCase))
                        {
                            VerifyDisplaySinglePiPidl(responseBody, expectedResponse, 0);
                        }
                        else
                        {
                            VerifyDisplaySinglePiPidl(responseBody, expectedResponse, 1);
                        }
                    }
                });

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        /// <summary>
        /// Test to validate the selectsinglepi pidl (with operation selectsingleinstance).
        /// </summary>
        [DataRow("officesmb", "defaulttemplate")]
        [DataRow("officesmb", "listpiradiobutton")]
        [DataRow("officesmb", "listpidropdown")]
        [DataTestMethod]
        public async Task SelectPaymentInstrument_selectsinglepi(string partner, string templateName)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=selectinstance&country=us&language=en-us";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (string.Equals(partner, "officesmb", StringComparison.InvariantCultureIgnoreCase))
            {
                string pssResponse = "{\"selectInstance\":{\"template\":\"templateName\",\"features\":{}}}".Replace("templateName", templateName);
                PXSettings.PartnerSettingsService.ArrangeResponse(pssResponse);
            }

            // Act
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.IsNotNull(pidls, "Pidls is not expected to be null");

                    for (int i = 0; i < pidls.Count; i++)
                    {
                        if (i != 0)
                        {
                            Assert.AreEqual("selectsinglepi", pidls[i]?.Identity["resource_id"]);
                            Assert.AreEqual("selectsingleinstance", pidls[i]?.Identity["operation"]);
                            Assert.AreEqual("SinglePaymentSelectionPage", pidls[i]?.DisplayPages[0].DisplayName);
                        }
                        else
                        {
                            Assert.AreEqual("selectpi", pidls[i]?.Identity["resource_id"]);
                            Assert.AreEqual("selectinstance", pidls[i]?.Identity["operation"]);
                            Assert.AreEqual("PaymentInstrumentSelectionPage", pidls[i]?.DisplayPages[0].DisplayName);
                        }
                    }
                });

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        /// <summary>
        /// Test to validate the selectsinglepinone pidl (with operation selectsingleinstance) when there are no PIs.
        /// </summary>
        [DataRow("officesmb", "defaulttemplate")]
        [DataRow("officesmb", "listpiradiobutton")]
        [DataRow("officesmb", "listpidropdown")]
        [DataTestMethod]
        public async Task SelectPaymentInstrument_selectsinglepinone(string partner, string templateName)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=selectinstance&country=us&language=en-us";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (string.Equals(partner, "officesmb", StringComparison.InvariantCultureIgnoreCase))
            {
                string pssResponse = "{\"selectInstance\":{\"template\":\"templateName\",\"features\":{\"enableSingleInstancePidls\":{\"applicableMarkets\":[]}}}}".Replace("templateName", templateName);
                PXSettings.PartnerSettingsService.ArrangeResponse(pssResponse);
            }

            // Mock listPI call response with empty list
            PXSettings.PimsService.ArrangeResponse("[]", urlPattern: ".*paymentInstruments.*");

            // Act
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.IsNotNull(pidls, "Pidls is not expected to be null");
                    Assert.AreEqual(2, pidls.Count, "Pidls count is not as expected");

                    Assert.AreEqual("selectpinone", pidls[0]?.Identity["resource_id"]);
                    Assert.AreEqual("selectinstance", pidls[0]?.Identity["operation"]);
                    Assert.AreEqual("NoPaymentInstrumentSelectionPage", pidls[0]?.DisplayPages[0].DisplayName);

                    Assert.AreEqual("selectsinglepinone", pidls[1]?.Identity["resource_id"]);
                    Assert.AreEqual("selectsingleinstance", pidls[1]?.Identity["operation"]);
                    Assert.AreEqual("NoPaymentInstrumentSelectionPage", pidls[1]?.DisplayPages[0].DisplayName);
                });

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        /// <summary>
        /// Test to validate the selectsinglepinoactive pidl (with operation selectsingleinstance) when there are no active or expired PIs.
        /// </summary>
        [DataRow("officesmb", "defaulttemplate", "NoPaymentInstrumentSelectionPage")]
        [DataRow("officesmb", "listpiradiobutton", "NoActivePaymentInstrumentSelectionPage")]
        [DataRow("officesmb", "listpidropdown", "NoActivePaymentInstrumentSelectionPage")]
        [DataTestMethod]
        public async Task SelectPaymentInstrument_selectsinglepinoactive(string partner, string templateName, string selectSinlgeInstancePageDisplayName)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=selectinstance&country=us&language=en-us";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (string.Equals(partner, "officesmb", StringComparison.InvariantCultureIgnoreCase))
            {
                string pssResponse = "{\"selectInstance\":{\"template\":\"templateName\",\"features\":{\"enableSingleInstancePidls\":{\"applicableMarkets\":[]}, \"useDisabledPIsForSelectInstance\":{\"applicableMarkets\":[]}}}}".Replace("templateName", templateName);
                PXSettings.PartnerSettingsService.ArrangeResponse(pssResponse);
            }

            // Mock listPI call response with expired pi
            string listPIResponse = "[{\"id\":\"FgGmBAAAAAApAACA\",\"accountId\":\"08444683-1a47-4762-9f87-3c5da05d0ee9\",\"paymentMethod\":{\"paymentMethodType\":\"visa\",\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"splitPaymentSupported\":true,\"supportedOperations\":[\"authorize\",\"charge\",\"refund\",\"chargeback\"],\"taxable\":false,\"providerRemittable\":false},\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Visa\",\"logo\":\"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_visa.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_visa.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_visa.svg\"}]}},\"status\":\"Active\",\"creationDateTime\":\"2017-05-10T20:39:40.257\",\"lastUpdatedDateTime\":\"2017-05-10T20:39:40.257\",\"details\":{\"exportable\":true,\"accountHolderName\":\"John Doe\",\"address\":{\"address_line1\":\"1 Microsoft Way\",\"city\":\"Redmond\",\"region\":\"wa\",\"postal_code\":\"98052\",\"country\":\"US\"},\"lastFourDigits\":\"5678\",\"expiryYear\":\"2014\",\"expiryMonth\":\"6\",\"picvRequired\":false,\"balance\":0}}]";
            PXSettings.PimsService.ArrangeResponse(listPIResponse, urlPattern: ".*paymentInstruments.*");

            // Act
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.IsNotNull(pidls, "Pidls is not expected to be null");
                    Assert.AreEqual(2, pidls.Count, "Pidls count is not as expected");

                    Assert.AreEqual("selectpi", pidls[0]?.Identity["resource_id"]);
                    Assert.AreEqual("selectinstance", pidls[0]?.Identity["operation"]);
                    Assert.AreEqual("PaymentInstrumentSelectionPage", pidls[0]?.DisplayPages[0].DisplayName);

                    // Validate selectsinglepinoactive pidl
                    Assert.AreEqual("selectsinglepinoactive", pidls[1]?.Identity["resource_id"]);
                    Assert.AreEqual("selectsingleinstance", pidls[1]?.Identity["operation"]);
                    Assert.AreEqual(selectSinlgeInstancePageDisplayName, pidls[1]?.DisplayPages[0].DisplayName);
                });

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        /// <summary>
        /// Test to validate the selectsinglebackup and selectsinglepicsv pidl resources when stored_value has less balance than ChargeThreshold.
        /// </summary>
        [DataRow("officesmb", "defaulttemplate")]
        [DataRow("officesmb", "listpiradiobutton")]
        [DataRow("officesmb", "listpidropdown")]
        [DataTestMethod]
        public async Task SelectPaymentInstrument_selectsinglebackup_and_picsv(string partner, string templateName)
        {
            // Arrange
            // ChargeThreshold should be higher than the balance of stored_value pi to trigger the backup & picsv flow
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=selectinstance&country=us&language=en-us&filters=%7B%22splitPaymentSupported%22%3Atrue%2C%22chargeThreshold%22%3A%2212%22%7D";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (string.Equals(partner, "officesmb", StringComparison.InvariantCultureIgnoreCase))
            {
                string pssResponse = "{\"selectInstance\":{\"template\":\"templateName\",\"features\":{\"enableSingleInstancePidls\":{\"applicableMarkets\":[]}}}}".Replace("templateName", templateName);
                PXSettings.PartnerSettingsService.ArrangeResponse(pssResponse);
            }

            // Mock listPI call response with stored_value to test backup & picsv pidls
            string listPIResponse = "[{\"id\":\"fO3YZAAAAAADAACA\",\"accountId\":\"c3dc768c-d3a8-4ebb-9eb7-c7ef42f3c051\",\"status\":\"active\",\"paymentMethod\":{\"paymentMethodFamily\":\"ewallet\",\"paymentMethodType\":\"stored_value\",\"display\":{\"name\":\"Microsoft account balance\",\"logo\":\"https://pmservices.cp.microsoft.com/staticresourceservice/images/v3/logo_microsoft.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"https://pmservices.cp.microsoft.com/staticresourceservice/images/v3/logo_microsoft.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"https://pmservices.cp.microsoft.com/staticresourceservice/images/v4/logo_microsoft.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":false,\"soldToAddressRequired\":true,\"supportedOperations\":[\"authorize\",\"charge\",\"refund\",\"chargeback\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":43200,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0},\"exclusionTags\":[\"StoredValue\",\"LegacySubscriptions\",\"Subscriptions\"]},\"details\":{\"currency\":\"USD\",\"balance\":10.0},\"creationDateTime\":\"2017-04-19T21:04:08.477\",\"lastUpdatedDateTime\":\"2017-04-19T21:04:08.477\"},{\"id\":\"FgGmBAAAAAApAACA\",\"accountId\":\"08444683-1a47-4762-9f87-3c5da05d0ee9\",\"paymentMethod\":{\"paymentMethodType\":\"visa\",\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"splitPaymentSupported\":true,\"supportedOperations\":[\"authorize\",\"charge\",\"refund\",\"chargeback\"],\"taxable\":false,\"providerRemittable\":false},\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Visa\",\"logo\":\"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_visa.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v3/logo_visa.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_visa.svg\"}]}},\"status\":\"Active\",\"creationDateTime\":\"2017-05-10T20:39:40.257\",\"lastUpdatedDateTime\":\"2017-05-10T20:39:40.257\",\"details\":{\"exportable\":true,\"accountHolderName\":\"John Doe\",\"address\":{\"address_line1\":\"1 Microsoft Way\",\"city\":\"Redmond\",\"region\":\"wa\",\"postal_code\":\"98052\",\"country\":\"US\"},\"lastFourDigits\":\"5678\",\"expiryYear\":\"2020\",\"expiryMonth\":\"6\",\"picvRequired\":false,\"balance\":0}}]";
            PXSettings.PimsService.ArrangeResponse(listPIResponse, urlPattern: ".*paymentInstruments.*");

            // Act
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.IsNotNull(pidls, "Pidls is not expected to be null");

                    Assert.AreEqual("selectpi", pidls[0]?.Identity["resource_id"]);
                    Assert.AreEqual("selectinstance", pidls[0]?.Identity["operation"]);
                    Assert.AreEqual("PaymentInstrumentSelectionPage", pidls[0]?.DisplayPages[0].DisplayName);

                    // Validate selectsinglebackup pidl
                    var selectsinglebackupPidl = pidls.Where(pidl => string.Equals("selectsinglebackup", pidl.Identity["resource_id"])).FirstOrDefault();
                    Assert.IsNotNull(selectsinglebackupPidl, "selectsinglebackupPidl expected to be not null");
                    Assert.AreEqual("SinglePaymentSelectionBackupPage", selectsinglebackupPidl.DisplayPages[0].DisplayName);
                    Assert.AreEqual("selectsingleinstance", selectsinglebackupPidl.Identity["operation"]);

                    // Validate selectsinglepicsv pidl
                    string csvpidlPageName = string.Equals(templateName, "defaulttemplate") ? "SinglePaymentSelectionPage" : "CsvPaymentSelectionPage";
                    var selectsinglepicsvPidl = pidls.Where(pidl => string.Equals("selectsinglepicsv", pidl.Identity["resource_id"])).FirstOrDefault();
                    Assert.IsNotNull(selectsinglepicsvPidl, "selectsinglepicsvPidl expected to be not null");
                    Assert.AreEqual(csvpidlPageName, selectsinglepicsvPidl.DisplayPages[0].DisplayName);
                    Assert.AreEqual("selectsingleinstance", selectsinglepicsvPidl.Identity["operation"]);
                });

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("2020", "09", 2020, 10, 1, 0)]
        [DataRow("2020", "09", 2020, 10, 2, -1)]
        [DataRow("2020", "09", 2020, 9, 30, 1)]
        [DataRow("2020", "09", 2020, 9, 1, 30)]
        [DataRow("2020", "12", 2021, 1, 1, 0)]
        [DataRow("2020", "12", 2020, 1, 1, 366)] // Leap year
        [DataRow("2019", "12", 2019, 1, 1, 365)]
        [DataRow("2019", "12", 2021, 1, 1, -366)] // Leap year
        [DataRow("2018", "12", 2020, 1, 1, -365)]
        [DataRow("2018", "12", 2021, 1, 1, -731)]
        [DataRow("2020", "12", 2019, 1, 1, 731)]
        [DataTestMethod]
        public void GetDaysUntilExpiredTest(string expiryYear, string expiryMonth, int year, int month, int day, int expectedDaysUntilExpired)
        {
            DateTime mockDate = new DateTime(year, month, day);

            Microsoft.Commerce.Payments.PimsModel.V4.PaymentInstrument pi = new Microsoft.Commerce.Payments.PimsModel.V4.PaymentInstrument();
            pi.PaymentInstrumentDetails = new Microsoft.Commerce.Payments.PimsModel.V4.PaymentInstrumentDetails();
            pi.PaymentInstrumentDetails.ExpiryMonth = expiryMonth;
            pi.PaymentInstrumentDetails.ExpiryYear = expiryYear;

            int daysUntilExpired = PaymentSelectionHelper.GetDaysUntilExpired(pi, mockDate);

            Assert.AreEqual<int>(daysUntilExpired, expectedDaysUntilExpired);
        }

        [DataRow("cart", "add", "BR", "pt-BR", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "brazil_cpf_id", null, true, 0, 4)]
        [DataRow("cart", "add", "BR", "pt-BR", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "brazil_cpf_id", "PXEnableTaxIdInPT", true, 0, 4)]
        [DataRow("xbox", "add", "BR", "pt-BR", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "brazil_cpf_id", null, true, 3, 1)]
        [DataRow("xbox", "add", "BR", "pt-BR", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "brazil_cpf_id", "PXEnableTaxIdInPT", true, 3, 1)]
        [DataRow("amcweb", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("amcweb", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 5)]
        [DataRow("amcxbox", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 3, 1)]
        [DataRow("amcxbox", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 3, 1)]
        [DataRow("cart", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("cart", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 4)]
        [DataRow("officeoobe", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("officeoobe", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 5)]
        [DataRow("oxooobe", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("oxooobe", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 7)]
        [DataRow("northstarweb", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("northstarweb", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 5)]
        [DataRow("oxodime", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("oxodime", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 4)]
        [DataRow("oxowebdirect", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("oxowebdirect", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 4)]
        [DataRow("setupoffice", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("setupoffice", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 4)]
        [DataRow("setupofficesdx", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("setupofficesdx", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 4)]
        [DataRow("webblends", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("webblends", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 4)]
        [DataRow("webblends_inline", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("webblends_inline", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 4)]
        [DataRow("xbox", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 3, 1)]
        [DataRow("xbox", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 3, 1)]
        [DataRow("xboxnative", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("xboxnative", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, -1)]
        [DataRow("xboxweb", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", null, false, 0, 4)]
        [DataRow("xboxweb", "add", "PT", "pt-PT", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "vat_id", "PXEnableTaxIdInPT", true, 0, 4)]
        [DataTestMethod]
        public async Task AddPaymentMethod_NoTaxId_Consumer_ReturnsLinkedProfilePidl(
            string partner,
            string operation,
            string country,
            string language,
            string family,
            string type,
            string completePrerequisites,
            string taxIdType,
            string flight,
            bool shouldHaveProfileAndTaxId,
            int taxIdOnPage,
            int taxIdInMember)
        {
            if (flight != null)
            {
                PXFlightHandler.AddToEnabledFlights(flight);
            }

            // Arrange: Account001 has completed profile but doesn't have taxid, profile Pidl is required here.
            string accountId = "Account001";
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites={completePrerequisites}";

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    pidls.ForEach(
                        pidl =>
                        {
                            Assert.AreEqual(country.ToLower(), pidl.Identity["country"], true);

                            if (shouldHaveProfileAndTaxId)
                            {
                                Assert.AreEqual(GlobalConstants.PidlDescriptionTypes.Profile, pidl.Identity["description_type"]);
                                Assert.AreEqual("consumerprerequisites", pidl.Identity["type"]);
                                Assert.AreEqual("update", pidl.Identity["operation"]);

                                // Linked pidl resouce taxid should presents.
                                Assert.AreEqual("taxId", pidl.LinkedPidls[0].Identity["description_type"]);
                                Assert.AreEqual(taxIdType, pidl.LinkedPidls[0].Identity["type"]);
                                Assert.AreEqual(country.ToLower(), pidl.LinkedPidls[0].Identity["country_code"]);

                                // Verify that we have a tax ID on the page and member specified in the arguments. Xbox native is a special case with deeply nested members. The path is hardcoded here to keep things simple.
                                Assert.IsTrue(pidl.DisplayPages.Count > taxIdOnPage, $"Tax ID expected on page {taxIdOnPage} but we have only {pidl.DisplayPages.Count} pages");
                                var dp = pidl.DisplayPages[taxIdOnPage];
                                Assert.IsTrue(dp.Members.Count > taxIdInMember, $"Tax ID expected on Page {taxIdOnPage} in member {taxIdInMember} but we have only {dp.Members.Count} members");

                                PidlContainerDisplayHint pcdh;
                                if (partner == "xboxnative")
                                {
                                    var cdh = dp.Members[0] as ContainerDisplayHint;
                                    cdh = cdh.Members[0] as ContainerDisplayHint;
                                    cdh = cdh.Members[2] as ContainerDisplayHint;
                                    pcdh = cdh.Members[1] as PidlContainerDisplayHint;
                                }
                                else
                                {
                                    pcdh = dp.Members[taxIdInMember] as PidlContainerDisplayHint;
                                }

                                Assert.IsNotNull(pcdh, "Expected reference to PIDL container not found on page {taxIdOnPage} in member {taxIdInMember}");
                                Assert.AreEqual("taxId", pcdh.LinkedPidlIdentity["description_type"], true);

                                // Verify that other members follow the tax ID. This will catch missing tax IDs on xbox and the amcxbox pages. Xbox native is already verified above and ignored here. All other partners also have one or more controls following the tax ID.
                                Assert.IsTrue(partner == "xboxnative" || dp.Members.Count > taxIdInMember + 1, $"Expected other controls to follow the tax ID.");
                            }
                            else
                            {
                                Assert.AreEqual(GlobalConstants.PidlDescriptionTypes.PaymentMethod, pidl.Identity["description_type"]);
                                Assert.AreEqual("add", pidl.Identity["operation"]);

                                // linked pidl resouce should be the address
                                Assert.AreEqual("address", pidl.LinkedPidls[0].Identity["description_type"]);
                            }
                        });
                });
        }

        /// <summary>
        /// Test to valdate the consumerprerequisitesv3 profile page when the feature useProfilePrerequisitesV3 is enabled or disabled.
        /// </summary>
        [DataRow("officesmb", "add", "fr", "credit_card", "visa%2Camex%2Cmc%2Chipercard", true)]
        [DataRow("officesmb", "add", "fr", "credit_card", "visa%2Camex%2Cmc%2Chipercard", false)]
        [DataRow("officesmb", "update", "fr", "credit_card", "visa%2Camex%2Cmc%2Chipercard", true)]
        [DataRow("officesmb", "update", "fr", "credit_card", "visa%2Camex%2Cmc%2Chipercard", false)]
        [DataTestMethod]
        public async Task AddPaymentMethod_Profile_ConsumerPrerequisitesV3(string partner, string operation, string country, string family, string type, bool enableFeatureProfilePrerequisitesV3)
        {
            // Arrange
            string url = $"/v7.0/ConsumerAccountNoAddress/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites=true";
            string pssResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{}},\"update\":{\"template\":\"defaulttemplate\",\"features\":{}}}";

            if (enableFeatureProfilePrerequisitesV3)
            {
                pssResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"useProfilePrerequisitesV3\":{\"applicableMarkets\":[]}}},\"update\":{\"template\":\"defaulttemplate\",\"features\":{\"useProfilePrerequisitesV3\":{\"applicableMarkets\":[]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(pssResponse);

            // Act
            await GetRequest(
                url,
                null,
                new List<string>() { "PXUseJarvisV3ForCompletePrerequisites" },
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    pidls.ForEach(
                        pidl =>
                        {
                            Assert.AreEqual(country.ToLower(), pidl.Identity["country"], true);

                            Assert.AreEqual(GlobalConstants.PidlDescriptionTypes.Profile, pidl.Identity["description_type"]);
                            Assert.AreEqual(enableFeatureProfilePrerequisitesV3 ? "consumerprerequisitesv3" : "consumerprerequisites", pidl.Identity["type"]);
                            Assert.AreEqual("update", pidl.Identity["operation"]);

                            // For consumerprerequisitesv3 etag and If-Match headers are added to pidlAction
                            ButtonDisplayHint submitButton = pidl.GetDisplayHintById("submitButton") as ButtonDisplayHint;
                            var context = JsonConvert.SerializeObject(submitButton.Action.Context);
                            Assert.IsTrue(enableFeatureProfilePrerequisitesV3 ? context.Contains("etag") : !context.Contains("etag"));
                            Assert.IsTrue(enableFeatureProfilePrerequisitesV3 ? context.Contains("If-Match") : !context.Contains("If-Match"));
                        });
                });
        }

        [DataRow("PT", "webblends", "add", "PT123456789", "XX123456789")]
        [DataRow("PT", "webblends", "add", "123456789", "12345678")]
        [DataRow("PT", "webblends", "add", "PT123456789", "PT12345678")]
        [DataRow("PT", "webblends", "add", "EU123", "PT")]
        [DataTestMethod]
        public async Task GetTaxIdDescriptions_ValidateTaxIdRegEx(string country, string partner, string operation, string validTaxId, string invalidTaxId)
        {
            PXFlightHandler.AddToEnabledFlights("PXEnableTaxIdInPT");

            var scenarios = new List<string> { "withCountryDropdown" };
            if (string.Equals(partner, PXCommonConstants.PartnerNames.CommercialStores))
            {
                scenarios.Add("departmentalPurchase");
            }

            foreach (var scenario in scenarios)
            {
                string url = $"/v7.0/Account001/taxidDescriptions?country={country}&language=en-US&type=commercial_tax_id&partner={partner}&operation={operation}&scenario={scenario}";
                List<PIDLResource> pidls = await GetPidlFromPXService(url);
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                ValidatePidlPropertyRegex(pidls[0], "value", validTaxId, true);
                ValidatePidlPropertyRegex(pidls[0], "value", invalidTaxId, false);
            }
        }

        [DataRow("cart", "add", "us", "pt-BR", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true")]
        [DataTestMethod]
        public async Task AddPaymentMethod_NoAddress_Consumer_ReturnsPaymentMethodlinkedAddressPidl(
             string partner,
             string operation,
             string country,
             string language,
             string family,
             string type,
             string completePrerequisites)
        {
            // Arrange: AccountNoAddress doesn't have address, therefore address pidl should be linked
            string accountId = "AccountNoAddress";
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites={completePrerequisites}";

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.IsNotNull(pidls[0]);
                    var pidl = pidls[0];

                    // main pidl should be payment method description
                    Assert.AreEqual("paymentMethod", pidl.Identity["description_type"]);
                    Assert.AreEqual(operation, pidl.Identity["operation"]);
                    Assert.AreEqual(country, pidl.Identity["country"]);

                    // verify CCValidationFailedRetryable setup
                    ServerErrorCode validationFailed;
                    pidl.PidlResourceStrings.ServerErrorCodes.TryGetValue("ValidationFailed", out validationFailed);
                    Assert.IsNotNull(validationFailed);
                    Assert.AreEqual(validationFailed.RetryPolicy.RetryPolicyType, RetryPolicyType.limitedRetry);
                    Assert.AreEqual(validationFailed.RetryPolicy.Context.MaxRetryCount, 3);
                    Assert.AreEqual("accountHolderName,accountToken,cvvToken,expiryMonth,expiryYear,address_line1,address_line2,address_line3,city,region,country,postal_code", validationFailed.Target);

                    // linked pidl resouce addresses should presents
                    Assert.AreEqual("address", pidl.LinkedPidls[0].Identity["description_type"]);
                    Assert.AreEqual("billing", pidl.LinkedPidls[0].Identity["type"]);
                    Assert.AreEqual(country, pidl.LinkedPidls[0].Identity["country"]);
                });
        }

        [DataRow("commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "true", "EmpAccount001", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU=")]
        [DataRow("commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "true", "OrgAccount001", "type=QUFE,email=eXVzdWZAc2FsZXNzaWx2ZXJzdGFyLm9ubWljcm9zb2Z0LmNvbQ==,tid=NmM2ZDI5YzctNGM0Zi00ZmMzLWEwZjMtMGYyMThiZjBhMDlh,oid=YTYxYzA4NGEtMTc2Yy00Nzk2LTlkNjctNTU2M2I2ZTBhM2Fj,context=bXktb3Jn")]
        [DataRow("cart", "add", "us", "pt-BR", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true", "Account001", "")]
        [DataTestMethod]
        public async Task AddPaymentMethod_FullProfile_ReturnPaymentMethod(
            string partner,
            string operation,
            string country,
            string language,
            string family,
            string type,
            string completePrerequisites,
            string accountId,
            string authinfo)
        {
            // verify for consumer, employee and org accounts
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites={completePrerequisites}";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", authinfo
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    VerifyPaymentMethodPidl(responseBody, operation, country);
                });
        }

        [DataRow("commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "true")]
        [DataRow("azure", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "true")]
        [DataTestMethod]
        public async Task AddPaymentMethod_NoAddress_Employee_PXAddHiddenLinkedProfilePIDLToAddCC(string partner, string operation, string country, string language, string family, string type, string completePrerequisites)
        {
            string accountId = "EmpAccountNoAddress";
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites={completePrerequisites}";

            if (string.Equals(partner, "azure", StringComparison.OrdinalIgnoreCase))
            {
                PXFlightHandler.AddToEnabledFlights("PXEnablePreReqForAzure");
            }

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    VerifyProfilePidl(responseBody, "employee", "update", country);
                });
        }

        [DataRow("commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true)]
        [DataRow("commercialstores", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, false)]
        [DataRow("azure", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, true)]
        [DataRow("azure", "add", "US", "en-US", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", true, false)]
        [DataTestMethod]
        public async Task AddPaymentMethod_NoProfile_Employee_PXAddHiddenLinkedProfilePIDLToAddCC(string partner, string operation, string country, string language, string family, string type, bool completePrerequisites, bool ignoreLinkedPidlError)
        {
            string accountId = "EmpAccountNoProfile";
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites={completePrerequisites}";

            if (!ignoreLinkedPidlError)
            {
                PXFlightHandler.AddToEnabledFlights("PXThrowOnLinkedProfilePidlErrors");
            }

            if (string.Equals(partner, "azure", StringComparison.OrdinalIgnoreCase))
            {
                PXFlightHandler.AddToEnabledFlights("PXEnablePreReqForAzure");
            }

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            // MAC Prereq
            // Show Add PI page with linked profile pidl instead of prereq page
            // No profile fields shown on UI, pidlsdk is responsible for prefilling the data
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    pidls.ForEach(
                        pidl =>
                        {
                            Assert.AreEqual("paymentMethod", pidl.Identity["description_type"]);
                            Assert.AreEqual(operation, pidl.Identity["operation"]);
                            Assert.AreEqual(country, pidl.Identity["country"], true);
                            Assert.AreEqual(family, pidl.Identity["family"]);

                            // linked pidl resouce addresses should presents
                            var linkedPidl = pidl.LinkedPidls[0];
                            Assert.AreEqual("profile", linkedPidl.Identity["description_type"]);
                            Assert.AreEqual("employee", linkedPidl.Identity["type"]);
                            Assert.AreEqual(country, linkedPidl.Identity["country"], true);
                            Assert.AreEqual("add", linkedPidl.Identity["operation"]);

                            string terminatingErrorHandling = null;
                            bool hasTerminatingErrorHandlingValue = linkedPidl.ScenarioContext.TryGetValue(Constants.ScenarioContextsFields.TerminatingErrorHandling, out terminatingErrorHandling);
                            if (ignoreLinkedPidlError)
                            {
                                Assert.AreEqual(Constants.TerminatingErrorHandlingMethods.Ignore, terminatingErrorHandling);
                            }
                            else
                            {
                                Assert.IsFalse(hasTerminatingErrorHandlingValue);
                            }
                        });
                });
        }

        [DataRow("EmpAccount001", true, true, true, true, false, false, false, "", "")]
        [DataRow("EmpAccountNoProfile", false, null, null, null, true, true, true, "Post", "https://{jarvis-endpoint}/JarvisCM/{userId}/profiles")]
        [DataRow("EmpAccountInvalidAddress", true, true, true, false, true, false, true, "Patch", "https://{jarvis-endpoint}/JarvisCM/{userId}/profiles/EmpAccountInvalidAddress-EmpProfile001")]
        [DataRow("EmpAccountNoAddress", true, false, null, null, true, true, true, "Patch", "https://{jarvis-endpoint}/JarvisCM/{userId}/profiles/EmpAccountNoAddress-EmpProfile002")]
        [DataRow("EmpAccountNoAddressName", true, true, false, true, true, true, false, "Patch", "https://{jarvis-endpoint}/JarvisCM/{userId}/profiles/EmpAccountNoAddressName-EmpProfile001")]
        [DataRow("EmpAccountInvalidAddressNameAndInvalidAddress", true, true, false, false, true, true, true, "Patch", "https://{jarvis-endpoint}/JarvisCM/{userId}/profiles/EmpAccountInvalidAddressNameAndInvalidAddress-EmpProfile001")]
        [DataTestMethod]
        public async Task AddPaymentMethod_DepartmentalPurchase_NoAddress_Employee_ReturnsPaymentMethodLinkedAddresses(string accountId, bool profileExist, bool addressExist, bool addressNameValid, bool addressAVSValid, bool hasProfilePidl, bool hasAddressNameOnPidl, bool hasAddressOnPidl, string httpMethod, string submitUrl)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner=commercialstores&country=us&language=en-us&operation=add&family=credit_card&completePrerequisites=true&scenario=departmentalPurchase";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.AreEqual(4, pidls.Count);
                    var pidl = pidls[0];

                    // main pidl should be payment method description
                    Assert.AreEqual("paymentMethod", pidl.Identity["description_type"]);
                    Assert.AreEqual("add", pidl.Identity["operation"]);
                    Assert.AreEqual("us", pidl.Identity["country"], true);
                    Assert.AreEqual("credit_card", pidl.Identity["family"]);

                    if (profileExist && addressExist && addressNameValid && addressAVSValid)
                    {
                        Assert.AreEqual(pidl.LinkedPidls != null, hasProfilePidl);
                    }
                    else
                    {
                        // linked pidl resouce profile with address should be presented
                        var linkedPidl = pidl.LinkedPidls[0];
                        Assert.AreEqual("profile", linkedPidl.Identity["description_type"]);
                        Assert.AreEqual("employee", linkedPidl.Identity["type"]);
                        Assert.IsNotNull(linkedPidl.DataDescription["default_address"]);

                        List<PIDLResource> subPidl = linkedPidl.DataDescription["default_address"] as List<PIDLResource>;
                        Dictionary<string, object> addressDictionary = subPidl[0].DataDescription;

                        // check first name & last name in pidl
                        Assert.AreEqual(addressDictionary.ContainsKey("first_name"), hasAddressNameOnPidl);
                        Assert.AreEqual(addressDictionary.ContainsKey("last_name"), hasAddressNameOnPidl);
                        if (hasAddressNameOnPidl)
                        {
                            PropertyDescription firstName = addressDictionary["first_name"] as PropertyDescription;
                            Assert.IsTrue(firstName.IsOptional.HasValue);
                            Assert.IsFalse(firstName.IsOptional.Value);
                            PropertyDescription lastName = addressDictionary["last_name"] as PropertyDescription;
                            Assert.IsTrue(lastName.IsOptional.HasValue);
                            Assert.IsFalse(lastName.IsOptional.Value);
                        }

                        // check address in pidl
                        Assert.AreEqual(addressDictionary.ContainsKey("address_line1"), hasAddressOnPidl);

                        // check submit url in pidl
                        ButtonDisplayHint submitButton = linkedPidl.GetDisplayHintById("saveButtonHidden") as ButtonDisplayHint;
                        Assert.IsTrue(submitButton.IsHidden.HasValue);
                        Assert.IsTrue(submitButton.IsHidden.Value);
                        var context = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(submitButton.Action.Context));
                        Assert.IsTrue(string.Equals(context.Method, httpMethod, StringComparison.OrdinalIgnoreCase));
                        Assert.IsTrue(string.Equals(context.Href, submitUrl, StringComparison.OrdinalIgnoreCase));
                    }
                });
        }

        [DataRow("EmpAccountNoProfile", 5, "azure")]
        [DataRow("EmpAccountNoProfile", 5, "commercialstores")]
        [DataTestMethod]
        public async Task AddPaymentMethod_MACPreqreq(string accountId, int index, string partner)
        {
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?partner={partner}&country=us&language=en-us&operation=add&family=credit_card&completePrerequisites=true";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.AreEqual(4, pidls.Count);
                    foreach (PIDLResource pidl in pidls)
                    {
                        // main pidl should be payment method description
                        Assert.AreEqual("paymentMethod", pidl.Identity["description_type"]);
                        Assert.AreEqual("add", pidl.Identity["operation"]);
                        Assert.AreEqual("us", pidl.Identity["country"], true);
                        Assert.AreEqual("credit_card", pidl.Identity["family"]);

                        // pidlContianer should be moved to the right position
                        foreach (PageDisplayHint displayPage in pidl.DisplayPages)
                        {
                            int targetIndex = displayPage.Members.FindIndex(hint => hint.HintId == "pidlContainer0");
                            Assert.AreEqual(targetIndex, index);
                        }
                    }
                });
        }

        [DataRow("webblends")]
        [DataRow("xbox")]
        [DataRow("cart")]
        [DataRow("defaulttemplate")]
        [DataTestMethod]
        public async Task AddPaymentMethod_Alipay(string partners)
        {
            // Arrange: Account001 has completed profile and country is us, therefore PaymentMethod Pidl should be returned.
            string accountId = "Account001";
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?type=alipay_billing_agreement&partner={partners}&operation=Add&country=cn&language=zh-CN&family=ewallet&completePrerequisites=true";

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.AreEqual(1, pidls.Count);

                    if (pidls[0].DisplayPages != null)
                    {
                        var alipayTouGroup = pidls[0].GetDisplayHintById("alipayBillingAgreementFooterTextGroup");
                        Assert.IsNotNull(alipayTouGroup, "Page expected to have the Alipay TOU link.");
                    }
                });
        }

        [DataRow("webblends", "add", "us", "pt-BR", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true")]
        [DataRow("oxowebdirect", "add", "us", "pt-BR", "credit_card", "visa%2Camex%2Cmc%2Chipercard", "true")]
        [DataTestMethod]
        public async Task AddPaymentMethod_PXReorderCCAndCardholder_ReturnsPaymentMethodCardNumberBeforeCardHolderName(string partner, string operation, string country, string language, string family, string type, string completePrerequisites)
        {
            // Arrange: Account001 has completed profile and country is us, therefore PaymentMethod Pidl should be returned.
            string accountId = "Account001";
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}&completePrerequisites={completePrerequisites}";

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);

                    pidls.ForEach(
                        pidl =>
                        {
                            Assert.AreEqual(GlobalConstants.PidlDescriptionTypes.PaymentMethod, pidl.Identity["description_type"]);
                            Assert.AreEqual(operation, pidl.Identity["operation"]);
                            Assert.AreEqual(country.ToLower(), pidl.Identity["country"]);
                            pidl.DisplayPages.ForEach(
                                page =>
                                {
                                    if (page.DisplayName == "AccountDetailsPage")
                                    {
                                        int cardholderNameIndex = page.Members.FindIndex(displayHint => displayHint.HintId == "cardholderName");
                                        int cardNumberIndex = pidl.Identity["type"] != "amex" ? page.Members.FindIndex(displayHint => displayHint.HintId == "cardNumber") : page.Members.FindIndex(displayHint => displayHint.HintId == "cardNumberAmex");
                                        Assert.IsTrue(cardholderNameIndex != -1 && cardNumberIndex != -1 && cardholderNameIndex > cardNumberIndex);
                                    }
                                });
                        });
                });
        }

        [DataRow("webblends", "fr", "fr-FR", "visa%2Cmc", false, true)]
        [DataRow("webblends", "fr", "fr-FR", "visa%2Cmc", true, false)]
        [DataRow("webblends", "us", "en-US", "visa%2Cmc", false, false)]
        [DataRow("webblends", "us", "en-US", "visa%2Cmc", true, false)]
        [DataRow("oxowebdirect", "fr", "fr-FR", "visa%2Cmc", false, true)]
        [DataRow("oxowebdirect", "fr", "fr-FR", "visa%2Cmc", true, false)]
        [DataRow("amcxbox", "fi", "fi-FI", "visa%2Camex%2Cmc", false, false)]
        [DataRow("amcxbox", "fi", "fi-FI", "visa%2Camex%2Cmc", true, false)]
        [DataRow("xbox", "pt", "nl-PT", "amex%2Cmc", false, true)]
        [DataRow("xbox", "pt", "nl-PT", "amex%2Cmc", true, false)]
        [DataRow("xbox", "us", "en-US", "amex%2Cmc", false, false)]
        [DataRow("xbox", "us", "en-US", "amex%2Cmc", true, false)]
        [DataRow("azure", "fr", "fr-FR", "visa%2Camex", false, true)]
        [DataRow("azure", "fr", "fr-FR", "visa%2Camex", true, true)]
        [DataRow("azure", "us", "en-US", "visa%2Camex", true, false)]
        [DataRow("officesmb", "fr", "fr-FR", "amex%2Cmc", false, true, true)]
        [DataRow("officesmb", "us", "en-US", "amex%2Cmc", false, false, true)]
        [DataRow("testPartnerWithoutSMD", "us", "en-US", "amex%2Cmc", false, false)]
        [DataRow("testPartnerWithoutSMD", "fr", "en-US", "amex%2Cmc", false, false)]
        [DataTestMethod]
        public async Task AddPaymentMethod_ValidateSingleMarketDirective(string partner, string country, string language, string type, bool fixCountrySelection, bool countryEnabledExpected, bool enableSMDinPartnerSetting = false)
        {
            // Arrange
            string operation = "add";
            string family = "credit_card";
            string accountId = "Account001";
            Dictionary<string, string> headers = new Dictionary<string, string>();
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}";

            if (fixCountrySelection)
            {
                url = url + "&scenario=fixedCountrySelection";
            }

            // SMD is enabled by default for partners on PSS stack. If enableSMDinPartnerSetting is false, the default enabled SMD feature is removed from partner setting.
            if (!enableSMDinPartnerSetting)
            {
                var partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideFirstAndLastNameForCompletePrerequisites\":true}]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            }
            else
            {
                headers.Add("x-ms-flight", "PXDisablePSSCache");
            }

            // Act
            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode, responseBody);
                    var pidls = ReadPidlResourceFromJson(responseBody);

                    pidls.ForEach(
                        pidl =>
                        {
                            Assert.AreEqual(GlobalConstants.PidlDescriptionTypes.PaymentMethod, pidl.Identity["description_type"]);
                            Assert.AreEqual(operation, pidl.Identity["operation"]);
                            Assert.AreEqual(country.ToLower(), pidl.Identity["country"]);

                            PropertyDisplayHint addressCountry = pidl.GetDisplayHintById("addressCountry") as PropertyDisplayHint;

                            if (countryEnabledExpected)
                            {
                                Assert.AreEqual(32, addressCountry.PossibleOptions.Count, "Only the 32 countries in SMD are expected");
                                Assert.AreEqual(32, addressCountry.PossibleValues.Count, "Only the 32 countries in SMD are expected");
                                Assert.AreEqual(false, addressCountry.IsDisabled, "Country dropdown needs to be enabled");
                                Assert.IsTrue(addressCountry.IsHidden == null || addressCountry.IsHidden == false, "Country dropdown should not be hidden");
                            }
                            else
                            {
                                Assert.AreEqual(243, addressCountry.PossibleOptions.Count, "All countries are expected");
                                Assert.AreEqual(243, addressCountry.PossibleValues.Count, "All countries are expected");
                                Assert.IsTrue((addressCountry.IsDisabled == null && addressCountry.IsHidden == true) || addressCountry.IsDisabled == true, "Country dropdown should not be enabled");
                            }

                            if (string.Equals(partner, "amcxbox", StringComparison.OrdinalIgnoreCase))
                            {
                                int expectedDisplayPageCount = countryEnabledExpected ? 10 : 9;
                                if (string.Equals(country, "us"))
                                {
                                    expectedDisplayPageCount = countryEnabledExpected ? 11 : 10;
                                }

                                Assert.AreEqual(expectedDisplayPageCount, pidl.DisplayPages.Count);
                                Assert.AreEqual(countryEnabledExpected ? "country" : "address_line1", pidl.DisplayPages[4].Members[1].PropertyName, "Expected a new DisplayPage for country when flight is enabled");
                            }

                            if (string.Equals(partner, "xbox", StringComparison.OrdinalIgnoreCase))
                            {
                                int expectedDisplayPageCount = countryEnabledExpected ? 9 : 8;
                                if (string.Equals(country, "us"))
                                {
                                    expectedDisplayPageCount = countryEnabledExpected ? 10 : 9;
                                }

                                Assert.AreEqual(expectedDisplayPageCount, pidl.DisplayPages.Count);
                                Assert.AreEqual(countryEnabledExpected ? "country" : "address_line1", pidl.DisplayPages[4].Members[1].PropertyName, "Expected a new DisplayPage for country when flight is enabled");
                            }
                        });
                });

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("Account001", "appsource", "fr", "", false, true)]
        [DataRow("Account001", "appsource", "fr", "AADSupportSMD", false, true)]
        [DataRow("Account001", "appsource", "pt", "SMDDisabled", false, false)]
        [DataRow("Account001", "appsource", "fi", "AADSupportSMD,SMDDisabled", false, false)]
        [DataRow("Account001", "appsource", "us", "AADSupportSMD", false, false)]
        [DataRow("Account001", "azure", "fr", "", false, true)]
        [DataRow("Account001", "azure", "fr", "AADSupportSMD", false, true)]
        [DataRow("Account001", "azure", "pt", "SMDDisabled", false, false)]
        [DataRow("Account001", "azure", "fi", "AADSupportSMD,SMDDisabled", false, false)]
        [DataRow("Account001", "azure", "us", "AADSupportSMD", false, false)]
        [DataRow("Account001", "azureibiza", "fr", "", false, true)]
        [DataRow("Account001", "azureibiza", "fr", "AADSupportSMD", false, true)]
        [DataRow("Account001", "azureibiza", "pt", "SMDDisabled", false, false)]
        [DataRow("Account001", "azureibiza", "fi", "AADSupportSMD,SMDDisabled", false, false)]
        [DataRow("Account001", "azureibiza", "us", "AADSupportSMD", false, false)]
        [DataRow("Account001", "azuresignup", "fr", "", false, true)]
        [DataRow("Account001", "azuresignup", "fr", "AADSupportSMD", false, true)]
        [DataRow("Account001", "azuresignup", "pt", "SMDDisabled", false, false)]
        [DataRow("Account001", "azuresignup", "fi", "AADSupportSMD,SMDDisabled", false, false)]
        [DataRow("Account001", "azuresignup", "us", "AADSupportSMD", false, false)]
        [DataRow("Account001", "commercialstores", "fr", "", false, true)]
        [DataRow("Account001", "commercialstores", "fr", "AADSupportSMD", false, true)]
        [DataRow("Account001", "commercialstores", "pt", "SMDDisabled", false, false)]
        [DataRow("Account001", "commercialstores", "fi", "AADSupportSMD,SMDDisabled", false, false)]
        [DataRow("Account001", "commercialstores", "us", "AADSupportSMD", false, false)]
        [DataRow("Account001", "amcweb", "fr", "AADSupportSMD", false, false)]
        [DataRow("Account001", "azure", "fr", "", true, true)]
        [DataRow("Account001", "azure", "pt", "SMDDisabled", true, false)]
        [DataRow("Account001", "azure", "fi", "SMDDisabled", true, false)]
        [DataRow("Account001", "azure", "us", "", true, false)]
        [DataRow("Account001", "commercialstores", "fr", "", true, true)]
        [DataRow("Account001", "commercialstores", "pt", "SMDDisabled", true, false)]
        [DataRow("Account001", "commercialstores", "fi", "SMDDisabled", true, false)]
        [DataRow("Account001", "commercialstores", "us", "", true, false)]
        [DataRow("Account001", "azure", "sk", "", false, true)]
        [DataRow("Account001", "commercialstores", "sk", "", false, true)]
        [DataRow("Account001", "azure", "fr", "originCountry_sk", false, true)]
        [DataRow("Account001", "commercialstores", "fr", "originCountry_sk", false, true)]
        [DataRow("Account001", "officesmb", "fr", "", false, true, true)]
        [DataRow("Account001", "officesmb", "us", "", false, false, true)]
        [DataRow("Account001", "officesmb", "fr", "SMDDisabled", false, false, false)]
        [DataRow("Account001", "testPartnerWithoutSMD", "fr", "", false, false)]
        [DataRow("Account001", "testPartnerWithoutSMD", "fr", "SMDDisabled", false, false)]
        [DataRow("Account001", "testPartnerWithoutSMD", "us", "", false, false)]
        [DataRow("Account001", "testPartnerWithoutSMD", "fr", "SMDDisabled", false, false, true)]
        [DataTestMethod]
        public async Task AddPaymentMethod_Commercial_ValidateSingleMarketDirective(
            string accountId,
            string partner,
            string country,
            string partnerFlights,
            bool enablePXEnableSmdCommercialFlight,
            bool countryEnabledExpected,
            bool enableSMDinPartnerSetting = false)
        {
            // Arrange
            string operation = "add";
            List<string> flights = null;
            string family = "credit_card";
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&partner={partner}&operation={operation}&family={family}";

            Dictionary<string, string> headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", string.Join(",", partnerFlights)
                }
            };

            if (enablePXEnableSmdCommercialFlight)
            {
                flights = new List<string>() { "PXEnableSmdCommercial" };
            }

            // SMD is enabled by default for partners on PSS stack. If enableSMDinPartnerSetting is false, the default enabled SMD feature is removed from partner setting.
            if (!enableSMDinPartnerSetting)
            {
                var partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideFirstAndLastNameForCompletePrerequisites\":true}]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            }
            else
            {
                headers["x-ms-flight"] = "PXDisablePSSCache";
            }

            await GetRequest(
                url,
                headers,
                flights,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode, responseBody);
                    var pidls = ReadPidlResourceFromJson(responseBody);

                    pidls.ForEach(
                        pidl =>
                        {
                            Assert.AreEqual(GlobalConstants.PidlDescriptionTypes.PaymentMethod, pidl.Identity["description_type"]);
                            Assert.AreEqual(operation, pidl.Identity["operation"]);
                            Assert.AreEqual(country.ToLower(), pidl.Identity["country"]);

                            PropertyDisplayHint addressCountry = pidl.GetDisplayHintById("addressCountry") as PropertyDisplayHint;

                            if (countryEnabledExpected)
                            {
                                Assert.AreEqual(32, addressCountry.PossibleOptions.Count, "Only the 32 countries in SMD are expected");
                                Assert.AreEqual(32, addressCountry.PossibleValues.Count, "Only the 32 countries in SMD are expected");
                                Assert.AreEqual(false, addressCountry.IsDisabled, "Country dropdown needs to be enabled");
                                Assert.IsTrue(addressCountry.IsHidden == null || addressCountry.IsHidden == false, "Country dropdown should not be hidden");
                            }
                            else
                            {
                                if (country == "fr" && enableSMDinPartnerSetting)
                                {
                                    Assert.AreEqual(32, addressCountry.PossibleOptions.Count, "Only the 32 countries in SMD and disabled are expected");
                                    Assert.AreEqual(32, addressCountry.PossibleValues.Count, "Only the 32 countries in SMD and disabled are expected");
                                    Assert.IsTrue((addressCountry.IsDisabled == null && addressCountry.IsHidden == true) || addressCountry.IsDisabled == false, "Country dropdown should be enabled");
                                }
                                else
                                {
                                    Assert.AreEqual(243, addressCountry.PossibleOptions.Count, "All countries are expected");
                                    Assert.AreEqual(243, addressCountry.PossibleValues.Count, "All countries are expected");
                                    Assert.IsTrue((addressCountry.IsDisabled == null && addressCountry.IsHidden == true) || addressCountry.IsDisabled == true, "Country dropdown should not be enabled");
                                }
                            }
                        });
                });
        }

        [DataRow("northstarweb", "us", "en-us")]
        [DataTestMethod]
        public async Task ListPaymentInstrument_PidlIsValid(string partner, string country, string language)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation=selectinstance";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);
        }

        [DataRow("amcweb", "us", "en-us", "paynow")]
        [DataTestMethod]
        public async Task ListPaymentInstrument_EmptyList(
            string partner,
            string country,
            string language,
            string scenario)
        {
            // Arrange
            // since the account only have visa card, if ask paypal as inclusion list, the empty pi list will return
            string url = $"/v7.0/SelectInstanceTestsAccount/paymentMethodDescriptions?country={country}" +
                $"&language={language}&partner={partner}&scenario={scenario}&operation=selectinstance&allowedPaymentMethods=%5B%22ewallet.paypal%22%5D";

            // Verify the emptyResourceList is returned
            List<PIDLResource> pidls = await GetPidlFromPXService(url);
            Assert.IsNotNull(pidls);
            dynamic context = pidls[0].ClientAction.Context;
            Assert.AreEqual("emptyResourceList", context.partnerHints.triggeredBy.Value);

            // if the list pi doesn't return empty resource list, then emptyResourceList shouldn't be returned.
            url = $"/v7.0/SelectInstanceTestsAccount/paymentMethodDescriptions?country={country}" +
                $"&language={language}&partner={partner}&scenario={scenario}&operation=selectinstance";

            // Verify the emptyResourceList is returned
            pidls = await GetPidlFromPXService(url);
            Assert.IsNotNull(pidls);
            var displayHintAction = pidls[0].DisplayPages[0].Members[1].Action;
            context = displayHintAction.Context;
            Assert.IsNull(context.partnerHints);
        }

        [DataRow("amcweb", "cn", "zh-cn", "Visa ** 5678", "MasterCard ** 0002", "Discover Network ** 7000", "Alipay", "")]
        [DataRow("amcweb", "us", "en-us", "Visa ** 5678", "MasterCard ** 0002", "Discover Network ** 7000", "Alipay", "")] // Venmo not applicable for amcweb
        [DataRow("storify", "us", "en-us", "John Doe ••5678 6/40", "John Doe ••0002", "John Doe ••7000", "Alipay", "@janeDoe")]
        [DataRow("xboxsubs", "us", "en-us", "John Doe ••5678 6/40", "John Doe ••0002", "John Doe ••7000", "Alipay", "@janeDoe")]
        [DataRow("xboxsettings", "us", "en-us", "John Doe ••5678 6/40", "John Doe ••0002", "John Doe ••7000", "Alipay", "@janeDoe")]
        [DataRow("saturn", "us", "en-us", "John Doe ••5678 6/40", "John Doe ••0002", "John Doe ••7000", "Alipay", "@janeDoe")]
        [DataTestMethod]
        public async Task ListPaymentInstrument_VerifyDefaultDisplayName(
            string partner,
            string country,
            string language,
            string expectedVisaCardName,
            string expectedMasterCardName,
            string expectedDiscoverCardName,
            string expectAlipayNameValue,
            string expectVenmoName)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation=selectinstance";

            if (partner == "xboxsettings")
            {
                url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation=selectinstance&scenario=manage";
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);
            Assert.IsNotNull(pidls);
            PropertyDisplayHint propertyHint = null;

            if (partner == "xboxsettings")
            {
                var paymentInstruments = pidls[0].DataSources.First().Value.Members;
                foreach (var entry in paymentInstruments)
                {
                    JObject entryObject = JObject.Parse(entry.ToString());
                    string id = (string)entryObject["id"];
                    string defaultDisplayName = (string)entryObject["details"]["defaultDisplayName"];

                    if (id == "Account001-Pi001-Visa")
                    {
                        Assert.AreEqual(expectedVisaCardName, defaultDisplayName);
                        continue;
                    }
                    else if (id == "Account001-Pi007-Discover")
                    {
                        Assert.AreEqual(expectedDiscoverCardName, defaultDisplayName);
                        continue;
                    }
                    else if (id == "Account001-Pi002-MC")
                    {
                        Assert.AreEqual(expectedMasterCardName, defaultDisplayName);
                        continue;
                    }
                    else if (id == "Account001-Pi014-Venmo")
                    {
                        Assert.AreEqual(expectVenmoName, defaultDisplayName);
                        continue;
                    }
                }

                return;
            }

            if (partner == "amcweb")
            {
                propertyHint = pidls[0].DisplayPages[0].Members[0] as PropertyDisplayHint;
            }
            else if (Microsoft.Commerce.Payments.PXCommon.Constants.PartnerGroups.IsXboxNativePartner(partner))
            {
                var group = pidls[0].DisplayPages[0].Members[0] as GroupDisplayHint;
                propertyHint = group.Members[1] as PropertyDisplayHint;
            }

            foreach (var entry in propertyHint.PossibleOptions)
            {
                dynamic context = entry.Value.PidlAction.Context;
                if (entry.Key == "redeemGiftCardLink" || entry.Key == "newPaymentMethodLink")
                {
                    continue;
                }

                // Venmo should only be accepted for xboxNative partners. Update when expanded
                if (partner == "amcweb" && entry.Key == "Account001-Pi014-Venmo")
                {
                    continue;
                }

                string defaultDisplayName = (string)context?.instance?.details?.defaultDisplayName;

                // expired card case
                if (defaultDisplayName == null)
                {
                    defaultDisplayName = (string)context?.resourceActionContext?.resource?.details?.defaultDisplayName;
                }

                switch (entry.Key)
                {
                    case "Account001-Pi001-Visa":
                        Assert.AreEqual(expectedVisaCardName, defaultDisplayName);
                        break;
                    case "Account001-Pi007-Discover":
                        Assert.AreEqual(expectedDiscoverCardName, defaultDisplayName);
                        break;
                    case "Account001-Pi002-MC":
                        Assert.AreEqual(expectedMasterCardName, defaultDisplayName);
                        break;
                    case "Account001-Pi010-Alipay":
                        Assert.AreEqual(expectAlipayNameValue, defaultDisplayName);
                        break;
                    case "Account001-Pi014-Venmo":
                        Assert.AreEqual(expectVenmoName, defaultDisplayName);
                        break;
                    default:
                        break;
                }
            }
        }

        [DataRow("northstarweb", "add", true)]
        [DataRow("northstarweb", "update", true)]
        [DataRow("webblends", "add", false)]
        [DataRow("webblends", "update", false)]
        [DataRow("oxowebdirect", "add", false)]
        [DataRow("oxowebdirect", "update", false)]
        [DataTestMethod]
        public async Task AddPaymentMethod_ExpiryYearContainsTransformation(string partner, string operation, bool hasTransformation)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en=us&partner={partner}&operation={operation}&family=credit_card";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (PIDLResource pidl in pidls)
            {
                PropertyDescription expiryYear = pidl.GetPropertyDescriptionByPropertyName("expiryYear");
                Assert.IsNotNull(expiryYear, "Pidl is expected to have a expiry year");
                Assert.AreEqual(hasTransformation, expiryYear.Transformation != null, "Tranformation of expiry year is unexpected");

                if (hasTransformation)
                {
                    Assert.AreEqual(2, expiryYear.Transformation.Count, "Transformation should contain two entries");
                    Assert.IsNotNull(expiryYear.Transformation["forSubmit"]);
                    Assert.IsNotNull(expiryYear.Transformation["forDisplay"]);
                }
            }
        }

        [DataRow("cart", "us", "visa", true)]
        [DataRow("webblends", "us", "amex", true)]
        [DataRow("azure", "us", "mc", true)]
        [DataRow("oxowebdirect", "us", "discover", true)]
        [DataRow("defaulttemplate", "ng", "verve", true)]
        [DataRow("twopage", "br", "elo", true)]
        [DataRow("oxowebdirect", "jp", "jcb", true)]
        [DataRow("cart", "us", "visa", false)]
        [DataRow("webblends", "us", "amex", false)]
        [DataRow("azure", "us", "mc", false)]
        [DataRow("oxowebdirect", "us", "discover", false)]
        [DataRow("defaulttemplate", "ng", "verve", false)]
        [DataRow("twopage", "br", "elo", false)]
        [DataRow("oxowebdirect", "jp", "jcb", false)]
        [DataTestMethod]
        public async Task EditCC_LogoAvailable(string partner, string country, string type, bool showLogo)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en=us&partner={partner}&operation=update&family=credit_card&type={type}";
            Dictionary<string, string> testHeaders = new Dictionary<string, string>();

            if (showLogo)
            {
                testHeaders["x-ms-flight"] = "PXEnableUpdateCCLogo";
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeaders);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (PIDLResource pidl in pidls)
            {
                LogoDisplayHint logo = pidl?.GetAllDisplayHints()?.Where(hint => hint is LogoDisplayHint)?.FirstOrDefault() as LogoDisplayHint;
                var pidlDetails = pidl.DataDescription["details"] as List<PIDLResource>;
                var lastFourDigits = pidlDetails[0].DataDescription["lastFourDigits"] as PropertyDescription;

                if (showLogo)
                {
                    Assert.IsNotNull(logo);
                    Assert.AreEqual("updateCCLogo", logo.HintId);
                    Assert.AreEqual(true, logo.IsHidden);
                    Assert.AreEqual(true, lastFourDigits.IsKey);
                    Assert.AreEqual(1, lastFourDigits.Validations.Count);
                    Assert.AreEqual("invalid_lastFourDigits", lastFourDigits.Validations[0].ErrorCode);
                    Assert.AreEqual("Invalid card number", lastFourDigits.Validations[0].ErrorMessage);
                    Assert.AreEqual("^(.*?)$", lastFourDigits.Validations[0].Regex);
                }
                else
                {
                    Assert.IsNull(logo);
                    Assert.AreNotEqual(true, lastFourDigits.IsKey);
                    Assert.IsTrue(lastFourDigits.Validations == null || lastFourDigits.Validations.Count == 0);
                }
            }
        }

        [DataRow("northstarweb", "us", "en-us")]
        [DataTestMethod]
        public async Task ReplacePaymentInstrument_PidlIsValid(string partner, string country, string language)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&family=credit_card&operation=replace&scenario=withNewAddress";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (PIDLResource replacePidl in pidls)
            {
                ButtonDisplayHint saveButton = replacePidl.GetDisplayHintById("saveButton") as ButtonDisplayHint;
                Assert.IsNotNull(saveButton, "Replace Pidl is expected to have a save button");
            }
        }

        //// When running selfhost, HttpContext.Current isn't available, we need to abstract it.
        //// This test passes when running by itself, but it seems like there's an threading issue when running the complete test set which causes this test to fail.
        //// Commenting out this test until we abstract HttpContext.Current.
        //// [DataRow("commercialstores", "eligiblePI", "paymentMethodRadio", "radio", 5, true, "partnerAction", "br", "pt-br", "Fatura (Boleto Bancário ou transferência eletrônica)")]
        [DataRow("commercialstores", "eligiblePI", "paymentMethodRadio", "radio", 5, true, "partnerAction", "br", "en", "Invoice (pay by boleto bancario or wire transfer)")]
        [DataRow("commercialstores", "eligiblePI", "paymentMethodRadio", "radio", 6, true, "partnerAction", "us", "en", "Invoice (Pay by check or wire transfer)")]
        [DataRow("commercialstores", null, "paymentMethod", "dropDown", 2, false, null, "us", "en-us", "Invoice(check or wire transfer)")]
        [DataRow("officesmb", null, "paymentMethod", "buttonList", 6, true, "success", "us", "en-us", "Invoice (Pay by check or wire transfer)", "selectpmbuttonlist")]
        [DataRow("officesmb", null, "paymentMethod", "radio", 6, true, "success", "us", "en-us", "Invoice (Pay by check or wire transfer)", "selectpmradiobuttonlist")]
        [DataRow("webblends", null, "paymentMethod", "buttonList", 2, true, "success", "us", "en-us", "Invoice(check or wire transfer)")]
        [DataRow("oxowebdirect", null, "paymentMethod", "buttonList", 2, true, "success", "us", "en-us", "Invoice(check or wire transfer)")]
        [DataTestMethod]
        public async Task GetPaymentMethod_EligiblePI_Select(string partner, string scenario, string paymentMethodDisplayId, string selectType, int paymentMethodCounter, bool hasPidlAction, string partnerActionType, string country, string language, string expectedDisplayTextForInvoicePI, string templateName = null)
        {
            // Arrange, pass credit_card, direct_debit.ach, invoice_basic and invoice_check to allowedPaymentMethods
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation=select&scenario={scenario}&allowedPaymentMethods=%5B%22credit_card%22%2C%22virtual.invoice_basic%22%2C%22virtual.invoice_check%22%2C%22virtual.alipay%22%2C%22virtual.unionpay%22%2C%22direct_debit.ach%22%5D";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            // Currently ppsbased partners for select operation only works as expected without eligiblePI scenario
            if (string.Equals(partner, "officesmb", StringComparison.CurrentCultureIgnoreCase))
            {
                string pssmockResponse = "{\"select\":{\"template\":\"templateName\",\"features\":{\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}}}";
                pssmockResponse = pssmockResponse.Replace("templateName", string.IsNullOrEmpty(templateName) ? "defaulttemplate" : templateName);

                PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            PropertyDisplayHint paymentMethodDisplayHint = pidls[0].GetDisplayHintById(paymentMethodDisplayId) as PropertyDisplayHint;
            Assert.IsNotNull(paymentMethodDisplayHint);

            Assert.AreEqual(selectType, paymentMethodDisplayHint.SelectType);
            Assert.AreEqual(paymentMethodCounter, paymentMethodDisplayHint.PossibleValues.Count);

            foreach (KeyValuePair<string, SelectOptionDescription> option in paymentMethodDisplayHint.PossibleOptions)
            {
                SelectOptionDescription paymentMethodEntry = option.Value;

                if (string.Equals(option.Key, "virtual_invoice_basic") || string.Equals(option.Key, "virtual_invoice_check"))
                {
                    Assert.AreEqual(expectedDisplayTextForInvoicePI, option.Value.DisplayText);
                }

                Assert.AreEqual(hasPidlAction, paymentMethodEntry.PidlAction != null);
                if (hasPidlAction)
                {
                    DisplayHintAction paymentMethodAction = paymentMethodEntry.PidlAction;
                    Assert.AreEqual(partnerActionType, paymentMethodAction.ActionType);
                }
            }
        }

        [DataRow("amcweb", "paynow", "paymentMethod", "radio", 2, true, "success", "us", "en-us", false)]
        [DataRow("selectpmradiobuttonlist", null, "paymentMethod", "radio", 2, true, "success", "us", "en-us", false)]
        [DataRow("officesmb", null, "paymentMethod", "radio", 2, true, "success", "us", "en-us", false)]
        [DataRow("officesmb", null, "paymentMethod", "radio", 2, true, "success", "us", "en-us", true)]
        [DataTestMethod]
        public async Task GetPaymentMethod_Select(
            string partner,
            string scenario,
            string paymentMethodDisplayId,
            string selectType,
            int paymentMethodCounter,
            bool hasPidlAction,
            string partnerActionType,
            string country,
            string language,
            bool enableUseTextOnlyForPaymentOption)
        {
            // Arrange, pass credit_card, direct_debit.ach, invoice_basic and invoice_check to allowedPaymentMethods
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation=select&scenario={scenario}&allowedPaymentMethods=%5B%22credit_card%22%2C%22virtual.invoice_basic%22%2C%22virtual.invoice_check%22%2C%22virtual.alipay%22%2C%22virtual.unionpay%22%2C%22direct_debit.ach%22%5D";

            if (string.Equals(partner, "officesmb", StringComparison.OrdinalIgnoreCase))
            {
                string expectedPSSResponse = "{\"select\":{\"template\":\"selectpmradiobuttonlist\",\"features\":null}}";
                if (enableUseTextOnlyForPaymentOption)
                {
                    expectedPSSResponse = "{\"select\":{\"template\":\"selectpmradiobuttonlist\",\"features\":{\"useTextOnlyForPaymentOption\":{\"applicableMarkets\":[]}}}}";
                }

                PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);
            }

            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            PropertyDisplayHint paymentMethodDisplayHint = pidls[0].GetDisplayHintById(paymentMethodDisplayId) as PropertyDisplayHint;
            Assert.IsNotNull(paymentMethodDisplayHint);

            Assert.AreEqual(selectType, paymentMethodDisplayHint.SelectType);
            Assert.AreEqual(paymentMethodCounter, paymentMethodDisplayHint.PossibleValues.Count);

            foreach (KeyValuePair<string, SelectOptionDescription> option in paymentMethodDisplayHint.PossibleOptions)
            {
                SelectOptionDescription paymentMethodEntry = option.Value;

                Assert.AreEqual(hasPidlAction, paymentMethodEntry.PidlAction != null);
                if (hasPidlAction)
                {
                    DisplayHintAction paymentMethodAction = paymentMethodEntry.PidlAction;
                    Assert.AreEqual(partnerActionType, paymentMethodAction.ActionType);
                }

                if (enableUseTextOnlyForPaymentOption)
                {
                    Assert.IsNull(option.Value.DisplayContent, "when useTextOnlyForPaymentOption is enabled DisplayContent should be null");
                    Assert.IsNotNull(option.Value.DisplayText, "when useTextOnlyForPaymentOption is enabled DisplayText should not be null");
                }
            }
        }

        [DataRow("amcweb", "paynow", "TGTAeQAAAAAAAAAA", true)]
        [DataRow("amcweb", "paynow", null, false)]
        [DataTestMethod]
        public async Task SelectPaymentInstrument_BillingAccountId(
            string partner,
            string scenario,
            string billableAccountId,
            bool expectedValue)
        {
            // Arrange, pass credit_card, direct_debit.ach, invoice_basic and invoice_check to allowedPaymentMethods
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US" +
                $"&partner={partner}&operation=selectInstance&scenario={scenario}&billableAccountId={billableAccountId}";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            Assert.IsTrue(PXSettings.PimsService.ResponseProvider.IsBillingAccountIdSet == expectedValue);
        }

        [DataRow("amcweb", "ewallet", "bitcoin", "us", "en-us", false)]
        [DataRow("officesmb", "ewallet", "bitcoin", "us", "en-us", true)]
        [DataTestMethod]
        public async Task FundStoredValueBitcoin(string partner, string family, string type, string country, string language, bool usePartnerSettings)
        {
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&family={family}&type={type}&country={country}&language={language}&operation=fundStoredValue";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-test", "{ \"scenarios\": \"px.local\" }"
                }
            };

            if (usePartnerSettings)
            {
                headers["x-ms-flight"] = "PXDisablePSSCache";

                string partnerSettingResponse = "{\"fundstoredvalue\":{\"template\":\"defaulttemplate\",\"features\":null}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            }

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    Assert.AreEqual(1, pidls.Count);

                    var selectAmountPidl = pidls[0];

                    Assert.IsTrue(selectAmountPidl.DataDescription.ContainsKey("amount"));
                    object amountDescriptionObject = null;
                    selectAmountPidl.DataDescription.TryGetValue("amount", out amountDescriptionObject);
                    var amountDescription = JsonConvert.DeserializeObject<PropertyDescription>(JsonConvert.SerializeObject(amountDescriptionObject));
                    Assert.AreEqual(8, amountDescription.PossibleValues.Count);

                    Assert.AreEqual(1, selectAmountPidl.DisplayPages.Count);
                    Assert.AreEqual(4, selectAmountPidl.DisplayPages[0].Members.Count);

                    var amountDisplayGroup = selectAmountPidl.DisplayPages[0].Members[1] as ContainerDisplayHint;
                    Assert.IsNotNull(amountDisplayGroup);
                    Assert.AreEqual(1, amountDisplayGroup.Members.Count);

                    var amountDisplay = amountDisplayGroup.Members[0] as PropertyDisplayHint;
                    Assert.IsNotNull(amountDisplay);
                    Assert.AreEqual(amountDescription.PossibleValues.Count, amountDisplay.PossibleValues.Count);
                    Assert.AreEqual(amountDescription.PossibleValues.Count, amountDisplay.PossibleOptions.Count);
                    foreach (KeyValuePair<string, string> pv in amountDescription.PossibleValues)
                    {
                        Assert.IsTrue(amountDisplay.PossibleValues.ContainsKey(pv.Key));
                        Assert.IsTrue(amountDisplay.PossibleValues.ContainsValue("$" + pv.Key));
                        Assert.IsTrue(amountDisplay.PossibleOptions.ContainsKey(pv.Key));
                    }

                    var submitGroup = selectAmountPidl.DisplayPages[0].Members[3] as ContainerDisplayHint;
                    Assert.IsNotNull(submitGroup);
                    Assert.AreEqual(2, submitGroup.Members.Count);
                    var submitButton = submitGroup.Members[1];
                    var context = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(submitButton.Action.Context));
                    Assert.IsNotNull(context);
                    Assert.IsTrue(context.Href.Contains("redeem"));
                });
        }

        [DataRow("northstarweb", "ewallet", "stored_value", "us", "en-us")]
        [DataTestMethod]
        public async Task FundStoredValueVerifyCSV(string partner, string family, string type, string country, string language)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&family={family}&type={type}&country={country}&language={language}&operation=fundStoredValue";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            Assert.AreEqual(1, pidls.Count);

            var verifyPidl = pidls[0];
            PropertyDisplayHint amount = verifyPidl.GetDisplayHintById("csvTokenIdentifierValue") as PropertyDisplayHint;
            Assert.IsNotNull(amount.DisplayTransformations, "DisplayTransformations is not null for csv redeem");

            var submitButton = verifyPidl.GetDisplayHintById("csvRedeemVerifyBalanceButton") as ButtonDisplayHint;
            Assert.IsNotNull(submitButton, "Submit button is expected");
            var submitButtonContext = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(submitButton.Action.Context));
            Assert.IsTrue(string.Equals("POST", submitButtonContext.Method, StringComparison.OrdinalIgnoreCase));
            Assert.IsTrue(string.Equals("https://{tops-endpoint}/users/{userId}/tokenDescriptionRequests", submitButtonContext.Href, StringComparison.OrdinalIgnoreCase));
        }

        [DataRow("northstarweb", "ewallet", "stored_value.redeem", "us", "en-us")]
        [DataTestMethod]
        public async Task FundStoredValueRedeemCSV(string partner, string family, string type, string country, string language)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&family={family}&type={type}&country={country}&language={language}&operation=fundStoredValue";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            Assert.AreEqual(1, pidls.Count);

            var redeemPidl = pidls[0];
            var submitButton = redeemPidl.GetDisplayHintById("csvRedeemAddBalanceButton") as ButtonDisplayHint;
            Assert.IsNotNull(submitButton, "Submit button is expected");
            var submitButtonContext = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(submitButton.Action.Context));
            Assert.IsTrue(string.Equals("POST", submitButtonContext.Method, StringComparison.OrdinalIgnoreCase));
            Assert.IsTrue(string.Equals("https://{purchase-endpoint}/users/{userId}/orders", submitButtonContext.Href, StringComparison.OrdinalIgnoreCase));
        }

        [DataRow("officeoobe")]
        [DataRow("oxooobe")]
        [DataRow("webblends")]
        [DataRow("oxodime")]
        [DataRow("oxowebdirect")]
        [DataRow("storify")]
        [DataRow("saturn")]
        [DataRow("xboxsubs")]
        [DataRow("xboxsettings")]
        [DataTestMethod]
        public async Task AddCCPI_AddressNoCityState_Address(string partner)
        {
            // Arrange, pass credit_card, direct_debit.ach, invoice_basic and invoice_check to allowedPaymentMethods
            string url = $"/v7.0/Account001/paymentMethodDescriptions?scenario=addressnocitystate&partner={partner}&operation=Add&country=us&language=en-us&family=credit_card";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                Assert.AreEqual(pidl.GetPropertyDescriptionByPropertyName("displayedPaymentMethodTypes").DefaultValue, "[\"amex\",\"discover\",\"mc\",\"visa\"]");
                PropertyDisplayHint city = pidl.GetDisplayHintById("city") as PropertyDisplayHint;
                PropertyDisplayHint region = pidl.GetDisplayHintById("region") as PropertyDisplayHint;
                Assert.IsNull(city);
                Assert.IsNull(region);
            }
        }

        [DataRow("xboxsettings")]
        [DataRow("storify")]
        [DataRow("saturn")]
        [DataRow("xboxsubs")]
        [DataRow("amcweb")]
        [DataRow("officeoobe")]
        [DataRow("oxooobe")]
        [DataRow("webblends")]
        [DataRow("oxodime")]
        [DataRow("oxowebdirect")]
        [DataTestMethod]
        public async Task AddCCPI_ViewTermsTriggeredAction(string partner)
        {
            // Arrange
            string[] urls = new string[]
            {
                $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Add&country=us&language=en-us&family=credit_card",
                $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Add&country=us&language=en-us&family=credit_card&completePrerequisites=true"
            };

            List<string> flights = new List<string>()
            {
                "PXViewTermsTriggerCustomEvent"
            };

            foreach (string url in urls)
            {
                // Act
                List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

                // Assert
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                foreach (var pidl in pidls)
                {
                    List<DisplayHint> viewTermsButtonList = pidl.GetAllDisplayHintsOfId("viewTermsButton");

                    foreach (DisplayHint button in viewTermsButtonList)
                    {
                        string serializedButton = JsonConvert.SerializeObject(button);
                        if (Microsoft.Commerce.Payments.PXCommon.Constants.PartnerGroups.IsXboxNativePartner(partner))
                        {
                            Assert.IsTrue(serializedButton.Contains("triggerEvent"));
                            Assert.IsTrue(serializedButton.Contains("viewTermsTriggered"));
                        }
                        else
                        {
                            Assert.IsFalse(serializedButton.Contains("triggerEvent"));
                            Assert.IsFalse(serializedButton.Contains("viewTermsTriggered"));
                        }
                    }
                }
            }
        }

        [DataRow("fr", "storify", "2.4.0", "add")]
        [DataRow("fr", "storify", "2.5.0", "add")]
        [DataRow("nl", "storify", "2.4.0", "add")]
        [DataRow("nl", "storify", "2.5.0", "add")]
        [DataRow("fr", "storify", "2.4.0", "update")]
        [DataRow("fr", "storify", "2.5.0", "update")]
        [DataRow("nl", "storify", "2.4.0", "update")]
        [DataRow("nl", "storify", "2.5.0", "update")]
        [DataTestMethod]
        public async Task AddEditCC_AddressSequenceFrNl(string country, string partner, string pidlSdkVersion, string operation)
        {
            Version fullPidlSdkVersion = new Version(pidlSdkVersion + ".0");
            Version lowestCompatiblePidlVersion = new Version(2, 5, 0, 0);
            List<PIDLResource> pidls = new List<PIDLResource>();
            string flight = "PXEnableXboxNewAddressSequenceFrNl";

            string[] urls = new string[]
            {
                $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Add&country={country}&language=en-us&family=credit_card",
                $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Add&country={country}&language=en-us&family=credit_card&completePrerequisites=true"
            };

            if (operation != "add")
            {
                PaymentMethod pm = new PaymentMethod
                {
                    PaymentMethodFamily = "credit_card",
                    PaymentMethodType = "visa",
                };

                List<PaymentMethod> paymentMethods = new List<PaymentMethod> { pm };
                PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods));
                urls = new string[]
                {
                    $"/v7.0/me/paymentMethodDescriptions?country={country}&family=credit_card&type=visa&language=en-US&partner={partner}&operation=update"
                };
            }

            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", pidlSdkVersion },
                { "x-ms-flight", flight }
            };

            foreach (string url in urls)
            {
                pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                PageDisplayHint addressPage = pidls[0].DisplayPages[1];
                GroupDisplayHint addressContainerTopSequence = (addressPage.Members[0] as GroupDisplayHint).Members[0] as GroupDisplayHint;

                GroupDisplayHint provinceGroup = addressContainerTopSequence.Members[2] as GroupDisplayHint;
                GroupDisplayHint countryStandaloneGroup = addressContainerTopSequence.Members[3] as GroupDisplayHint;
                string provinceGroupHintd = fullPidlSdkVersion < lowestCompatiblePidlVersion ? (country == "fr" ? "cityProvinceInlineGroup" : "cityStateInlineGroup") : (country == "fr" ? "postalProvinceInlineGroup" : "postalStateInlineGroup");
                string countryGroupHintId = fullPidlSdkVersion < lowestCompatiblePidlVersion ? (country == "fr" ? "postalCountryStandaloneGroup" : "postalCountryStandaloneGroup") : (country == "fr" ? "cityCountryStandaloneGroup" : "cityCountryStandaloneGroup");

                Assert.IsTrue(provinceGroup.HintId == provinceGroupHintd);
                Assert.IsTrue(countryStandaloneGroup.HintId == countryGroupHintId);
            }
        }

        [DataRow("xboxweb", null, null, null, null)]
        [DataRow("xboxweb", "testChannel", null, null, null)]
        [DataRow("xboxweb", null, "testReferrerId", null, null)]
        [DataRow("xboxweb", "testChannel", "testReferrerId", "testSessionId", null)]
        [DataRow("xboxweb", "testChannel", "testReferrerId", "testSessionId", "xboxApplyFullPageRender")]
        [DataTestMethod]
        public async Task ApplyPaymentInstrument_WebPartners_SuccessFlow(string partner, string channel, string referrerId, string sessionId, string scenario)
        {
            PXSettings.IssuerService.ResetToDefaults();
            PXSettings.PimsService.ResetToDefaults();
            PXSettings.PartnerSettingsService.ResetToDefaults();

            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=mc&partner={partner}&operation=Apply&language=en-US&family=credit_card&country=US&channel={channel}&referrerId={referrerId}&sessionId={sessionId}";

            var headers = new Dictionary<string, string>()
            {
                { "x-ms-msaprofile", "PUID=123456789" }
            };

            if (!string.IsNullOrEmpty(scenario))
            {
                url += $"&scenario={scenario}";
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);
            Assert.IsNotNull(pidls, "Returned PIDLResource should not be null");

            // Assert
            var heading = pidls.First().GetDisplayHintById("xboxCardApplyHeaderText") as HeadingDisplayHint;
            Assert.IsNotNull(heading, "Header is expected to exist");

            var subTextGroup = pidls.First().GetDisplayHintById("xboxCardTermsAndConditionsTextGroup") as TextGroupDisplayHint;
            Assert.AreEqual(1, subTextGroup.Members.Count);

            var continueButton = pidls.First().GetDisplayHintById("saveContinueButton");
            var cancelButton = pidls.First().GetDisplayHintById("cancelButton");
            Assert.IsNotNull(continueButton);
            Assert.AreEqual(cancelButton == null, scenario == "xboxApplyFullPageRender");

            var actionContext = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(continueButton.Action.Context));
            Assert.IsTrue(actionContext.Href.Contains("/paymentInstrumentsEx"), "PaymentInstrumentsEx expected on action url");
            Assert.IsTrue(actionContext.Href.Contains("partner=" + partner), "Partner query param expected on action url");

            if (sessionId != null)
            {
                Assert.IsTrue(actionContext.Href.Contains("sessionId=" + sessionId), "SessionId query param expected on action url");
            }

            var initializeRequest = JsonConvert.DeserializeObject<Microsoft.Commerce.Payments.PXService.Model.IssuerService.InitializeRequest>(JsonConvert.SerializeObject(actionContext.Payload));
            Assert.AreEqual("XboxCreditCard", initializeRequest.Card);
            Assert.AreEqual("us", initializeRequest.Market);

            if (channel != null)
            {
                Assert.AreEqual(channel, initializeRequest.Channel);
            }

            if (referrerId != null)
            {
                Assert.AreEqual(referrerId, initializeRequest.ReferrerId);
            }
        }

        [DataRow("xboxweb")]
        [DataTestMethod]
        public async Task ApplyPaymentInstrument_WebPartners_BadRequest_NoPuid(string partner)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=mc&partner={partner}&operation=Apply&language=en-US&family=credit_card&country=US";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.BadRequest);
        }

        [DataRow("xboxweb", null)]
        [DataRow("xboxweb", "xboxApplyFullPageRender")]
        [DataTestMethod]
        public async Task ApplyPaymentInstrument_WebPartners_FailEligibility_Ineligible(string partner, string scenario)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=mc&partner={partner}&operation=Apply&language=en-US&family=credit_card&country=US&scenario={scenario}";
            string mockResponse = $"{{\"status\":\"None\",\"eligibleToApply\":false,\"prescreened\":true}}";
            PXSettings.IssuerService.ResetToDefaults();
            PXSettings.IssuerService.ArrangeResponse(mockResponse);

            var headers = new Dictionary<string, string>()
            {
                { "x-ms-msaprofile", "PUID=123456789" }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);
            Assert.IsNotNull(pidls, "Returned PIDLResource should not be null");

            // Assert
            var headerGroup = pidls.First().GetDisplayHintById("xboxCardNotEligibleHeaderGroup") as GroupDisplayHint;
            Assert.AreEqual(2, headerGroup.Members.Count);
            Assert.IsNotNull(headerGroup.Members[0] as ImageDisplayHint, "ImageDisplayHint exists in group");
            Assert.IsNotNull(headerGroup.Members[1] as HeadingDisplayHint, "HeadingDisplayHint exists in group");

            var infoIcon = pidls.First().GetDisplayHintById("infoIconFluentDark") as ImageDisplayHint;
            Assert.IsNotNull(infoIcon, "Info icon fluent exists");

            var heading = pidls.First().GetDisplayHintById("xboxCardNotEligibleHeader") as HeadingDisplayHint;
            Assert.IsNotNull(heading, "Heading exists");

            var bodyText = pidls.First().GetDisplayHintById("xboxCardNotEligibleText") as TextDisplayHint;
            Assert.IsNotNull(bodyText, "Main body text exists");

            var buttons = pidls.First().GetDisplayHintById("xboxCardNotEligibleButtonGroup") as GroupDisplayHint;
            var expectedButtonCount = scenario == "xboxApplyFullPageRender" ? 1 : 2;
            Assert.AreEqual(expectedButtonCount, buttons.Members.Count);

            var cancelButton = pidls.First().GetDisplayHintById("cancelBackButton") as ButtonDisplayHint;
            Assert.AreEqual(cancelButton == null, scenario == "xboxApplyFullPageRender");

            var faqButton = pidls.First().GetDisplayHintById("xboxCardSeeFaqButton") as ButtonDisplayHint;
            Assert.IsNotNull(faqButton, "FAQ button exists");

            // Reset
            PXSettings.IssuerService.ResetToDefaults();
        }

        [DataRow("xboxweb", null)]
        [DataRow("xboxweb", "xboxApplyFullPageRender")]
        [DataTestMethod]
        public async Task ApplyPaymentInstrument_WebPartners_FailEligibility_Pending(string partner, string scenario)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=mc&partner={partner}&operation=Apply&language=en-US&family=credit_card&country=US&scenario={scenario}";
            string mockResponse = $"{{\"status\":\"PendingOnIssuer\",\"eligibleToApply\":false,\"prescreened\":true}}";
            PXSettings.IssuerService.ResetToDefaults();
            PXSettings.IssuerService.ArrangeResponse(mockResponse);

            var headers = new Dictionary<string, string>()
            {
                { "x-ms-msaprofile", "PUID=123456789" }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);
            Assert.IsNotNull(pidls, "Returned PIDLResource should not be null");

            // Assert
            var heading = pidls.First().GetDisplayHintById("xboxCardPendingHeader") as HeadingDisplayHint;
            Assert.IsNotNull(heading, "Header exists");

            var bodyText = pidls.First().GetDisplayHintById("xboxCardPendingText") as TextDisplayHint;
            Assert.IsNotNull(bodyText, "Body text exists");

            var buttons = pidls.First().GetDisplayHintById("xboxCardApplyPendingButtonGroup") as GroupDisplayHint;
            var expectedButtonCount = scenario == "xboxApplyFullPageRender" ? 1 : 2;
            Assert.AreEqual(expectedButtonCount, buttons.Members.Count);

            var cancelButton = pidls.First().GetDisplayHintById("cancelBackButton") as ButtonDisplayHint;
            Assert.AreEqual(cancelButton == null, scenario == "xboxApplyFullPageRender");

            var statusButton = pidls.First().GetDisplayHintById("xboxCardCheckStatusButton") as ButtonDisplayHint;
            Assert.IsNotNull(statusButton, "Status button exists");

            // Reset
            PXSettings.IssuerService.ResetToDefaults();
        }

        [DataRow("xboxweb")]
        [DataTestMethod]
        public async Task ApplyPaymentInstrument_WebPartners_FailEligibility_AlreadyApproved(string partner)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=mc&partner={partner}&operation=Apply&language=en-US&family=credit_card&country=US";
            string mockResponse = $"{{\"status\":\"Approved\",\"eligibleToApply\":false,\"prescreened\":true}}";
            PXSettings.IssuerService.ResetToDefaults();
            PXSettings.IssuerService.ArrangeResponse(mockResponse);

            var headers = new Dictionary<string, string>()
            {
                { "x-ms-msaprofile", "PUID=123456789" }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);
            Assert.IsNotNull(pidls, "Returned PIDLResource should not be null");

            // Assert
            var heading = pidls.First().GetDisplayHintById("xboxCardAlreadyIssuedHeader") as HeadingDisplayHint;
            Assert.IsNotNull(heading, "Header exists");

            var bodyText = pidls.First().GetDisplayHintById("xboxCardAlreadyIssuedText") as TextDisplayHint;
            Assert.IsNotNull(bodyText, "Body text exists");

            var subTextGroup = pidls.First().GetDisplayHintById("xboxCardRewardRulesTextGroup") as TextGroupDisplayHint;
            Assert.AreEqual(1, subTextGroup.Members.Count);

            var subText1 = subTextGroup.Members[0] as TextDisplayHint;

            var button = pidls.First().GetDisplayHintById("xboxCardVisitStoreButton") as ButtonDisplayHint;
            Assert.IsNotNull(button, "VisitStore button exists");

            // Reset
            PXSettings.IssuerService.ResetToDefaults();
        }

        [DataRow("xboxweb", null)]
        [DataRow("xboxweb", "xboxApplyFullPageRender")]
        [DataTestMethod]
        public async Task ApplyPaymentInstrument_WebPartners_FailEligibility_Error(string partner, string scenario)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=mc&partner={partner}&operation=Apply&language=en-US&family=credit_card&country=US&scenario={scenario}";
            string mockResponse = $"{{\"status\":\"Error\",\"eligibleToApply\":false,\"prescreened\":true}}";
            PXSettings.IssuerService.ResetToDefaults();
            PXSettings.IssuerService.ArrangeResponse(mockResponse);

            var headers = new Dictionary<string, string>()
            {
                { "x-ms-msaprofile", "PUID=123456789" }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);
            Assert.IsNotNull(pidls, "Returned PIDLResource should not be null");

            // Assert
            var headerGroup = pidls.First().GetDisplayHintById("xboxCardErrorHeaderGroup") as GroupDisplayHint;
            Assert.AreEqual(2, headerGroup.Members.Count);
            Assert.IsNotNull(headerGroup.Members[0] as ImageDisplayHint, "Icon in header is defined");
            Assert.IsNotNull(headerGroup.Members[1] as HeadingDisplayHint, "Header text is defined");

            var warningIcon = pidls.First().GetDisplayHintById("warningIconFluentDark") as ImageDisplayHint;
            Assert.IsNotNull(warningIcon, "Warning icon fluent exists");

            var heading = pidls.First().GetDisplayHintById("xboxCardInternalErrorHeader") as HeadingDisplayHint;
            Assert.IsNotNull(heading, "Header exists");

            var bodyText = pidls.First().GetDisplayHintById("xboxCardInternalErrorText") as TextDisplayHint;
            Assert.IsNotNull(bodyText, "Body text exists");

            var button = pidls.First().GetDisplayHintById("cancelBackButton") as ButtonDisplayHint;
            Assert.AreEqual(button == null, scenario == "xboxApplyFullPageRender");

            // Reset
            PXSettings.IssuerService.ResetToDefaults();
        }

        [DataRow("storify", HttpStatusCode.OK)]
        [DataRow("xboxsettings", HttpStatusCode.OK)]
        [DataRow("xboxcardapp", HttpStatusCode.OK)]
        [DataRow("webblends", HttpStatusCode.BadRequest)]
        [DataRow("amcweb", HttpStatusCode.BadRequest)]
        [DataTestMethod]
        public async Task XboxCardApplyUpsell(string partner, HttpStatusCode status)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?scenario=BuyNow&partner={partner}&operation=Offer&language=en-US&country=US";

            Dictionary<string, string> headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-msaprofile", "PUID=123456789qwerta"
                }
            };

            PXFlightHandler.AddToEnabledFlights("PXEnableXboxCardUpsell");

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, status, null, headers);

            // Assert
            if (status == HttpStatusCode.OK)
            {
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");
                PIDLResource pidl = pidls.First();
                string pidlString = JsonConvert.SerializeObject(pidl);
                Assert.IsTrue(pidlString.Contains("Apply now"));
                Assert.IsTrue(pidlString.Contains("Get a 5,000 card point bonus ($50 value) after your first purchase."));
                Assert.IsTrue(pidlString.Contains("You're pre-selected for Xbox Mastercard"));
                Assert.IsTrue(pidlString.Contains("cardImage_XboxCoBrandedCardApply.png"));
                Assert.IsTrue(pidlString.Contains("background_XboxCoBrandedCardApply_{themePlaceholder}.png"));
            }
        }

        /// <summary>
        /// Validate the placeholder for postal code and phone number in the payment method description.
        /// </summary>
        /// <param name="partner">Partner Name</param>
        /// <param name="paymentMethodtype">Payment Method Type</param>
        /// <param name="operation">Operation Type</param>
        /// <returns></returns>
        [DataRow(Constants.PartnerNames.Cart, Constants.PaymentMethodFamilyType.AmexVisaMcDiscoverJcb, Constants.OperationTypes.Add)]
        [DataRow(Constants.PartnerNames.Cart, Constants.PaymentMethodFamilyType.AmexVisaMcDiscoverJcb, Constants.OperationTypes.Update)]
        [DataRow(Constants.PartnerNames.Cart, Constants.PaymentMethodFamilyType.Amex, Constants.OperationTypes.Add)]
        [DataRow(Constants.PartnerNames.Cart, Constants.PaymentMethodFamilyType.Amex, Constants.OperationTypes.Update)]
        [DataRow(Constants.PartnerNames.Cart, Constants.PaymentMethodFamilyType.Mc, Constants.OperationTypes.Add)]
        [DataRow(Constants.PartnerNames.Cart, Constants.PaymentMethodFamilyType.Mc, Constants.OperationTypes.Update)]
        [DataRow(Constants.PartnerNames.Cart, Constants.PaymentMethodFamilyType.Visa, Constants.OperationTypes.Add)]
        [DataRow(Constants.PartnerNames.Cart, Constants.PaymentMethodFamilyType.Visa, Constants.OperationTypes.Update)]
        [DataRow(Constants.PartnerNames.Cart, null, Constants.OperationTypes.Add)]
        [DataRow(Constants.PartnerNames.Cart, null, Constants.OperationTypes.Update)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescription_ValidatePlaceHolder_PostalCodeAndPhoneNumber(string partner, string paymentMethodtype, string operation)
        {
            // Arrange
            string postalCodePropertyName = "postal_code";

            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&language=en-US&family=credit_card&type={paymentMethodtype}&operation={operation}&country=ca";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (PIDLResource pidl in pidls)
            {
                ValidatePlaceHolderForDisplayHints(pidl, postalCodePropertyName, "A1A 1A1 or A1A1A1");
            }
        }

        [DataRow("storify", "PXViewTermsTriggerCustomEvent")] // Flow would fail when this flight is turned on because it ends up calling GetAllDisplayHintsOfId, which used to crash until we added a null check on DisplayPages within.
        [DataRow("xboxcardapp", "PXViewTermsTriggerCustomEvent")]
        [DataRow("storify", null)]
        [DataRow("xboxcardapp", null)]
        [DataTestMethod]
        public async Task ApplyPaymentInstrument_XboxCoBrandedCard_RestAction(string partner, string flights)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=mc&scenario=xboxCoBrandedCard&partner={partner}&operation=Apply&language=en-US&family=credit_card&country=US&referrerId=123&ocid=sample";

            string mockResponse = $"{{\"status\":\"None\",\"eligibleToApply\":true,\"prescreened\":true}}";
            PXSettings.IssuerService.ResetToDefaults();
            PXSettings.IssuerService.ArrangeResponse(mockResponse);

            Dictionary<string, string> headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-msaprofile", "PUID=123456789qwerta"
                }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, flights, headers);
            PXSettings.IssuerService.ResetToDefaults();

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            ClientAction clientAction = pidls.First().ClientAction;
            Assert.AreEqual(clientAction.ActionType, ClientActionType.RestAction);
            Assert.IsTrue(clientAction.Context.ToString().Contains($"https://{{pifd-endpoint}}/users/{{userId}}/paymentInstrumentsEx?language=en-US&partner={partner}&operation=apply&country=US"));
            Assert.IsTrue(clientAction.Context.ToString().Contains("\"cardProduct\": \"XboxCreditCard\""));
            Assert.IsTrue(clientAction.Context.ToString().Contains("\"referrerId\": \"123\""));
        }

        [DataRow("storify", "PendingOnIssuer", false, true)]
        [DataRow("storify", "Approved", false, true)]
        [DataRow("storify", "Approved", false, true, "PXXboxCardApplyDisableStoreButtonNavigation")]
        [DataRow("storify", "Error", false, true)]
        [DataRow("storify", "None", false, true)]
        [DataTestMethod]
        public async Task ApplyPaymentInstrument_XboxCoBrandedCard_EligibilityErrorScreens(string partner, string status, bool eligibleToApply, bool prescreened, string flight = "")
        {
            // Needs to be updated to work with issuer service

            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?type=mc&scenario=xboxCoBrandedCard&partner={partner}&operation=Apply&language=en-US&family=credit_card&country=US";
            string mockResponse = $"{{\"status\":\"{status}\",\"eligibleToApply\":{eligibleToApply.ToString().ToLower()},\"prescreened\":{prescreened.ToString().ToLower()}}}";
            PXSettings.IssuerService.ResetToDefaults();
            PXSettings.IssuerService.ArrangeResponse(mockResponse);

            Dictionary<string, string> headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-msaprofile", "PUID=123456789qwerta"
                }
            };

            string flightString = "PXXboxCardApplyEnableFeedbackButton";

            if (!string.IsNullOrEmpty(flight))
            {
                flightString += "," + flight;
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, flightString, headers);

            // Assert
            if (string.Equals(status, "PendingOnIssuer"))
            {
                HeadingDisplayHint heading = pidls.First().GetDisplayHintById("xboxCoBrandedCardApplyPendingHeading") as HeadingDisplayHint;
                TextDisplayHint text = pidls.First().GetDisplayHintById("xboxCoBrandedCardApplyPendingText") as TextDisplayHint;
                ButtonDisplayHint button = pidls.First().GetDisplayHintById("xboxCardApplyNotEligibleBackButton") as ButtonDisplayHint;
                ButtonDisplayHint giveFeedbackButton = pidls.First().GetDisplayHintById("xboxCardPendingGiveFeedbackButton") as ButtonDisplayHint;
                Assert.AreEqual(heading.DisplayContent, "We noticed you recently submitted an application");
                Assert.AreEqual(text.DisplayContent, "You can check the status of your application at myapplicationstatus.com. Do you still want to proceed?");
                Assert.AreEqual(button.Action.ActionType, "gohome");
                Assert.AreEqual(giveFeedbackButton.Action.DestinationId, "giveFeedback");
            }
            else if (string.Equals(status, "Approved"))
            {
                HeadingDisplayHint heading = pidls.First().GetDisplayHintById("xboxCardApplyCardAlreadyIssuedHeading") as HeadingDisplayHint;
                TextDisplayHint text = pidls.First().GetDisplayHintById("xboxCardApplyCardAlreadyIssuedText") as TextDisplayHint;
                TextDisplayHint subtext = pidls.First().GetDisplayHintById("xboxCardApplyCardAlreadyIssuedSubtext") as TextDisplayHint;
                ButtonDisplayHint giveFeedbackButton = pidls.First().GetDisplayHintById("xboxCardApprovedGiveFeedbackButton") as ButtonDisplayHint;
                Assert.AreEqual(heading.DisplayContent, "Welcome back!");
                Assert.IsTrue(text.DisplayContent.Contains("Earn 5x card points for every $1 spent on eligible products at the digital Microsoft Store."));
                Assert.IsTrue(subtext.DisplayContent.Contains("Please log in to your Xbox Mastercard account to view your Reward Rules for more information about the rewards associated with your account. Visit BarclaysUS.com/XboxMastercardRewards for the list of eligible products, stores, and services."));
                Assert.AreEqual(giveFeedbackButton.Action.DestinationId, "giveFeedback");

                string buttonDisplayId = flight == "PXXboxCardApplyDisableStoreButtonNavigation" ? "xboxCardGoToStoreSuccessButton" : "xboxCardGoToStoreButton";
                ButtonDisplayHint goToStoreButton = pidls.First().GetDisplayHintById(buttonDisplayId) as ButtonDisplayHint;

                if (flight == "PXXboxCardApplyDisableStoreButtonNavigation")
                {
                    Assert.AreEqual(goToStoreButton.Action.ActionType, DisplayHintActionType.success.ToString());
                }
                else
                {
                    Assert.AreEqual(goToStoreButton.Action.ActionType, DisplayHintActionType.navigate.ToString());
                    Assert.AreEqual(goToStoreButton.Action.DestinationId, "goToStore");
                }
            }
            else if (string.Equals(status, "Error"))
            {
                HeadingDisplayHint heading = pidls.First().GetDisplayHintById("xboxCardApplyInternalErrorHeading") as HeadingDisplayHint;
                TextDisplayHint text = pidls.First().GetDisplayHintById("xboxCardApplyInternalErrorText") as TextDisplayHint;
                ButtonDisplayHint button = pidls.First().GetDisplayHintById("xboxCardApplyInternalErrorBackButton") as ButtonDisplayHint;
                ButtonDisplayHint giveFeedbackButton = pidls.First().GetDisplayHintById("xboxCardErrorIneligibleGiveFeedbackButton") as ButtonDisplayHint;
                Assert.AreEqual(heading.DisplayContent, "Sorry, something went wrong");
                Assert.AreEqual(text.DisplayContent, "Try again in a little while");
                Assert.AreEqual(button.Action.ActionType, "gohome");
                Assert.AreEqual(giveFeedbackButton.Action.DestinationId, "giveFeedback");
            }
            else if (string.Equals(status, "None"))
            {
                HeadingDisplayHint heading = pidls.First().GetDisplayHintById("xboxCardApplyNotEligibleHeading") as HeadingDisplayHint;
                TextDisplayHint text = pidls.First().GetDisplayHintById("xboxCardApplyNotEligibleText") as TextDisplayHint;
                ButtonDisplayHint seeFAQButton = pidls.First().GetDisplayHintById("xboxCardApplyNotEligibleSeeFAQButton") as ButtonDisplayHint;
                ButtonDisplayHint backButton = pidls.First().GetDisplayHintById("xboxCardApplyNotEligibleBackButton") as ButtonDisplayHint;
                ButtonDisplayHint giveFeedbackButton = pidls.First().GetDisplayHintById("xboxCardErrorIneligibleGiveFeedbackButton") as ButtonDisplayHint;
                Assert.AreEqual(heading.DisplayContent, "Sorry, you aren't eligible to apply");
                Assert.AreEqual(text.DisplayContent, "Thank you for your interest in Xbox Mastercard. Unfortunately, you are not currently eligible.");
                Assert.AreEqual(seeFAQButton.Action.DestinationId, "seeFAQ");
                Assert.AreEqual(backButton.Action.ActionType, "gohome");
                Assert.AreEqual(giveFeedbackButton.Action.DestinationId, "giveFeedback");
            }
        }

        [DataRow("officeoobe")]
        [DataRow("oxooobe")]
        [DataRow("webblends")]
        [DataRow("oxodime")]
        [DataRow("oxowebdirect")]
        [DataRow("storify")]
        [DataRow("xboxsubs")]
        [DataRow("xboxsettings")]
        [DataRow("saturn")]
        [DataTestMethod]
        public async Task AddNonCCPI_AddressNoCityState_Fallback(string partner)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?scenario=addressnocitystate&partner={partner}&operation=Add&country=us&language=en-us&family=ewallet&type=paypal";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                Assert.IsFalse(pidl.DataDescription.ContainsKey("displayedPaymentMethodTypes"));
            }
        }

        [DataRow("azure", "add", "us", "en-us", "credit_card", "visa%2Camex%2Cmc%2Chipercard", true, false, null)]
        [DataRow("azure", "add", "us", "en-us", "credit_card", "visa%2Camex%2Cmc%2Chipercard", false, false, null)]
        [DataRow("azure", "add", "us", "en-us", "credit_card", "visa%2Camex%2Cmc%2Chipercard", true, true, "")]
        [DataRow("azure", "add", "us", "en-us", "credit_card", "visa%2Camex%2Cmc%2Chipercard", false, true, "1.16.2")]
        [DataRow("azure", "add", "us", "en-us", "credit_card", "visa%2Camex%2Cmc%2Chipercard", false, true, "1.17.2_jqueryView")]
        [DataRow("azure", "add", "us", "en-us", "credit_card", "visa%2Camex%2Cmc%2Chipercard", false, true, "1.18.2_jqueryView")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_FlightingPXUseEdge_ReturnsPidlWithCorrectEndpoints(string partner, string operation, string country, string language, string family, string type, bool useEdgeTokenization, bool useEdgePIFD, string pidlsdkVersion)
        {
            // Arrange: Account001 has completed profile and country is us, therefore PaymentMethod Pidl should be returned.
            string accountId = "Account001";
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language={language}&partner={partner}&operation={operation}&family={family}&type={type}";
            Dictionary<string, string> requestHeaders = null;
            bool isPIFDEdgeSupported = false;

            // Enabled Flights
            if (useEdgeTokenization)
            {
                PXFlightHandler.AddToEnabledFlights("PXUseEdgeTokenization");
            }

            if (useEdgePIFD)
            {
                PXFlightHandler.AddToEnabledFlights("PXUseEdgePIFD");
            }

            if (!string.IsNullOrWhiteSpace(pidlsdkVersion))
            {
                requestHeaders = new Dictionary<string, string> { { "x-ms-pidlsdk-version", pidlsdkVersion } };
                isPIFDEdgeSupported = pidlsdkVersion.StartsWith("1.17") || pidlsdkVersion.StartsWith("1.18");
            }

            await GetRequest(
                url,
                requestHeaders,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    var pidls = ReadPidlResourceFromJson(responseBody);

                    pidls.ForEach(
                        pidl =>
                        {
                            Assert.AreEqual(GlobalConstants.PidlDescriptionTypes.PaymentMethod, pidl.Identity["description_type"]);
                            Assert.AreEqual(operation, pidl.Identity["operation"]);
                            Assert.AreEqual(country.ToLower(), pidl.Identity["country"]);

                            string[] propNames = { "details.accountToken", "details.cvvToken", "details.permission.hmac" };
                            foreach (var propName in propNames)
                            {
                                var propDescription = pidl.TryGetPropertyDescription(propName);
                                var hasEdgeTokenization = propDescription.UseEdgeTokenization ?? false;
                                Assert.IsTrue(useEdgeTokenization ? hasEdgeTokenization : !hasEdgeTokenization, "tokenization endpoint is not correct");
                            }

                            // Verify Submit Url
                            var submitButton = pidl.GetDisplayHintById("saveNextButton") as ButtonDisplayHint;
                            Assert.IsNotNull(submitButton, "Submit button is expected");
                            var context = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(submitButton.Action.Context));
                            Assert.IsTrue(string.Equals("POST", context.Method, StringComparison.OrdinalIgnoreCase));
                            Assert.IsTrue(context.Href.StartsWith(useEdgePIFD && isPIFDEdgeSupported ? "https://{pifdedge-endpoint}" : "https://{pifd-endpoint}", StringComparison.OrdinalIgnoreCase), "PIFD endpoint is not correct");
                        });
                });
        }

        [DataRow("commercialstores", "x-ms-flight", "showMiddleName", "", "virtual", "invoice_basic", true)]
        [DataRow("commercialstores", "x-ms-flight", "showMiddleName", "", "virtual", "invoice_check", true)]
        [DataRow("commercialstores", "x-ms-flight", "", "", "virtual", "invoice_basic", false)]
        [DataRow("commercialstores", "x-ms-flight", "", "", "virtual", "invoice_check", false)]
        [DataRow("officesmb", "x-ms-flight", "showMiddleName,", "", "virtual", "invoice_basic", true)]
        [DataRow("officesmb", "x-ms-flight", "showMiddleName,", "", "virtual", "invoice_check", true)]
        [DataRow("officesmb", "x-ms-flight", "", "", "virtual", "invoice_basic", false)]
        [DataRow("officesmb", "x-ms-flight", "", "", "virtual", "invoice_check", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ShowMiddleName(string partner, string headerKey, string allHeaderValue, string leftoverHeader, string family, string type, bool isVisible)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&family={family}&type={type}&partner={partner}&operation=add";

            if (string.Equals(partner, "officesmb", StringComparison.CurrentCultureIgnoreCase))
            {
                string pssmockResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}},\"update\":{\"template\":\"defaulttemplate\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[]},\"enableVirtualFamilyPM\":{\"applicableMarkets\":[]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithPartnerHeader(url, headerKey, allHeaderValue, leftoverHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (PIDLResource profilePidl in pidls)
            {
                DisplayHint addressMiddleName = profilePidl.GetDisplayHintById("addressMiddleName");
                Assert.AreEqual(addressMiddleName != null, isVisible);
            }
        }

        [DataRow("northstarweb", "visa", "update", HttpStatusCode.OK, true)]
        [DataRow("northstarweb", "visa", "replace", HttpStatusCode.OK, true)]
        [DataRow("northstarweb", "visa", "add", HttpStatusCode.OK, false)]
        [DataRow("defaulttemplate", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "add", HttpStatusCode.OK, false)]
        [DataRow("twopage", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "add", HttpStatusCode.OK, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_RemoveDefaultValuesForAddressFields(string partner, string cardType, string operation, HttpStatusCode expectedStatusCode, bool defaultValueRemovedExpected)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation={operation}&family=credit_card&type={cardType}";
            bool defaultValueRemoved = true;

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, expectedStatusCode);
            var displayHint = pidls[0].GetDisplayHintById(Constants.DisplayHintIds.CVV) as PropertyDisplayHint;

            foreach (var pidl in pidls)
            {
                foreach (string addressFieldPropertyName in Constants.AddressFieldsWithDefaultValueNotNeededForUpdateAndReplace)
                {
                    PropertyDescription propertyDescription = pidl.GetPropertyDescriptionByPropertyName(addressFieldPropertyName);
                    if (propertyDescription != null && propertyDescription.DefaultValue != null)
                    {
                        defaultValueRemoved = false;
                    }
                }
            }

            // Assert
            if (expectedStatusCode == HttpStatusCode.OK)
            {
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            }

            if (partner == Constants.PartnerNames.DefaultTemplate || partner == Constants.PartnerNames.TwoPage)
            {
                Assert.AreEqual(Constants.DisplayContent.DisplayHelpNameCVV, displayHint.DisplayHelpSequenceText);
            }

            Assert.AreEqual(defaultValueRemoved, defaultValueRemovedExpected);
        }

        [DataRow(@"{""kty"":""RSA"",""extractable"":true,""n"":""5JKsI5gExaiOxUuRwT0mhdK46dyiYQOvLGFrRUmspxoRg86s3DuGlT9bIVl4UoGwANVY7xQvjlVXb7jy4sUXLeLxflHv2eBTfKrJHGXb2iTGlCsnoVx25CFUjXF68iDJWFjmItKySPS3GjYKxHYb0sAC+ymSvxDVd8cAquM3IHvF9mqJoisrIVc0H3ctWOPXfYl9RTNtdeKoPhHHLpqMthWJ2Hmth9LQvLj+9pAnz9aca8z5LmLQYPSaCHOoQikVSR4hJZZ0cyYw+stKLvWXnIovxP2bkIak99jnKzD0L6wWnkrpC2zDR5btqNdk38dJgKQ3VkUYqKy6KSqoVrdaRQ=="",""e"":""AQAB""}", "00C0C88DD51847D869", "xbox")]
        [DataRow(@"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5JKsI5gExaiOxUuRwT0mhdK46dyiYQOvLGFrRUmspxoRg86s3DuGlT9bIVl4UoGwANVY7xQvjlVXb7jy4sUXLeLxflHv2eBTfKrJHGXb2iTGlCsnoVx25CFUjXF68iDJWFjmItKySPS3GjYKxHYb0sAC+ymSvxDVd8cAquM3IHvF9mqJoisrIVc0H3ctWOPXfYl9RTNtdeKoPhHHLpqMthWJ2Hmth9LQvLj+9pAnz9aca8z5LmLQYPSaCHOoQikVSR4hJZZ0cyYw+stKLvWXnIovxP2bkIak99jnKzD0L6wWnkrpC2zDR5btqNdk38dJgKQ3VkUYqKy6KSqoVrdaRQIDAQAB", "00C0C88DD51847D869", "storify")]
        [DataRow(@"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5JKsI5gExaiOxUuRwT0mhdK46dyiYQOvLGFrRUmspxoRg86s3DuGlT9bIVl4UoGwANVY7xQvjlVXb7jy4sUXLeLxflHv2eBTfKrJHGXb2iTGlCsnoVx25CFUjXF68iDJWFjmItKySPS3GjYKxHYb0sAC+ymSvxDVd8cAquM3IHvF9mqJoisrIVc0H3ctWOPXfYl9RTNtdeKoPhHHLpqMthWJ2Hmth9LQvLj+9pAnz9aca8z5LmLQYPSaCHOoQikVSR4hJZZ0cyYw+stKLvWXnIovxP2bkIak99jnKzD0L6wWnkrpC2zDR5btqNdk38dJgKQ3VkUYqKy6KSqoVrdaRQIDAQAB", "00C0C88DD51847D869", "xboxsubs")]
        [DataRow(@"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5JKsI5gExaiOxUuRwT0mhdK46dyiYQOvLGFrRUmspxoRg86s3DuGlT9bIVl4UoGwANVY7xQvjlVXb7jy4sUXLeLxflHv2eBTfKrJHGXb2iTGlCsnoVx25CFUjXF68iDJWFjmItKySPS3GjYKxHYb0sAC+ymSvxDVd8cAquM3IHvF9mqJoisrIVc0H3ctWOPXfYl9RTNtdeKoPhHHLpqMthWJ2Hmth9LQvLj+9pAnz9aca8z5LmLQYPSaCHOoQikVSR4hJZZ0cyYw+stKLvWXnIovxP2bkIak99jnKzD0L6wWnkrpC2zDR5btqNdk38dJgKQ3VkUYqKy6KSqoVrdaRQIDAQAB", "00C0C88DD51847D869", "xboxsettings")]
        [DataRow(@"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5JKsI5gExaiOxUuRwT0mhdK46dyiYQOvLGFrRUmspxoRg86s3DuGlT9bIVl4UoGwANVY7xQvjlVXb7jy4sUXLeLxflHv2eBTfKrJHGXb2iTGlCsnoVx25CFUjXF68iDJWFjmItKySPS3GjYKxHYb0sAC+ymSvxDVd8cAquM3IHvF9mqJoisrIVc0H3ctWOPXfYl9RTNtdeKoPhHHLpqMthWJ2Hmth9LQvLj+9pAnz9aca8z5LmLQYPSaCHOoQikVSR4hJZZ0cyYw+stKLvWXnIovxP2bkIak99jnKzD0L6wWnkrpC2zDR5btqNdk38dJgKQ3VkUYqKy6KSqoVrdaRQIDAQAB", "00C0C88DD51847D869", "saturn")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PayPal_HEC(string expectedPublicKey, string expectedSerialNumber, string partner)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family=ewallet&type=paypal";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.AreEqual(1, pidls.Count, "Only one PayPal PIDL is expected");
            PropertyDescription encryptedPasswordDescription = pidls[0].GetPropertyDescriptionByPropertyName("encryptedPassword");
            if (encryptedPasswordDescription != null)
            {
                Assert.AreEqual(
                    expectedPublicKey,
                    encryptedPasswordDescription.DataProtection.Parameters["publicKey"],
                    "PayPal HEC Public Key is not as expected");
                Assert.AreEqual(
                    expectedSerialNumber,
                    encryptedPasswordDescription.DataProtection.Parameters["serialNumber"],
                    "PayPal HEC Public Key is not as expected");
            }
        }

        [DataRow(true, "xboxsettings", true, "ewallet.paypalQrCode")]
        [DataRow(true, "xboxsettings", false, "ewallet.paypalQrCode")]
        [DataRow(true, "webblends", true, "ewallet.paypalRedirect")]
        [DataRow(true, "webblends", false, "ewallet.paypalRedirect")]
        [DataRow(false, "xboxsettings", true, "ewallet.paypalQrCode")]
        [DataRow(false, "xboxsettings", false, "ewallet.paypalQrCode")]
        [DataRow(false, "webblends", true, "ewallet.paypalRedirect")]
        [DataRow(false, "webblends", false, "ewallet.paypalRedirect")]
        [DataRow(true, "xbox", true, "ewallet.paypalQrCode")]
        [DataRow(false, "xbox", true, "ewallet.paypalQrCode")]
        [DataRow(false, "xbox", false, "ewallet.paypal")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PayPal_QRCode(bool completePrerequisites, string partner, bool isFlightEnabled, string expectedValue)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family=ewallet&type=paypal&completePrerequisites={completePrerequisites}";
            List<string> flights = new List<string>();
            if (isFlightEnabled)
            {
                flights.Add("PXEnablePaypalSecondScreenForXbox");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            var resourceId = pidls[0].DataDescription["paymentMethodResource_id"] as PropertyDescription;
            var defaultValue = resourceId.DefaultValue;

            // Assert
            Assert.AreEqual(1, pidls.Count, "Only one PayPal PIDL is expected");
            Assert.AreEqual(expectedValue, defaultValue, "The scenario is not correct.");
        }

        [DataRow(true, "xboxsettings", "us", "ewallet.venmo", true, true, true)]
        [DataRow(false, "xboxsettings", "us", "ewallet.venmo", true, true, true)]
        [DataRow(true, "storify", "us", "ewallet.venmo", true, true, true)]
        [DataRow(false, "storify", "us", "ewallet.venmo", true, true, true)]
        [DataRow(false, "storify", "br", "ewallet.venmo", true, true, false)] // Expected to fail. Venmo not yet available outside US
        [DataRow(true, "xboxsettings", "us", "ewallet.venmo", false, false, false)] // Validate if turning flighting off works. Expected to fail
        [DataRow(false, "xboxsettings", "us", "ewallet.venmo", false, false, false)] // Validate if turning flighting off works. Expected to fail
        [DataRow(true, "storify", "us", "ewallet.venmo", false, false, false)] // Validate if turning flighting off works. Expected to fail
        [DataRow(false, "storify", "us", "ewallet.venmo", false, false, false)] // Validate if turning flighting off works. Expected to fail
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Venmo_QRCode(bool completePrerequisites, string partner, string country, string expectedValue, bool enablePxEnableVenmo, bool enablePxEnableSelectPMAddPIVenmo, bool shouldShowVenmoQrCodeFlow)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation=add&family=ewallet&type=venmo&completePrerequisites={completePrerequisites}";
            string expectedException = "Assert.AreEqual failed. Expected:<OK>. Actual:<BadRequest>. ";

            // Act
            if (enablePxEnableVenmo)
            {
                PXFlightHandler.AddToEnabledFlights("PxEnableVenmo");
            }

            if (enablePxEnableSelectPMAddPIVenmo)
            {
                PXFlightHandler.AddToEnabledFlights("PxEnableSelectPMAddPIVenmo");
            }

            try
            {
                List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);
                var resourceId = pidls[0].DataDescription["paymentMethodResource_id"] as PropertyDescription;
                var defaultValue = resourceId.DefaultValue;

                // Assert
                Assert.AreEqual(1, pidls.Count, "Only one Venmo PIDL is expected");
                Assert.AreEqual(expectedValue, defaultValue, "The scenario is not correct.");

                if (shouldShowVenmoQrCodeFlow)
                {
                    var hintId = pidls[0].DisplayPages[0].HintId;
                    Assert.AreEqual("venmoPage", hintId, "The hintId is not correct.");
                }
                else
                {
                    var hintId = pidls[0].DisplayPages[0].HintId;
                    Assert.AreEqual("genericPage", hintId, "The hintId is not correct.");
                }
            }
            catch (Exception ex)
            {
                Assert.IsTrue(ex.Message.Contains(expectedException), string.Format("Failure was detected but not as expected"));
            }
        }

        [DataRow(true, "officesmb", "ewallet", "paypal", "en-US")]
        [DataRow(false, "officesmb", "ewallet", "paypal", "en-US")]
        [DataRow(true, "onepage", "ewallet", "paypal", "en-US")]
        [DataRow(false, "onepage", "ewallet", "paypal", "en-US")]
        [DataRow(true, "twopage", "ewallet", "paypal", "en-US")]
        [DataRow(false, "twopage", "ewallet", "paypal", "en-US")]
        [DataRow(true, "defaulttemplate", "ewallet", "paypal", "en-US")]
        [DataRow(true, "defaulttemplate", "ewallet", "paypal", "fr-FR")]
        [DataRow(true, "defaulttemplate", "ewallet", "paypal", "af-ZA")]
        [DataRow(false, "defaulttemplate", "ewallet", "paypal", "en-US")]
        [DataRow(true, "selectpmbuttonlist", "ewallet", "paypal", "en-US")]
        [DataRow(false, "selectpmbuttonlist", "ewallet", "paypal", "en-US")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PaypalForPSSPartnerCheck(bool completePrerequisites, string partner, string paymentMethodFamily, string paymentMethodType, string language)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language={language}&partner={partner}&operation=add&family={paymentMethodFamily}&type={paymentMethodType}&completePrerequisites={completePrerequisites}";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK);
            var payPalText = pidls[0].GetDisplayHintById(Constants.DisplayHintIds.PayPalText1) as TextDisplayHint;

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            if (language == Constants.Languages.EnUS)
            {
                Assert.AreEqual(Constants.DisplayContent.PayPalContentEN, payPalText.DisplayContent);
            }
            else if (language == Constants.Languages.FrFR)
            {
                Assert.AreEqual(Constants.DisplayContent.PayPalContentFR, payPalText.DisplayContent);
            }
            else if (language == Constants.Languages.AfZA)
            {
                Assert.AreEqual(Constants.DisplayContent.PayPalContentAF, payPalText.DisplayContent);
            }
        }

        [DataRow(true, "xboxsettings", "ewallet.venmo")]
        [DataRow(false, "xboxsettings", "ewallet.venmo")]
        [DataRow(true, "storify", "ewallet.venmo")]
        [DataRow(false, "storify", "ewallet.venmo")]
        [DataRow(true, "webblends", "ewallet.venmo")]
        [DataRow(false, "webblends", "ewallet.venmo")]
        [DataRow(true, "defaulttemplate", "ewallet.venmo")]
        [DataRow(false, "defaulttemplate", "ewallet.venmo")]
        [DataRow(true, "onepage", "ewallet.venmo")]
        [DataRow(false, "onepage", "ewallet.venmo")]
        [DataRow(true, "officesmb", "ewallet.venmo")]
        [DataRow(false, "officesmb", "ewallet.venmo")]
        [DataRow(true, "twopage", "ewallet.venmo")]
        [DataRow(false, "twopage", "ewallet.venmo")]
        [DataRow(true, "cart", "ewallet.venmo")]
        [DataRow(false, "cart", "ewallet.venmo")]
        [DataRow(true, "amcweb", "ewallet.venmo")]
        [DataRow(false, "amcweb", "ewallet.venmo")]
        [DataRow(true, "oxowebdirect", "ewallet.venmo")]
        [DataRow(false, "oxowebdirect", "ewallet.venmo")]
        [DataRow(true, "oxodime", "ewallet.venmo")]
        [DataRow(false, "oxodime", "ewallet.venmo")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Venmo(bool completePrerequisites, string partner, string expectedResourceId)
        {
            PXFlightHandler.AddToEnabledFlights("PxEnableVenmo");
            PXFlightHandler.AddToEnabledFlights("PxEnableSelectPMAddPIVenmo");

            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family=ewallet&type=venmo&completePrerequisites={completePrerequisites}";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            var resourceId = pidls[0].DataDescription["paymentMethodResource_id"] as PropertyDescription;

            // Assert
            Assert.AreEqual(1, pidls.Count, "Only one Venmo PIDL is expected");
            Assert.AreEqual(expectedResourceId, resourceId.DefaultValue, "The scenario is not correct.");
        }

        [DataRow(true, "playxbox", "ewallet.venmoQrCode")]
        [DataRow(false, "playxbox", "ewallet.venmoQrCode")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PlayXbox_Venmo_withPSS(bool completePrerequisites, string partner, string expectedResourceId)
        {
            // Arrange
            PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsPlayXbox);
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family=ewallet&type=venmo&completePrerequisites={completePrerequisites}";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            var resourceId = pidls[0].DataDescription["paymentMethodResource_id"] as PropertyDescription;

            // Assert
            Assert.AreEqual(1, pidls.Count, "Only one Venmo PIDL is expected");
            Assert.AreEqual(expectedResourceId, resourceId.DefaultValue, "The scenario is not correct.");
        }

        [DataRow("us", "displayOptionalFields", new string[] { "addressLine2" })]
        [DataRow("in", "displayOptionalFields", new string[] { "addressLine2", "addressLine3" })]
        [DataRow("us", null, new string[] { "addressLine2" })]
        [DataRow("in", null, new string[] { "addressLine2", "addressLine3" })]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_DisplayOptionalFields_Scenario(string country, string scenario, string[] optionalFieldsInTest)
        {
            string[] partners = new string[] { "oxowebdirect", "webblends_inline", "xbox" };
            string[] operations = new string[] { "add", "update" };

            foreach (string partner in partners)
            {
                foreach (string operation in operations)
                {
                    string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation={operation}&family=credit_card&type=visa&scenario={scenario}";
                    List<PIDLResource> pidls = await GetPidlFromPXService(url);
                    Assert.IsNotNull(pidls, "Returned PIDLs are expected to not be null");
                    foreach (PIDLResource pidl in pidls)
                    {
                        Assert.IsNotNull(pidl, "Returned PIDL is expected to not be null");
                        foreach (string optionalField in optionalFieldsInTest)
                        {
                            PropertyDisplayHint optionalFieldObj = pidl.GetDisplayHintById(optionalField) as PropertyDisplayHint;
                            Assert.IsNotNull(optionalFieldObj, $"{optionalField} missing for {country} market");
                            bool isHiddenProperty = optionalFieldObj.IsHidden.HasValue && optionalFieldObj.IsHidden.Value;
                            if (string.Equals(partner, "xbox", StringComparison.OrdinalIgnoreCase)
                                || (string.Equals(partner, "webblends_inline", StringComparison.OrdinalIgnoreCase)
                                    && !string.Equals(scenario, "displayOptionalFields", StringComparison.OrdinalIgnoreCase)))
                            {
                                Assert.IsTrue(isHiddenProperty, "IsHidden property was not set to true for expected partner under null scenario");
                            }
                            else
                            {
                                Assert.IsFalse(isHiddenProperty, "IsHidden property was not set to false for expected partner under displayOptionalFields scenario");
                            }
                        }
                    }
                }
            }
        }

        // In  India, UPI is an allowed payment method when flight IndiaUPIEnable is on for webblends
        [DataRow("in", "webblends", true, true)]
        [DataRow("in", "webblends", false, false)]
        [DataRow("us", "webblends", false, true)]
        [DataRow("in", "amcweb", true, true)]
        [DataRow("in", "amcweb", false, false)]
        [DataRow("us", "amcweb", false, true)]
        [DataRow("in", "defaulttemplate", true, true, "upi")]
        [DataRow("in", "defaulttemplate", true, true, "upi_commercial")]
        [DataRow("in", "defaulttemplate", false, false)]
        [DataRow("us", "defaulttemplate", false, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_India_TypesHasUPI(string country, string partner, bool shouldUPIBeAvailable, bool isFlightPassed, string type = "upi")
        {
            string url = $"/v7.0/Account004/paymentMethodDescriptions?partner={partner}&operation=add&family=real_time_payments&type={type}&country={country}&language=en-US";
            List<string> exposedFlightFeatures = new List<string>();

            if (isFlightPassed == true)
            {
                exposedFlightFeatures.Add("PxEnableUpi");
                exposedFlightFeatures.Add("PxCommercialEnableUpi");
                exposedFlightFeatures.Add("IndiaUPIEnable");
            }

            if (shouldUPIBeAvailable == true)
            {
                List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, exposedFlightFeatures);
                Assert.IsNotNull(pidls);

                var actualTypes = pidls.Select(pidl =>
                {
                    return string.Format("{0}.{1}", pidl.Identity["family"], pidl.Identity["type"]);
                }).ToArray();

                var expectedTypes = PimsMockResponseProvider.GetPaymentMethods(country, "real_time_payments", type).Select(pm =>
                {
                    return string.Format("{0}.{1}", pm.PaymentMethodFamily, pm.PaymentMethodType);
                }).ToArray();

                CollectionAssert.AreEquivalent(expectedTypes, actualTypes);

                foreach (var pidl in pidls)
                {
                    Assert.IsTrue(pidl.DataDescription.ContainsKey("riskData"), "Risk data is expected for UPI");

                    var dataDescriptionRiskdata = (List<PIDLResource>)pidl.DataDescription["riskData"];
                    Assert.IsNotNull(dataDescriptionRiskdata, "RiskData is missing from DataDescription");

                    dataDescriptionRiskdata[0].DataDescription.TryGetValue("greenId", out object greenId);
                    Assert.IsNotNull(greenId, "GreenId is missing in RiskData");
                }
            }
            else
            {
                try
                {
                    List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, exposedFlightFeatures);
                    Assert.IsTrue(false, "Expected to throw exeption and it should not reach here.");
                }
                catch (Exception ex)
                {
                    Assert.AreNotEqual(ex.Message, string.Empty, string.Format("Failure was detected but is expected"));
                }
            }
        }

        // In  India, Rupay is an allowed payment method when flight IndiaRupayEnable
        [DataRow("in", "defaulttemplate", true, true)]
        [DataRow("in", "defaulttemplate", false, false)]
        [DataRow("us", "defaulttemplate", false, false)]
        [DataRow("us", "defaulttemplate", false, true)]
        [DataRow("in", "webblends", true, true)]
        [DataRow("in", "webblends", false, false)]
        [DataRow("in", "cart", true, true)]
        [DataRow("in", "cart", false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_India_TypesHasRupay(string country, string partner, bool shouldRupayBeAvailable, bool isFlightPassed)
        {
            string url = $"/v7.0/Account004/paymentMethodDescriptions?partner={partner}&operation=add&family=credit_card&type=rupay&country={country}&language=en-US";
            List<string> exposedFlightFeatures = new List<string>();

            if (isFlightPassed == true)
            {
                exposedFlightFeatures.Add("PXEnableRupayForIN");
                exposedFlightFeatures.Add("IndiaRupayEnable");
            }

            if (shouldRupayBeAvailable == true)
            {
                List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, exposedFlightFeatures);
                Assert.IsNotNull(pidls);

                var actualTypes = pidls.Select(pidl =>
                {
                    return string.Format("{0}.{1}", pidl.Identity["family"], pidl.Identity["type"]);
                }).ToArray();

                var expectedTypes = PimsMockResponseProvider.GetPaymentMethods(country, "credit_card", "rupay").Select(pm =>
                {
                    return string.Format("{0}.{1}", pm.PaymentMethodFamily, pm.PaymentMethodType);
                }).ToArray();

                CollectionAssert.AreEquivalent(expectedTypes, actualTypes);
            }
            else
            {
                try
                {
                    List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, exposedFlightFeatures);
                    Assert.IsTrue(false, "Expected to throw exeption and it should not reach here.");
                }
                catch (Exception ex)
                {
                    Assert.AreNotEqual(ex.Message, string.Empty, string.Format("Failure was detected but is expected"));
                }
            }
        }

        [DataRow("azure", true, "in", true)]
        [DataRow("commercialstores", true, "in", true)]
        [DataRow("azure", false, "in", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_CheckForRupay(string partner, bool needsRupay, string country, bool includeRupayInAllowedPaymentMethods)
        {
            string operation = "select";
            string accountId = "Account001";
            string language = "en-us";
            string allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.venmo%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22%22%5D";

            if (includeRupayInAllowedPaymentMethods)
            {
                allowedPaymentMethods = "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22ewallet.paypal%22%2C%22ewallet.venmo%22%2C%22ewallet.stored_value%22%2C%22mobile_billing_non_sim.dk3-dk-nonsim%22%2C%22mobile_billing_non_sim.dkt-dk-nonsim%22%2C%22mobile_billing_non_sim.tli-dk-nonsim%22%2C%22mobile_billing_non_sim.tor-dk-nonsim%22%2C%22real_time_payments.upi_commercial%22%2C%22credit_card.rupay%22%5D";
            }

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            PXFlightHandler.AddToEnabledFlights("PXEnableRupayForIN");
            PXFlightHandler.AddToEnabledFlights("IndiaRupayEnable");
            PXFlightHandler.AddToEnabledFlights("vnext");

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(needsRupay == pidlString.Contains("rupay"));
        }

        // Verify fields on UPI Add page
        [DataRow("webblends", "in", "en-us", true, true)]
        [DataRow("webblends", "us", "en-us", true, false)]
        [DataRow("webblends", "in", "en-us", false, false)]
        [DataRow("webblends", "us", "en-us", false, false)]
        [DataRow("amcweb", "in", "en-us", true, true)]
        [DataRow("amcweb", "us", "en-us", true, false)]
        [DataRow("amcweb", "in", "en-us", false, false)]
        [DataRow("amcweb", "us", "en-us", false, false)]
        [DataRow("defaulttemplate", "in", "en-us", true, true)]
        [DataRow("defaulttemplate", "us", "en-us", true, false)]
        [DataRow("defaulttemplate", "in", "en-us", false, false)]
        [DataRow("defaulttemplate", "us", "en-us", false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_India_Add_VerifyFields(string partner, string country, string language, bool flightPassed, bool shouldRenderUPIPage)
        {
            string url = $"/v7.0/Account004/paymentMethodDescriptions?partner={partner}&operation=add&family=real_time_payments&type=upi&country={country}&language=en-US";

            List<string> exposedFlightFeatures = new List<string>();
            if (flightPassed)
            {
                exposedFlightFeatures.Add("PxEnableUpi");
            }

            if (shouldRenderUPIPage)
            {
                List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, exposedFlightFeatures);
                Assert.IsNotNull(pidls);

                foreach (PIDLResource pidl in pidls)
                {
                    var page = pidl.DisplayPages[0];
                    Assert.AreEqual(page.HintId, "realTimePaymentsUpiAddPage");
                    var upi_heading = (HeadingDisplayHint)page.Members[0];
                    Assert.AreEqual(upi_heading.HintId, "addRealTimePaymentUpiHeading");
                    var upi_accept_message = (TextDisplayHint)page.Members[1];
                    Assert.AreEqual(upi_accept_message.HintId, "upiAcceptMessage");
                    var upi_accept_providers = (TextDisplayHint)page.Members[2];
                    Assert.AreEqual(upi_accept_providers.HintId, "upiAcceptProviders");
                    var upi_vpa = (PropertyDisplayHint)page.Members[3];
                    Assert.AreEqual(upi_vpa.HintId, "upi_vpa");
                    var upi_payment_summary_text = (TextDisplayHint)page.Members[4];
                    Assert.AreEqual(upi_payment_summary_text.HintId, "paymentSummaryText");
                    var upi_payment_changes_settings_textgroup = (TextGroupDisplayHint)page.Members[5];
                    Assert.AreEqual(upi_payment_changes_settings_textgroup.HintId, "paymentChangeSettingsTextGroup");
                    var upi_microsoft_privacy_textgroup = (TextGroupDisplayHint)page.Members[6];
                    Assert.AreEqual(upi_microsoft_privacy_textgroup.HintId, "microsoftPrivacyTextGroup");
                    var upi_cancelsave_group = (GroupDisplayHint)page.Members[7];
                    Assert.AreEqual(upi_cancelsave_group.HintId, "cancelSaveGroup");
                }
            }
            else
            {
                try
                {
                    List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, exposedFlightFeatures);
                    Assert.IsTrue(false, "Expected to throw exeption and it should not reach here.");
                }
                catch (Exception ex)
                {
                    Assert.AreNotEqual(ex.Message, string.Empty, string.Format("Failure was detected but is expected as UPI is not available for given country/flight combination"));
                }
            }
        }

        [DataRow("defaulttemplate", "in", "en-us", true, true, "upi_commercial")]
        [DataRow("defaulttemplate", "us", "en-us", true, false, "upi_commercial")]
        [DataRow("defaulttemplate", "in", "en-us", false, false, "upi_commercial")]
        [DataRow("defaulttemplate", "us", "en-us", false, false, "upi_commercial")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_UpiCommercialIndia_Add_VerifyFields(string partner, string country, string language, bool flightPassed, bool shouldRenderUPIPage, string type)
        {
            string url = $"/v7.0/Account004/paymentMethodDescriptions?partner={partner}&operation=add&family=real_time_payments&type={type}&country={country}&language=en-US";

            List<string> exposedFlightFeatures = new List<string>();
            if (flightPassed)
            {
                exposedFlightFeatures.Add("PxCommercialEnableUpi");
            }

            if (shouldRenderUPIPage)
            {
                List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, exposedFlightFeatures);
                Assert.IsNotNull(pidls);

                foreach (PIDLResource pidl in pidls)
                {
                    var page = pidl.DisplayPages[0];
                    Assert.AreEqual(page.HintId, "realTimePaymentsUpiCommercialAddPage");
                    var upi_heading = (HeadingDisplayHint)page.Members[0];
                    Assert.AreEqual(upi_heading.HintId, "addRealTimePaymentUpiHeading");
                    var upi_accept_providers = (TextDisplayHint)page.Members[1];
                    Assert.AreEqual(upi_accept_providers.HintId, "upiAcceptProviders");
                    var upi_vpa = (PropertyDisplayHint)page.Members[2];
                    Assert.AreEqual(upi_vpa.HintId, "upi_vpa");

                    var upi_microsoft_privacy_textgroup = (TextGroupDisplayHint)page.Members[3];
                    Assert.AreEqual(upi_microsoft_privacy_textgroup.HintId, "microsoftPrivacyTextGroup");
                    var upi_cancelsave_group = (GroupDisplayHint)page.Members[4];
                    Assert.AreEqual(upi_cancelsave_group.HintId, "cancelSaveGroup");
                }
            }
            else
            {
                try
                {
                    List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, exposedFlightFeatures);
                    Assert.IsTrue(false, "Expected to throw exeption and it should not reach here.");
                }
                catch (Exception ex)
                {
                    Assert.AreNotEqual(ex.Message, string.Empty, string.Format("Failure was detected but is expected as UPI is not available for given country/flight combination"));
                }
            }
        }

        [DataTestMethod]
        public async Task SelectPaymentMethod_PidlExists()
        {
            PaymentMethodCapabilities ccCapabilities = new PaymentMethodCapabilities();
            PaymentInstrumentDisplayDetails ccDisplay = new PaymentInstrumentDisplayDetails
            {
                Logo = "https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/logo_visa_rect.png",
                Name = "Visa",
            };

            PaymentMethod cc = new PaymentMethod
            {
                PaymentMethodFamily = "credit_card",
                PaymentMethodType = "visa,amex,mc,discover",
                Display = ccDisplay,
                Properties = ccCapabilities,
            };

            List<PaymentMethod> paymentMethods = new List<PaymentMethod> { cc };

            string[] countries = new string[] { "at", "be", "cz", "dk", "de", "my", "nl", "no", "sa", "sg", "sk", "ch", "gb", "us", "ca", "cn", "br", "jp" };
            string[] partners = new string[] { "storify", "xboxsubs", "xboxsettings", "saturn", "oxowebdirect", "webblends", "xbox" };

            foreach (string partner in partners)
            {
                foreach (string country in countries)
                {
                    PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods));

                    string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Select&language=en_US&country={country}";
                    List<PIDLResource> pidls = await GetPidlFromPXService(url);

                    Assert.IsNotNull(pidls, $"Returned PIDL is null for partner: {partner}, country: {country}.");

                    PXSettings.PimsService.Responses.Clear();
                }
            }
        }

        [DataRow(GlobalConstants.Partners.Azure)]
        [DataRow(GlobalConstants.Partners.Cart)]
        [DataRow(GlobalConstants.Partners.CommercialStores)]
        [DataRow(GlobalConstants.Partners.Webblends)]
        [DataRow(GlobalConstants.Partners.XBox)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_DisplayHelpPosition(string partner)
        {
            // Arrange
            string accountId = "Account001";
            string operation = "add";
            string family = "credit_card";
            string country = "us";

            string url = string.Format(
                        "/v7.0/{0}/paymentMethodDescriptions?partner={1}&operation={2}&language=en-us&family={3}&country={4}",
                        accountId,
                        partner,
                        operation,
                        family,
                        country);

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);

                    var pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource resource in pidls)
                    {
                        var propertyDisplayHint = resource.GetDisplayHintById("cvv") as PropertyDisplayHint;

                        if (propertyDisplayHint != null)
                        {
                            Assert.IsNotNull(propertyDisplayHint);
                            if (partner == GlobalConstants.Partners.Cart)
                            {
                                Assert.IsNotNull(propertyDisplayHint.DisplayHelpPosition);
                                Assert.AreEqual("floatRight", propertyDisplayHint.DisplayHelpPosition);
                            }
                            else
                            {
                                Assert.IsNull(propertyDisplayHint.DisplayHelpPosition);
                            }
                        }
                    }
                });
        }

        [DataRow(GlobalConstants.Partners.OfficeSMB, true)]
        [DataRow(GlobalConstants.Partners.OfficeSMB, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_(string partner, bool enableUseTextForCVVHelpLink)
        {
            // Arrange
            string accountId = "Account001";
            string operation = "add";
            string family = "credit_card";
            string country = "us";

            string expectedPSSResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":null}}";

            if (enableUseTextForCVVHelpLink)
            {
                expectedPSSResponse = "{\"add\":{\"template\":\"onepage\",\"features\":{\"useTextForCVVHelpLink\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"useTextForCVVHelpLink\":true,\"cvvDisplayHelpPosition\":\"floatRight\"}]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };

            string url = string.Format(
                        "/v7.0/{0}/paymentMethodDescriptions?partner={1}&operation={2}&language=en-us&family={3}&country={4}",
                        accountId,
                        partner,
                        operation,
                        family,
                        country);

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);

                    var pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource resource in pidls)
                    {
                        var propertyDisplayHint = resource.GetDisplayHintById("cvv") as PropertyDisplayHint;

                        Assert.IsNotNull(propertyDisplayHint);

                        if (enableUseTextForCVVHelpLink)
                        {
                            Assert.IsNotNull(propertyDisplayHint.DisplayHelpPosition);
                            Assert.AreEqual("floatRight", propertyDisplayHint.DisplayHelpPosition);
                            Assert.AreEqual("What is a CVV?", propertyDisplayHint.DisplayHelpSequenceText);
                            Assert.IsTrue(string.IsNullOrEmpty(propertyDisplayHint.DisplayImage));
                        }
                        else
                        {
                            Assert.IsNull(propertyDisplayHint.DisplayHelpPosition);
                            Assert.IsNull(propertyDisplayHint.DisplayHelpSequenceText);
                            Assert.AreEqual("https://pmservices.cp.microsoft-int.com/staticresourceservice/images/v4/cardHints_generic.png", propertyDisplayHint.DisplayImage);
                        }
                    }
                });
        }

        [DataRow("storify", null)]
        [DataRow("saturn", null)]
        [DataRow("xboxsubs", null)]
        [DataRow("xboxsettings", null)]
        [DataRow("amcweb", "PayNow")]
        [DataRow("xbet", null)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPaymentMethod_CUP_Separated(string partner, string scenario)
        {
            List<string> countries = new List<string> { "CN", "NL", "US", "BR" };

            List<string> xboxNativePartners = new List<string> { "storify", "saturn", "xboxsubs", "xboxsettings" };

            foreach (string country in countries)
            {
                string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Select&country={country}&language=en-US";

                if (!string.IsNullOrEmpty(scenario))
                {
                    url += $"&scenario={scenario}";
                }

                List<PIDLResource> pidls = await GetPidlFromPXService(url);

                Assert.IsNotNull(pidls);
                Assert.AreEqual(1, pidls.Count);

                PropertyDisplayHint paymentMethods = pidls[0].GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
                Assert.IsNotNull(paymentMethods);

                Dictionary<string, SelectOptionDescription> options = paymentMethods.PossibleOptions;

                if (xboxNativePartners.Contains(partner))
                {
                    foreach (KeyValuePair<string, SelectOptionDescription> option in options)
                    {
                        string key = option.Key;
                        GroupDisplayHint logosGroup = option.Value.DisplayContent.Members[0] as GroupDisplayHint;

                        bool familyIsGrouped = key.Contains("credit_card") || key.Contains("mobile_billing_non_sim");
                        bool hasOwnGroup = (key.Contains("unionpay_debitcard") || key.Contains("unionpay_creditcard")) || !familyIsGrouped;

                        if (familyIsGrouped && !hasOwnGroup)
                        {
                            Assert.IsTrue(logosGroup.Members.Count >= 1);
                        }
                        else
                        {
                            Assert.AreEqual(1, logosGroup.Members.Count);
                        }
                    }
                }
            }
        }

        [DataRow("webblends", "", false, true)]
        [DataRow("webblends", "", true, false)]
        [DataRow("cart", "", false, false)]
        [DataRow("cart", "", true, false)]
        [DataRow("webblends", "displayOptionalFields", false, false)]
        [DataRow("webblends", "displayOptionalFields", true, false)]
        [DataRow("cart", "displayOptionalFields", false, false)]
        [DataRow("cart", "displayOptionalFields", true, false)]
        [DataRow("officeoobe", "rs5", false, true)]
        [DataRow("officeoobe", "rs5", true, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_VerifyMandatoryFieldsMsg(string partner, string scenario, bool isFlightEnabled, bool isMandatoryMsgExpected)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Add&family=credit_card&type=visa%2Camex%2Cmc%2Cdiscover&country=us&language=en-US&scenario={scenario}";

            List<string> flights = new List<string>();
            if (isFlightEnabled)
            {
                flights.Add("PXRemoveMandatoryFieldsMessage");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls);
            Assert.AreEqual(4, pidls.Count);
            foreach (var pidl in pidls)
            {
                DisplayHint mandatoryMsgDisplayHint = pidl.GetDisplayHintById("mandatory_fields_message");
                if (isMandatoryMsgExpected)
                {
                    Assert.IsNotNull(mandatoryMsgDisplayHint);
                }
                else
                {
                    Assert.IsNull(mandatoryMsgDisplayHint);
                }
            }
        }

        /// <summary>
        /// Checks for the presence of accesibilityName tag for partner :`setupoffice`, operation : `selectinstance`
        /// </summary>
        /// <returns></returns>
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectOperation()
        {
            string accountId = "Account001";
            string country = "in";
            string[] operations = new string[]
            {
                "selectinstance"
            };

            string[] partners = new string[]
            {
                "setupoffice"
            };

            List<string> flights = new List<string>();
            foreach (var partner in partners)
            {
                foreach (var operation in operations)
                {
                    List<PIDLResource> pidls = new List<PIDLResource>();
                    pidls = await GetPidlFromPXServiceWithFlight(
                            string.Format(
                                "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language=en-us&country={3}",
                                accountId,
                                partner,
                                operation,
                                country),
                            flights);
                    Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                    foreach (var pidl in pidls)
                    {
                        var page = pidl.DisplayPages.FirstOrDefault(item => string.Equals(item.HintId, "paymentInstrumentListShowPage"));
                        var paymentInstrumentShowPiMember = page?.Members?.FirstOrDefault(item => string.Equals(item.HintId, "paymentInstrumentShowPi"));

                        if (paymentInstrumentShowPiMember != null)
                        {
                            foreach (var option in (paymentInstrumentShowPiMember as PropertyDisplayHint).PossibleOptions)
                            {
                                if (string.Equals(option.Value.DisplayContent.HintId, "paymentInstrumentItemGroup"))
                                {
                                    foreach (var item in option.Value.DisplayContent.Members)
                                    {
                                        if (string.Equals(item.DisplayCondition.FunctionName, "isUserPICreditCard"))
                                        {
                                            var paymentInstrumentItemCCLogoDisplay = (item as GroupDisplayHint).Members.FirstOrDefault(x => string.Equals(x.HintId, "paymentInstrumentItemCCLogo"));
                                            Assert.IsNull(paymentInstrumentItemCCLogoDisplay);

                                            var logoWithAccessibilityTagDisplay = (item as GroupDisplayHint).Members.FirstOrDefault(x => string.Equals(x.HintId, "paymentInstrumentItemCCLogoWithAccessibilityTag"));
                                            Assert.IsNotNull(logoWithAccessibilityTagDisplay, "paymentInstrumentItemCCLogoWithAccessibilityTag is expected not to be null");
                                            Assert.IsTrue(logoWithAccessibilityTagDisplay.DisplayTags.ContainsKey("accessibilityName"), "accessibilityName tag is expected");
                                            Assert.IsTrue(string.Equals(logoWithAccessibilityTagDisplay.DisplayTags["accessibilityName"], "({contextData.paymentMethod.display.name})"), "accessibilityName tag is expected.");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        [DataRow("amcweb", "PayNow", "SelectInstance")]
        [DataRow("commercialstores", "eligiblePI", "Select")]
        [DataTestMethod]
        public async Task GetPaymentSelectDescriptions_UpdateSelectDisplay(string partner, string scenario, string operation)
        {
            string country = "us";
            string language = "en-US";
            string allowedPaymentMethods = "%5B%22direct_debit.ach%22%2C%22ewallet.alipay_billing_agreement%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.discover%22%2C%22credit_card.hipercard%22%2C%22direct_debit.ideal_billing_agreement%22%2C%22credit_card.jcb%22%2C%22invoice_credit.klarna%22%2C%22credit_card.mc%22%2C%22mobile_billing_non_sim%22%2C%22ewallet.paypal%22%2C%22direct_debit.sepa%22%2C%22credit_card.unionpay_creditcard%22%2C%22credit_card.unionpay_debitcard%22%2C%22credit_card.visa%22%5D";
            string url = $"/v7.0/Account001/paymentMethodDescriptions?scenario={scenario}&partner={partner}&operation={operation}&country={country}&language={language}&allowedPaymentMethods={allowedPaymentMethods}";

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    var pidls = ReadPidlResourceFromJson(responseBody);
                    var dataDescription = pidls[0].DataDescription["id"] as PropertyDescription;
                    var defaultValue = dataDescription.DefaultValue;
                    var firstValue = dataDescription.PossibleValues.First().Key;

                    Assert.AreEqual(defaultValue, firstValue);
                });
        }

        [DataRow("webblends")]
        [DataRow("commercialstores")]
        [DataRow("azure")]
        [DataRow("xbox")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CheckQuickResolution(string partner)
        {
            // Arrange
            string country = "us";
            string language = "en-US";
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=add&country={country}&language={language}&family=credit_card";

            // Act
            var ccPidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsTrue(ccPidls.Count > 0, "No CC PIDL returned");
            foreach (var pidl in ccPidls)
            {
                var propertyDescription = pidl.GetPropertyDescriptionByPropertyName("accountToken");
                Assert.IsNull(propertyDescription?.Validation?.ResolutionRegex, "ResolutionRegex is not null");
            }
        }

        [DataRow("us", "en-US")]
        [DataRow("fr", "fr-FR")]
        [DataRow("it", "it-IT")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_AddCreditCard_SMBOOBE_PIDLsAreAsExpected(string country, string language)
        {
            var pidls = await GetPidlFromPXService($"/v7.0/Account001/paymentMethodDescriptions?country={country}&operation=add&partner=smboobe&language={language}&family=credit_card&completePrerequisites=True");

            var expectedTypes = PimsMockResponseProvider.GetPaymentMethods(country, "credit_card", null).Select(pm =>
            {
                return string.Format("{0}.{1}", pm.PaymentMethodFamily, pm.PaymentMethodType);
            }).ToArray();

            var actualTypes = pidls.Select(pidl =>
            {
                return string.Format("{0}.{1}", pidl.Identity["family"], pidl.Identity["type"]);
            }).ToArray();

            CollectionAssert.AreEquivalent(expectedTypes, actualTypes);

            foreach (var pidl in pidls)
            {
                Assert.AreEqual(2, pidl.DisplayPages.Count);

                // Verify contents of first page.
                Assert.AreEqual("AccountDetailsPage", pidl.DisplayPages.First().DisplayName);
                Assert.AreEqual("logo", pidl.DisplayPages.First().Members.First().DisplayHintType);
                Assert.AreEqual("privacyNextGroup", pidl.DisplayPages.First().Members.Last().HintId);

                var moveNextButton = pidl.GetDisplayHintById("nextButton") as ButtonDisplayHint;
                Assert.AreEqual("moveNext", moveNextButton.Action.ActionType);

                // Verify contents of last page.
                Assert.AreEqual("CreditCardAddressPage", pidl.DisplayPages.Last().DisplayName);
                Assert.AreEqual("property", pidl.DisplayPages.Last().Members.First().DisplayHintType);
                Assert.AreEqual("privacySaveGroup", pidl.DisplayPages.Last().Members.Last().HintId);

                var submitButton = pidl.GetDisplayHintById("saveButton") as ButtonDisplayHint;
                Assert.AreEqual("submit", submitButton.Action.ActionType);
            }
        }

        [DataRow("us", "en-US")]
        [DataRow("fr", "fr-FR")]
        [DataRow("it", "it-IT")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ListPaymentInstruments_SMBOOBE_PIDLsAreAsExpected(string country, string language)
        {
            var pidls = await GetPidlFromPXService($"/v7.0/Account001/paymentMethodDescriptions?country={country}&operation=selectinstance&partner=smboobe&language={language}&allowedPaymentMethods=%5B%22credit_card%22%5D");

            Assert.AreEqual(1, pidls.Count);

            var pidl = pidls[0];

            Assert.AreEqual(1, pidl.DisplayPages.Count);
            Assert.AreEqual("PaymentInstrumentSelectionPage", pidl.DisplayPages.First().DisplayName);

            Assert.AreEqual(1, pidl.DisplayPages.First().Members.Count);

            var paymentInstrumentDropdown = pidl.DisplayPages.First().Members.First() as PropertyDisplayHint;
            Assert.AreEqual("paymentInstrument", paymentInstrumentDropdown.HintId);
            Assert.AreEqual("dropDown", paymentInstrumentDropdown.SelectType);
            Assert.AreEqual("id", paymentInstrumentDropdown.PropertyName);
            Assert.AreEqual("property", paymentInstrumentDropdown.DisplayHintType);
        }

        /// <summary>
        /// This test is used to verify the PIDL, when feature splitListPIInformationIntoTwoLines is used (Feature to split information displayed in List PI in 2 lines (1. FirstName LastName 2. Last4 Card digits & expiry.)).
        /// </summary>
        /// <param name="accountId"> The account Id have deatils of account used</param>
        /// <param name="country"> Country used for form</param>
        /// <param name="splitListPIInformationIntoTwoLinesWithExpired"> Check both SplitInfoInTwoLines and showPIExpirationInformation feature is enabled or not</param>
        /// <returns></returns>
        [DataRow("Account001", "us", true, "&allowedPaymentMethods=%5B%22credit_card.unionpay_creditcard%22%5D")]
        [DataRow("Account001", "us", true, "")]
        [DataRow("Account001", "us", false, "&allowedPaymentMethods=%5B%22credit_card.unionpay_creditcard%22%5D")]
        [DataRow("Account001", "us", false, "")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SelectInstance_SplitPIInforInTwoLines(string accountId, string country, bool splitListPIInformationIntoTwoLinesWithExpired, string allowedPaymentMethods)
        {
            // Arrange
            string expectedPSSResponse;

            if (splitListPIInformationIntoTwoLinesWithExpired == true)
            {
                expectedPSSResponse = "{\"selectinstance\": {\"features\": {\"showPIExpirationInformation\": {\"applicableMarkets\": []}, \"splitListPIInformationIntoTwoLines\": {\"applicableMarkets\": []}}, \"template\": \"listpidropdown\"}}";
            }
            else
            {
                expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"splitListPIInformationIntoTwoLines\":{\"applicableMarkets\":[]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            var headers = new Dictionary<string, string> { { "x-ms-flight", "PXDisablePSSCache" } };
            string requestUrl = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&partner=officesmb&operation=selectInstance";
            if (!string.IsNullOrEmpty(allowedPaymentMethods))
            {
                requestUrl += allowedPaymentMethods;
            }

            // Act: Call the method to retrieve PIDL from PXService
            List<PIDLResource> selectPidls = await GetPidlFromPXService(
                requestUrl,
                HttpStatusCode.OK,
                null,
                headers);

            // Assert: Validate the results
            Assert.IsNotNull(selectPidls, "PIDL is expected to be not null");

            var paymentInstrument = selectPidls[0].GetDisplayHintById("paymentInstrument") as PropertyDisplayHint;

            if (!string.IsNullOrEmpty(allowedPaymentMethods))
            {
                // If user doesn't have any PI matches allowedPaymentMethods, then only a "add new paymetn method button" will be shown. The dropdown won't be shown.
                Assert.IsNull(paymentInstrument, "paymentInstrument should be null");
                Assert.AreEqual("NoPaymentInstrumentSelectionPage", selectPidls[0].DisplayPages[0].DisplayName, "display page name should be NoPaymentInstrumentSelectionPage");
                List<DisplayHint> pidlList = selectPidls[0].GetAllDisplayHintsOfId("newPaymentMethodLink");
                ButtonDisplayHint newPaymentMethodLinkButton = pidlList[0] as ButtonDisplayHint;
                Assert.IsNotNull(newPaymentMethodLinkButton, "add new payment method button shouldn't be null");
            }
            else
            {
                SelectOptionDescription creditCardselectOptionDescription = paymentInstrument.PossibleOptions.ElementAt(0).Value;

                if (!splitListPIInformationIntoTwoLinesWithExpired)
                {
                    Assert.IsNotNull(creditCardselectOptionDescription.DisplayText, "Option DisplayText should not be null");
                    Assert.IsNotNull(creditCardselectOptionDescription.DisplayImageUrl, "Option DisplayImageUrl should not be null");
                }

                GroupDisplayHint groupDisplayHint = creditCardselectOptionDescription.DisplayContent;
                Assert.AreEqual(groupDisplayHint.Members.Count, 2, "GroupDisplayHint should contain 2 elements: logo and text group");

                ImageDisplayHint logo = groupDisplayHint.Members[0] as ImageDisplayHint;
                Assert.IsNotNull(logo);

                TextGroupDisplayHint textGroup = groupDisplayHint.Members[1] as TextGroupDisplayHint;
                Assert.IsNotNull(textGroup);
                Assert.AreEqual(textGroup.Members.Count, 1, "TextGroup should only contain one element for an card");

                if (splitListPIInformationIntoTwoLinesWithExpired)
                {
                    GroupDisplayHint textGroupDisplayHint = textGroup.Members[0] as GroupDisplayHint;
                    Assert.IsNotNull(textGroupDisplayHint);
                    Assert.AreEqual(textGroupDisplayHint.Members.Count, 2, "TextGroup should only contain one element for an card");

                    TextDisplayHint creditCardselectOptionDescriptionTextFirstNameAndLastName = textGroupDisplayHint.Members[0] as TextDisplayHint;
                    Assert.IsNotNull(creditCardselectOptionDescriptionTextFirstNameAndLastName.DisplayContent, "Option DisplayText First name and Last name should not be null");
                    TextDisplayHint creditCardselectOptionDescriptionTextLastFourDigit = textGroupDisplayHint.Members[1] as TextDisplayHint;
                    Assert.IsNotNull(creditCardselectOptionDescriptionTextLastFourDigit.DisplayContent, "Option DisplayText Last Four Digits should not be null");
                }
            }
        }

        [DataRow(true)]
        [DataRow(false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_3DS1_AddCreditCard_XBOXOOBE_FlightHeader_SubmitPassesHeader(bool flightEnabled)
        {
            var pidls = await GetPidlFromPXServiceWithPartnerHeader($"/v7.0/Account001/paymentMethodDescriptions?partner=xbox&operation=Add&language=en-us&family=credit_card&country=in", "x-ms-flight", flightEnabled ? "xboxOOBE" : string.Empty, flightEnabled ? "xboxOOBE" : string.Empty);

            foreach (var pidl in pidls)
            {
                if (flightEnabled)
                {
                    Assert.AreEqual(pidl.DisplayPages[0].DisplayName, "oobeConfirmPidlPage1", "First PIDL Page is not OOBE Confirm Page");
                }
                else
                {
                    Assert.AreNotEqual(pidl.DisplayPages[0].DisplayName, "oobeConfirmPidlPage1", "First PIDL Page should not be OOBE Confirm Page");
                }

                var submitButton = pidl.GetDisplayHintById("saveButton") as ButtonDisplayHint;
                Assert.AreEqual("submit", submitButton.Action.ActionType, "Submit button does not have \"submit\" action type");
                Assert.IsNotNull(submitButton.Action.Context, "Submit button missing context");

                Assert.AreEqual(flightEnabled, submitButton.Action.Context.ToString().Contains("\"x-ms-flight\": \"xboxOOBE\""), "Submit button header contains unexpected value");
            }
        }

        [DataRow(Constants.PartnerNames.Storify, false)]
        [DataRow(Constants.PartnerNames.Storify, true)]
        [DataRow(Constants.PartnerNames.XboxNative, false)]
        [DataRow(Constants.PartnerNames.XboxNative, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_AddCreditCard_FlightHeader_UpdateAccessibilityName(string partner, bool flightEnabled)
        {
            string flight = string.Empty;

            if (flightEnabled)
            {
                PXFlightHandler.AddToEnabledFlights("XboxUpdateAccessibilityNameWithPosition");
                flight = "XboxUpdateAccessibilityNameWithPosition";
            }

            var pidls = await GetPidlFromPXServiceWithPartnerHeader($"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Add&language=en-us&family=credit_card&country=us&completePrerequisites=true", "x-ms-flight", flight, flight);

            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                ButtonDisplayHint nextButton = pidl.GetDisplayHintById("nextButton") as ButtonDisplayHint;
                ButtonDisplayHint cancelBackButton = pidl.GetDisplayHintById("cancelBackButton") as ButtonDisplayHint;
                ButtonDisplayHint saveButton = pidl.GetDisplayHintById("saveButton") as ButtonDisplayHint;
                string saveButtonValue = string.Equals(partner, Constants.PartnerNames.XboxNative, StringComparison.CurrentCultureIgnoreCase) ? "Save" : "Next";

                if (flightEnabled)
                {
                    Assert.AreEqual(nextButton.DisplayTags["accessibilityName"], "Next 1 of 3");
                    Assert.AreEqual(cancelBackButton.DisplayTags["accessibilityName"], "Back 2 of 3");
                    Assert.AreEqual(saveButton.DisplayTags["accessibilityName"], $"{saveButtonValue} 1 of 3");
                }
                else
                {
                    Assert.AreEqual(nextButton.DisplayTags["accessibilityName"], "Next");
                    Assert.AreEqual(cancelBackButton.DisplayTags["accessibilityName"], "Back");
                    Assert.AreEqual(saveButton.DisplayTags["accessibilityName"], $"{saveButtonValue}");
                }
            }
        }

        [DataTestMethod]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "visa", "add", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "in", "visa", "add", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "amex", "add", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "mc", "add", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "discover", "add", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "jp", "jcb", "add", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "ng", "verve", "add", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "visa", "update", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "visa", "update", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "mc", "update", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "amex", "update", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "amex", "update", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "mc", "update", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "discover", "update", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "jp", "jcb", "update", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "ng", "verve", "update", "1.22.3")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "visa", "add", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "in", "visa", "add", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "amex", "add", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "mc", "add", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "discover", "add", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "jp", "jcb", "add", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "ng", "verve", "add", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "visa", "update", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "visa", "update", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "mc", "update", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "amex", "update", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "amex", "update", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "mc", "update", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "discover", "update", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "jp", "jcb", "update", "2.4.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "ng", "verve", "update", "2.4.0")]
        public async Task GetPaymentMethodDescriptions_CreditCard_AccessibilityHintTestXboxNative(string partner, string country, string type, string operation, string pidlSdkVersion)
        {
            string flight = "PXEnableXboxAccessibilityHint";
            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", pidlSdkVersion },
                { "x-ms-flight", flight }
            };
            List<PIDLResource> pidls = new List<PIDLResource>();
            string url = string.Empty;
            Version fullPidlSdkVersion = new Version(pidlSdkVersion + ".0");
            Version lowestCompatiblePidlVersion = new Version(2, 4, 0, 0);
            bool isIndiaUpdateScenario = country == "in" && operation == "update";

            if (isIndiaUpdateScenario)
            {
                testHeader["x-ms-flight"] += ",IndiaExpiryGroupDelete";
            }

            if (operation != "add")
            {
                PaymentMethod pm = new PaymentMethod
                {
                    PaymentMethodFamily = "credit_card",
                    PaymentMethodType = type,
                };
                List<PaymentMethod> paymentMethods = new List<PaymentMethod> { pm };
                PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods));
                url = $"/v7.0/me/paymentMethodDescriptions?country={country}&family=credit_card&type={type}&language=en-US&partner={partner}&operation=update";
            }
            else
            {
                url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=add&language=en-us&family=credit_card&type={type}&country={country}&completePrerequisites=true";
            }

            pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            PIDLResource resource = pidls[0];
            var wrapperGroup = resource.DisplayPages[0].Members[0] as ContainerDisplayHint;
            var expiryCVVGroup = (wrapperGroup.Members[0] as ContainerDisplayHint).Members.Last() as ContainerDisplayHint;
            var expiryGroup = expiryCVVGroup.Members[0] as ContainerDisplayHint;
            var cvvTextBox = isIndiaUpdateScenario ? expiryGroup.Members.First() as PropertyDisplayHint : expiryGroup.Members.Last() as PropertyDisplayHint;
            var creditCardWhereCVVGroup = isIndiaUpdateScenario ? (expiryCVVGroup.Members[0] as ContainerDisplayHint).Members[1] as ContainerDisplayHint
                                                                : expiryCVVGroup.Members[1] as ContainerDisplayHint;
            var whereIsCVVText = creditCardWhereCVVGroup.Members[0] as TextDisplayHint;
            var cvvPositionText = (creditCardWhereCVVGroup.Members[1] as ContainerDisplayHint).Members[1] as TextDisplayHint;
            var privacyTextElements = resource.GetAllDisplayHintsOfId("microsoft_privacy_text");

            if (fullPidlSdkVersion < lowestCompatiblePidlVersion)
            {
                string cvvTextBoxHintId = isIndiaUpdateScenario ? "cvv_IndiaTokenization" : "cvv";
                string cvvPositionTextHintId = type == "amex" ? "creditCardsCVV4LocationText" : "creditCardsCVV3LocationText";

                Assert.AreEqual(cvvTextBoxHintId, cvvTextBox.HintId);
                Assert.IsTrue(cvvTextBox.DisplayTags == null || !cvvTextBox.DisplayTags.ContainsKey("accessibilityHint"));
                Assert.AreEqual("creditCardsWhereCVV", whereIsCVVText.HintId);
                Assert.IsTrue(whereIsCVVText.DisplayTags == null || !whereIsCVVText.DisplayTags.ContainsKey("noPidlddc"));
                Assert.AreEqual(cvvPositionTextHintId, cvvPositionText.HintId);
                Assert.IsTrue(cvvPositionText.DisplayTags == null || !cvvPositionText.DisplayTags.ContainsKey("noPidlddc"));
                Assert.AreEqual((country == "in" && operation == "add") ? 2 : 3, resource.GetAllDisplayHintsOfId("viewTermsButton").Count);

                foreach (var privacyText in privacyTextElements)
                {
                    Assert.IsTrue(privacyText.DisplayTags == null || !privacyText.DisplayTags.ContainsKey("noPidlddc"));
                }
            }
            else
            {
                string cvvTextBoxHintId = isIndiaUpdateScenario ? "cvv_IndiaTokenization" : type == "amex" ? "cvvAmexWithHint" : "cvvWithHint";
                string cvvTextBoxAccessibilityHint = type == "amex" ? "Where is my CVV? The 4 digit code on the front."
                                                                    : "Where is my CVV? The last 3 digits on the back.";
                string cvvPositionTextHintId = type == "amex" ? "creditCardsCVV4LocationTextNoLive" : "creditCardsCVV3LocationTextNoLive";

                Assert.AreEqual(cvvTextBoxHintId, cvvTextBox.HintId);
                Assert.AreEqual(cvvTextBoxAccessibilityHint, cvvTextBox.DisplayTags["accessibilityHint"]);
                Assert.AreEqual("creditCardsWhereCVVNoLive", whereIsCVVText.HintId);
                Assert.AreEqual("pidlddc-disable-live", whereIsCVVText.DisplayTags["noPidlddc"]);
                Assert.AreEqual(cvvPositionTextHintId, cvvPositionText.HintId);
                Assert.AreEqual("pidlddc-disable-live", cvvPositionText.DisplayTags["noPidlddc"]);
                Assert.AreEqual((country == "in" && operation == "add") ? 2 : 3, resource.GetAllDisplayHintsOfId("viewTermsButton").Count);

                foreach (var privacyText in privacyTextElements)
                {
                    Assert.AreEqual("pidlddc-disable-live", privacyText.DisplayTags["noPidlddc"]);
                }
            }
        }

        [DataTestMethod]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "visa", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "amex", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "mc", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "discover", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "jp", "jcb", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "br", "elo", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "br", "hipercard", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "ng", "verve", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "in", "visa", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "in", "mc", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "in", "amex", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "visa", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "amex", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "mc", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "discover", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "jp", "jcb", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "br", "elo", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "br", "hipercard", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "ng", "verve", "2.7.0")]
        public async Task GetPaymentMethodDescriptionsAdd_StyleHintsXboxNative(string partner, string country, string type, string pidlSdkVersion)
        {
            string flight = "PXEnableXboxNativeStyleHints,PXEnableXboxAccessibilityHint";
            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", pidlSdkVersion },
                { "x-ms-flight", flight }
            };
            List<PIDLResource> pidls = new List<PIDLResource>();
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=add&language=en-us&family=credit_card&type={type}&country={country}";
            Version fullPidlSdkVersion = new Version(pidlSdkVersion + ".0");
            Version lowestCompatiblePidlVersion = new Version(2, 7, 0, 0);
            bool useStyleHints = false;

            pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            GroupDisplayHint topGroup = (pidls[0].DisplayPages[0].Members.FirstOrDefault() as GroupDisplayHint).Members.FirstOrDefault() as GroupDisplayHint;

            if (fullPidlSdkVersion < lowestCompatiblePidlVersion)
            {
                type = type == "hipercard" ? "hiper" : type;
                type = (type == "jcb" || type == "mc") ? type.ToUpper() : type.First().ToString().ToUpper() + type.Substring(1);
                string cardNumberHintId = type == "Amex" ? "cardNumberAmex" : "cardNumber";
                string expiryGroupHintId = type == "Amex" ? "expiryGroupAmexNoLive" : "expiryGroupNoLive";
                string cvvHelpGroupHintId = type == "Amex" ? "cvvAmexHelpGroup" : "cvvHelpNoLiveGroup";
                Assert.IsTrue(topGroup.Members.Count == 5);
                Assert.IsTrue(topGroup.Members[2].HintId == string.Format("creditCard{0}NameAcceptedMessageGroup", type));
                Assert.IsTrue(topGroup.Members[3].HintId == cardNumberHintId);
                Assert.IsTrue(topGroup.Members[4].HintId == string.Format("creditCard{0}ExpiryGroupWhereCVVGroup", type));
                Assert.IsTrue((topGroup.Members[4] as GroupDisplayHint).Members[0].HintId == expiryGroupHintId);

                if (type != "Visa")
                {
                    Assert.IsTrue((topGroup.Members[4] as GroupDisplayHint).Members[1].HintId == cvvHelpGroupHintId);
                }
                else
                {
                    Assert.IsTrue(((topGroup.Members[4] as GroupDisplayHint).Members[1] as GroupDisplayHint).Members.LastOrDefault().HintId == "cvvImageNoLiveGroup");
                }
            }
            else
            {
                useStyleHints = true;
                type = type == "hipercard" ? "hiper" : type;
                type = (type == "jcb" || type == "mc") ? type.ToUpper() : type.First().ToString().ToUpper() + type.Substring(1);
                string contentGroupHintId = string.Format("creditCard{0}ContentGroupContainer", type);
                string leftGroupHintId = type == "Amex" ? "creditCardAddAmexContentLeftGroup" : "creditCardAddContentLeftGroup";
                string rightGroupHintId = string.Format("creditCard{0}ContentRightGroup", type);
                string cardNumberHintId = type == "Amex" ? "cardNumberAmex" : "cardNumber";
                string expiryGroupHintId = type == "Amex" ? "expiryGroupAmexNoLive" : "expiryGroupNoLive";
                string creditCardLocationTextHintId = type == "Amex" ? "creditCardsCVV4LocationTextNoLive" : "creditCardsCVV3LocationTextNoLive";
                GroupDisplayHint contentGroup = topGroup.Members.LastOrDefault() as GroupDisplayHint;
                Assert.IsTrue(contentGroup.HintId == contentGroupHintId);

                GroupDisplayHint leftGroup = contentGroup.Members[0] as GroupDisplayHint;
                GroupDisplayHint rightGroup = contentGroup.Members[1] as GroupDisplayHint;

                Assert.IsTrue(leftGroup.HintId == leftGroupHintId);
                Assert.IsTrue(leftGroup.Members.Count == 3);
                Assert.IsTrue(rightGroup.Members.Count == 2);
                Assert.IsTrue(leftGroup.Members[0].HintId == "cardholderName");
                Assert.IsTrue(leftGroup.Members[1].HintId == cardNumberHintId);
                Assert.IsTrue(leftGroup.Members[2].HintId == expiryGroupHintId);
                Assert.IsTrue(rightGroup.HintId == rightGroupHintId);
                TextDisplayHint whereIsMyCvv = (rightGroup.Members[1] as GroupDisplayHint).Members.FirstOrDefault() as TextDisplayHint;
                TextDisplayHint creditCardLocationText = ((rightGroup.Members[1] as GroupDisplayHint).Members.LastOrDefault() as GroupDisplayHint).Members.LastOrDefault() as TextDisplayHint;
                Assert.IsTrue(whereIsMyCvv.HintId == "creditCardsWhereCVVNoLive");
                Assert.IsTrue(creditCardLocationText.HintId == creditCardLocationTextHintId);
            }

            foreach (PIDLResource resource in pidls)
            {
                foreach (DisplayHint displayHint in resource.GetAllDisplayHints())
                {
                    if (useStyleHints)
                    {
                        Assert.IsTrue(displayHint.StyleHints.Count > 0);
                    }
                    else
                    {
                        Assert.IsTrue(displayHint.StyleHints == null || !displayHint.StyleHints.Contains("dummy-stylehint"));
                    }
                }
            }
        }

        // With pidlsdk version < 2.7.0, there should be no stylehints
        [DataRow(Constants.PartnerNames.Storify, "us", "visa", "2.5.0", "PXEnableXboxNativeStyleHints")]
        [DataRow(Constants.PartnerNames.Storify, "us", "visa", "2.5.0", "")]
        [DataRow(Constants.PartnerNames.Storify, "us", "visa", "2.6.2", "PXEnableXboxNativeStyleHints")]
        [DataRow(Constants.PartnerNames.Storify, "us", "visa", "2.6.2", "")]

        // With pidlsdk version >= 2.7.0 and without flight PXEnableXboxNativeStyleHints, there should be no stylehints
        [DataRow(Constants.PartnerNames.Storify, "us", "visa", "2.7.0", "")]
        [DataRow(Constants.PartnerNames.Storify, "us", "visa", "2.7.2", "")]

        // With pidlsdk version >= 2.7.0 and with flight PXEnableXboxNativeStyleHints, there must be atleast one stylehint for every display hint
        [DataRow(Constants.PartnerNames.Storify, "us", "visa", "2.7.0", "PXEnableXboxNativeStyleHints")]
        [DataRow(Constants.PartnerNames.Storify, "us", "visa", "2.7.2", "PXEnableXboxNativeStyleHints")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptionsAdd_NoStyleHintsXboxNative(string partner, string country, string type, string pidlSdkVersion, string flightsToBePassed)
        {
            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", pidlSdkVersion },
                { "x-ms-flight", flightsToBePassed }
            };

            List<PIDLResource> pidls = new List<PIDLResource>();
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=add&language=en-us&family=credit_card&type={type}&country={country}";
            Version fullPidlSdkVersion = new Version(pidlSdkVersion + ".0");
            Version lowestCompatiblePidlVersion = new Version(2, 7, 0, 0);

            pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (PIDLResource resource in pidls)
            {
                foreach (DisplayHint displayHint in resource.GetAllDisplayHints())
                {
                    if (fullPidlSdkVersion < lowestCompatiblePidlVersion)
                    {
                        Assert.IsNull(displayHint.StyleHints);
                    }
                    else if (flightsToBePassed.Contains("PXEnableXboxNativeStyleHints"))
                    {
                        Assert.IsTrue(displayHint.StyleHints.Count > 0);
                    }
                }
            }
        }

        [DataTestMethod]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "visa", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "amex", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "mc", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "visa", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "amex", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "mc", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "discover", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "jp", "jcb", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "br", "elo", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "br", "hipercard", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "ng", "verve", "2.5.0")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "visa", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "amex", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxSettings, "in", "mc", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "visa", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "amex", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "mc", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "us", "discover", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "jp", "jcb", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "br", "elo", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "br", "hipercard", "2.7.0")]
        [DataRow(Constants.PartnerNames.XboxNative, "ng", "verve", "2.7.0")]
        public async Task GetPaymentMethodDescriptionsUpdate_StyleHintsXboxNative(string partner, string country, string type, string pidlSdkVersion)
        {
            string flight = "PXEnableXboxNativeStyleHints,PXEnableXboxAccessibilityHint,IndiaExpiryGroupDelete";
            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-pidlsdk-version", pidlSdkVersion },
                { "x-ms-flight", flight }
            };
            List<PIDLResource> pidls = new List<PIDLResource>();
            PaymentMethod pm = new PaymentMethod
            {
                PaymentMethodFamily = "credit_card",
                PaymentMethodType = type,
            };
            List<PaymentMethod> paymentMethods = new List<PaymentMethod> { pm };
            PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods));
            string url = $"/v7.0/me/paymentMethodDescriptions?country={country}&family=credit_card&type={type}&language=en-US&partner={partner}&operation=update";
            Version fullPidlSdkVersion = new Version(pidlSdkVersion + ".0");
            Version lowestCompatiblePidlVersion = new Version(2, 7, 0, 0);
            bool useStyleHints = false;

            pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, testHeader);
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            GroupDisplayHint topGroup = (pidls[0].DisplayPages[0].Members.FirstOrDefault() as GroupDisplayHint).Members.FirstOrDefault() as GroupDisplayHint;

            if (fullPidlSdkVersion < lowestCompatiblePidlVersion)
            {
                type = type == "hipercard" ? "hiper" : type;
                string cardNumberHintId = string.Format("{0}LastFourDigitsGroup", type);
                type = (type == "jcb" || type == "mc") ? type.ToUpper() : type.First().ToString().ToUpper() + type.Substring(1);
                string expiryGroupHintId = type == "Amex" ? "expiryGroupAmexNoLive" : "expiryGroupNoLive";
                expiryGroupHintId = country == "in" ? "expiryGroup_IndiaTokenization" : expiryGroupHintId;
                string cvvHelpGroupHintId = type == "Amex" ? "cvvAmexHelpGroup" : "cvvHelpNoLiveGroup";
                Assert.IsTrue(topGroup.Members.Count == 5);
                Assert.IsTrue(topGroup.Members[3].HintId == cardNumberHintId);
                Assert.IsTrue(topGroup.Members[4].HintId == string.Format("creditCard{0}ExpiryGroupWhereCVVGroup", type));
                Assert.IsTrue((topGroup.Members[4] as GroupDisplayHint).Members[0].HintId == expiryGroupHintId);

                if (country == "in")
                {
                    var expiryMonth = pidls[0].GetDisplayHintById("expiryMonth");
                    var expiryYear = pidls[0].GetDisplayHintById("expiryYear");
                    var cvv_IndiaTokenization = pidls[0].GetDisplayHintById("cvv_IndiaTokenization");

                    Assert.IsTrue(expiryMonth == null);
                    Assert.IsTrue(expiryYear == null);
                    Assert.IsTrue(cvv_IndiaTokenization != null);
                    Assert.IsTrue(((topGroup.Members[4] as GroupDisplayHint).Members[0] as GroupDisplayHint).Members.LastOrDefault().HintId == "creditCardWhereCVVGroup_IndiaTokenization");
                }
                else
                {
                    if (type != "Visa")
                    {
                        Assert.IsTrue((topGroup.Members[4] as GroupDisplayHint).Members[1].HintId == cvvHelpGroupHintId);
                    }
                    else
                    {
                        Assert.IsTrue(((topGroup.Members[4] as GroupDisplayHint).Members[1] as GroupDisplayHint).Members.LastOrDefault().HintId == "cvvImageNoLiveGroup");
                    }
                }
            }
            else
            {
                useStyleHints = true;
                type = type == "hipercard" ? "hiper" : type;
                type = type == "jcb" ? type.ToUpper() : type.First().ToString().ToUpper() + type.Substring(1);
                string contentGroupHintId = string.Format("creditCardUpdate{0}ContentGroupContainer", type);
                string leftGroupHintId = string.Format("creditCardUpdate{0}ContentLeftGroup", type);
                string rightGroupHintId = string.Format("creditCardUpdate{0}ContentRightGroup", type);
                string cardNumberHintId = string.Format("{0}LastFourDigitsGroup", type.ToLower());
                string expiryGroupHintId = type == "Amex" ? "expiryGroupAmexNoLive" : "expiryGroupNoLive";
                expiryGroupHintId = country == "in" ? "expiryGroup_IndiaTokenization" : expiryGroupHintId;
                string creditCardLocationTextHintId = type == "Amex" ? "creditCardsCVV4LocationTextNoLive" : "creditCardsCVV3LocationTextNoLive";
                GroupDisplayHint contentGroup = topGroup.Members.LastOrDefault() as GroupDisplayHint;
                Assert.IsTrue(contentGroup.HintId == contentGroupHintId);

                GroupDisplayHint leftGroup = contentGroup.Members[0] as GroupDisplayHint;
                GroupDisplayHint rightGroup = contentGroup.Members[1] as GroupDisplayHint;
                int rightGroupMembersCount = (country == "in") ? 0 : 1;

                Assert.IsTrue(leftGroup.HintId == leftGroupHintId);
                Assert.IsTrue(leftGroup.Members.Count == 3);
                Assert.IsTrue(rightGroup.Members.Count == rightGroupMembersCount);
                Assert.IsTrue(leftGroup.Members[0].HintId == "cardholderName");
                Assert.IsTrue(leftGroup.Members[1].HintId == cardNumberHintId);
                Assert.IsTrue(leftGroup.Members[2].HintId == expiryGroupHintId);

                if (country != "in")
                {
                    Assert.IsTrue(rightGroup.HintId == rightGroupHintId);
                    TextDisplayHint whereIsMyCvv = (rightGroup.Members[0] as GroupDisplayHint).Members.FirstOrDefault() as TextDisplayHint;
                    TextDisplayHint creditCardLocationText = ((rightGroup.Members[0] as GroupDisplayHint).Members.LastOrDefault() as GroupDisplayHint).Members.LastOrDefault() as TextDisplayHint;
                    Assert.IsTrue(whereIsMyCvv.HintId == "creditCardsWhereCVVNoLive");
                    Assert.IsTrue(creditCardLocationText.HintId == creditCardLocationTextHintId);
                }
            }

            foreach (PIDLResource resource in pidls)
            {
                foreach (DisplayHint displayHint in resource.GetAllDisplayHints())
                {
                    if (useStyleHints)
                    {
                        Assert.IsTrue(displayHint.StyleHints.Count > 0);
                    }
                    else
                    {
                        Assert.IsTrue(displayHint.StyleHints == null || !displayHint.StyleHints.Contains("dummy-stylehint"));
                    }
                }
            }
        }

        [DataRow("IN", "xboxsettings", "credit_card", "visa")]
        [DataRow("IN", "xboxsettings", "credit_card", "mc")]
        [DataRow("IN", "storify", "credit_card", "visa")]
        [DataRow("IN", "storify", "credit_card", "mc")]
        [DataRow("US", "xboxsettings", "credit_card", "visa")]
        [DataRow("US", "xboxsettings", "credit_card", "mc")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Update_TestFlightHeader_UpdateAccessibilityName(string country, string partner, string family, string type)
        {
            PXFlightHandler.AddToEnabledFlights("XboxUpdateAccessibilityNameWithPosition");
            string flight = "XboxUpdateAccessibilityNameWithPosition";
            string url = $"/v7.0/me/paymentMethodDescriptions?country={country}&family={family}&type={type}&language=en-US&partner={partner}&operation=update";

            PaymentMethod pm = new PaymentMethod
            {
                PaymentMethodFamily = family,
                PaymentMethodType = type,
            };
            List<PaymentMethod> paymentMethods = new List<PaymentMethod> { pm };
            PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods));

            var pidls = await GetPidlFromPXServiceWithPartnerHeader(url, "x-ms-flight", flight, flight);

            Assert.IsNotNull(pidls, "pidl is expected not to be null");

            PIDLResource resource = pidls[0];
            var viewTermsButtonList = resource.GetAllDisplayHintsOfId("viewTermsButton");

            Assert.IsTrue(viewTermsButtonList.Count > 0);

            foreach (DisplayHint hint in viewTermsButtonList)
            {
                ButtonDisplayHint viewTermsButton = hint as ButtonDisplayHint;
                string expected = (partner == "storify") ? "Microsoft respects your privacy. See our privacy statement. 3 of 3"
                                                         : "View terms 3 of 3";
                Assert.AreEqual(expected, viewTermsButton.DisplayTags["accessibilityName"]);
            }
        }

        [DataRow("twopage", "", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb")]
        [DataRow("officesmb", "", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb")]
        [DataRow("twopage", "includecvv", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb")]
        [DataRow("officesmb", "includecvv", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb")]
        [DataRow("defaulttemplate", "", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb")]
        [DataRow("macmanage", "", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb")]
        [DataRow("defaulttemplate", "includecvv", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb")]
        [DataRow("macmanage", "includecvv", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb")]
        [DataRow("defaulttemplate", "", "rupay")]
        [DataRow("macmanage", "", "rupay")]
        [DataRow("defaulttemplate", "includecvv", "rupay")]
        [DataRow("macmanage", "includecvv", "rupay")]
        [DataRow("defaulttemplate", "", "elo")]
        [DataRow("macmanage", "", "elo")]
        [DataRow("defaulttemplate", "includecvv", "elo")]
        [DataRow("macmanage", "includecvv", "elo")]
        [DataRow("defaulttemplate", "", "verve")]
        [DataRow("macmanage", "", "verve")]
        [DataRow("defaulttemplate", "includecvv", "verve")]
        [DataRow("macmanage", "includecvv", "verve")]
        [DataRow("defaulttemplate", "", "hipercard")]
        [DataRow("macmanage", "", "hipercard")]
        [DataRow("defaulttemplate", "includecvv", "hipercard")]
        [DataRow("macmanage", "includecvv", "hipercard")]
        [DataRow("twopage", "", "elo")]
        [DataRow("officesmb", "", "elo")]
        [DataRow("twopage", "includecvv", "elo")]
        [DataRow("officesmb", "includecvv", "elo")]
        [DataRow("twopage", "", "verve")]
        [DataRow("officesmb", "", "verve")]
        [DataRow("twopage", "includecvv", "verve")]
        [DataRow("officesmb", "includecvv", "verve")]
        [DataRow("twopage", "", "hipercard")]
        [DataRow("officesmb", "", "hipercard")]
        [DataRow("twopage", "includecvv", "hipercard")]
        [DataRow("officesmb", "includecvv", "hipercard")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescription_UpdateFlow_HideCVVGroupByDefault(string partner, string scenario, string type)
        {
            // Arrange
            string country = string.Equals(type, Constants.PaymentMethodFamilyType.Verve, StringComparison.OrdinalIgnoreCase) ? "ng"
                : (string.Equals(type, Constants.PaymentMethodFamilyType.Hipercard, StringComparison.OrdinalIgnoreCase) || string.Equals(type, Constants.PaymentMethodFamilyType.Elo, StringComparison.OrdinalIgnoreCase)) ? "br"
                : string.Equals(type, Constants.PaymentMethodFamilyType.Rupay, StringComparison.OrdinalIgnoreCase) ? "in" : "us";

            string exposedFlightFeatures = null;

            if (string.Equals(partner, GlobalConstants.Partners.MacManage, StringComparison.OrdinalIgnoreCase)
                || string.Equals(partner, GlobalConstants.Partners.OfficeSMB, StringComparison.OrdinalIgnoreCase))
            {
                var partnerName = string.Equals(partner, GlobalConstants.Partners.MacManage, StringComparison.OrdinalIgnoreCase) ? GlobalConstants.Partners.DefaultTemplate : GlobalConstants.Partners.TwoPage;
                string expectedPSSResponses = $"{{\"update\":{{\"template\":\"{partnerName}\"}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponses);
            }

            if (string.Equals(type, Constants.PaymentMethodFamilyType.Rupay, StringComparison.OrdinalIgnoreCase))
            {
                exposedFlightFeatures = "PXEnableRupayForIN,vnext";
            }

            Dictionary<string, string> testHeader = new Dictionary<string, string>()
            {
                { "x-ms-flight", "PXDisablePSSCache" },
            };

            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&operation=Update&country=US&language=en-US&partner={partner}&scenario={scenario}&family=credit_card&type={type}&currency=USD";

            // Act
            var pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, flightNames: exposedFlightFeatures, additionaHeaders: testHeader);

            // Assert
            Assert.IsTrue(pidls.Count > 0, "No PIDL was returned");

            List<string> creditCardUpdateWithCvvHintId = new List<string>()
            {
                "update_credit_debit_heading",
                "starRequiredTextGroup",
                "cardholderName",
                "lastFourDigits",
                "expiryGroup",
                "microsoftPrivacyTextGroup"
            };

            foreach (PIDLResource resource in pidls)
            {
                var cvvGroup = resource.GetDisplayHintById("cvv");

                if (string.IsNullOrEmpty(scenario))
                {
                    Assert.IsNull(cvvGroup, "CVV group should not be present in the PIDL");
                }
                else
                {
                    Assert.IsNotNull(cvvGroup, "Cvv should be present in the PIDL when sceanrio is include cvv");

                    var cvvDataDescription = resource.GetPropertyDescriptionByPropertyName(cvvGroup.PropertyName);
                    Assert.IsFalse(cvvDataDescription.IsOptional, "Cvv should not be optional when sceanrio is include cvv");
                }
            }

            if (!string.IsNullOrEmpty(scenario))
            {
                foreach (string hintId in creditCardUpdateWithCvvHintId)
                {
                    if (string.Equals(type, Constants.PaymentMethodFamilyType.Rupay, StringComparison.OrdinalIgnoreCase)
                        && string.Equals(hintId, "expiryGroup", StringComparison.OrdinalIgnoreCase)
                        && (string.Equals(partner, GlobalConstants.Partners.MacManage, StringComparison.OrdinalIgnoreCase)
                        || string.Equals(partner, GlobalConstants.Partners.DefaultTemplate, StringComparison.OrdinalIgnoreCase)))
                    {
                        Assert.IsNull(pidls[0].GetDisplayHintById(hintId), $"HintId {hintId} should be present in the PIDL");
                    }
                    else
                    {
                        Assert.IsNotNull(pidls[0].GetDisplayHintById(hintId), $"HintId {hintId} should be present in the PIDL");
                    }
                }
            }

            PXFlightHandler.ResetToDefault();
            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("us", "en-US")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ListPaymentInstruments_OXOWEBDIRECT_PIDLsAreAsExpected(string country, string language)
        {
            var pidls = await GetPidlFromPXService($"/v7.0/Account001/paymentMethodDescriptions?country={country}&operation=selectinstance&partner=oxowebdirect&language={language}&allowedPaymentMethods=%5B%22credit_card%22%5D");

            Assert.IsTrue(pidls.Count > 0, "No PIDL was returned");

            var pidlsFiltered = pidls.Where(p => p.Identity["operation"] == "selectinstance").ToArray();

            Assert.AreEqual(1, pidlsFiltered.Length);

            var pidl = pidlsFiltered[0];

            Assert.AreEqual(1, pidl.DisplayPages.Count);
            Assert.AreEqual("PaymentInstrumentSelectionPage", pidl.DisplayPages.First().DisplayName);

            Assert.AreEqual(1, pidl.DisplayPages.First().Members.Count);

            var paymentInstrumentDropdown = pidl.DisplayPages.First().Members.First() as PropertyDisplayHint;
            Assert.AreEqual("paymentInstrument", paymentInstrumentDropdown.HintId);
            Assert.AreEqual("dropDown", paymentInstrumentDropdown.SelectType);
            Assert.AreEqual("id", paymentInstrumentDropdown.PropertyName);
            Assert.AreEqual("property", paymentInstrumentDropdown.DisplayHintType);
        }

        [DataRow("Account001", "credit_card", "add", "webblends", "us", false, true, "09D1F309C227EA1F20D79B80F58ED034F187EE4E4348E68BA16EA00636C83FFC")]
        [DataRow("Account001", "credit_card", "add", "webblends", "us", true, true, "09D1F309C227EA1F20D79B80F58ED034F187EE4E4348E68BA16EA00636C83FFC")]
        [DataRow("Account001", "credit_card", "update", "webblends", "us", false, false, null)]
        [DataRow("Account001", "credit_card", "update", "webblends", "us", true, false, null)]
        [DataRow("Account001", "direct_debit", "add", "webblends", "us", false, false, null)]
        [DataRow("Account001", "direct_debit", "add", "webblends", "us", true, false, null)]
        [DataRow("Account001", "direct_debit", "update", "webblends", "us", false, false, null)]
        [DataRow("Account001", "direct_debit", "update", "webblends", "us", true, false, null)]
        [DataRow("Account001", "credit_card", "add", "northstarweb", "us", false, true, "09D1F309C227EA1F20D79B80F58ED034F187EE4E4348E68BA16EA00636C83FFC")]
        [DataRow("Account001", "credit_card", "add", "northstarweb", "us", true, true, "09D1F309C227EA1F20D79B80F58ED034F187EE4E4348E68BA16EA00636C83FFC")]
        [DataRow("Account001", "credit_card", "update", "northstarweb", "us", false, false, null)]
        [DataRow("Account001", "credit_card", "update", "northstarweb", "us", true, false, null)]
        [DataRow("Account001", "direct_debit", "add", "northstarweb", "us", false, false, null)]
        [DataRow("Account001", "direct_debit", "add", "northstarweb", "us", true, false, null)]
        [DataRow("Account001", "direct_debit", "update", "northstarweb", "us", false, false, null)]
        [DataRow("Account001", "direct_debit", "update", "northstarweb", "us", true, false, null)]
        [DataRow("Account001", "credit_card", "add", "xbox", "us", false, false, null)]
        [DataRow("Account001", "credit_card", "add", "xbox", "us", true, true, "09D1F309C227EA1F20D79B80F58ED034F187EE4E4348E68BA16EA00636C83FFC")]
        [DataRow("Account001", "credit_card", "update", "xbox", "us", false, false, null)]
        [DataRow("Account001", "credit_card", "update", "xbox", "us", true, false, null)]
        [DataRow("Account001", "direct_debit", "add", "xbox", "us", false, false, null)]
        [DataRow("Account001", "direct_debit", "add", "xbox", "us", true, false, null)]
        [DataRow("Account001", "direct_debit", "update", "xbox", "us", false, false, null)]
        [DataRow("Account001", "direct_debit", "update", "xbox", "us", true, false, null)]
        [DataRow("EmpAccount001", "credit_card", "add", "azure", "us", false, false, null)]
        [DataRow("EmpAccount001", "credit_card", "add", "azure", "us", true, true, "1C502FE2029CEAF1B4CAD1A0D5AADF657D64A238AA80BD41F9F3E395319361BA")]
        [DataRow("EmpAccount001", "direct_debit", "add", "azure", "us", false, false, null)]
        [DataRow("EmpAccount001", "direct_debit", "add", "azure", "us", true, false, null)]
        [DataRow("EmpAccount001", "credit_card", "add", "azure", "ca", false, false, null)]
        [DataRow("EmpAccount001", "credit_card", "add", "azure", "ca", true, true, "1C502FE2029CEAF1B4CAD1A0D5AADF657D64A238AA80BD41F9F3E395319361BA")]
        [DataRow("EmpAccount001", "credit_card", "update", "azure", "ca", false, false, null)]
        [DataRow("EmpAccount001", "credit_card", "update", "azure", "ca", true, false, null)]
        [DataRow("EmpAccount001", "credit_card", "add", "commercialstores", "us", false, false, null)]
        [DataRow("EmpAccount001", "credit_card", "add", "commercialstores", "us", true, true, "1C502FE2029CEAF1B4CAD1A0D5AADF657D64A238AA80BD41F9F3E395319361BA")]
        [DataRow("EmpAccount001", "credit_card", "add", "commercialstores", "ca", false, false, null)]
        [DataRow("EmpAccount001", "credit_card", "add", "commercialstores", "ca", true, true, "1C502FE2029CEAF1B4CAD1A0D5AADF657D64A238AA80BD41F9F3E395319361BA")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_JarvisHMAC(
            string accountId,
            string paymentMethodFamily,
            string operation,
            string partner,
            string country,
            bool enablePXEnableJarvisHMAC,
            bool isJarvisHMACExpected,
            string expectedJarvisHMAC)
        {
            if (enablePXEnableJarvisHMAC)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableJarvisHMAC");
            }

            var pidls = await GetPidlFromPXService($"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&partner={partner}&family={paymentMethodFamily}&operation={operation}");

            foreach (var pidl in pidls)
            {
                if (isJarvisHMACExpected)
                {
                    Assert.IsNotNull(pidl.TryGetPropertyDescription("pxmac"));
                    Assert.AreEqual(expectedJarvisHMAC, pidl.TryGetPropertyDescription("pxmac").DefaultValue);
                }
                else
                {
                    Assert.IsNull(pidl.TryGetPropertyDescription("pxmac"));
                }
            }
        }

        [DataRow("storify", true)]
        [DataRow("saturn", true)]
        [DataRow("xboxsubs", true)]
        [DataRow("storify", false)]
        [DataRow("saturn", false)]
        [DataRow("saturn", false)]
        [DataRow("xboxsubs", false)]
        [DataTestMethod]
        public async Task SelectPI_UseFontIcon(string partner, bool useFlighting)
        {
            // Arrange
            var flights = new List<string>();

            if (useFlighting)
            {
                flights.Add("PXUseFontIcons");
            }

            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=SelectInstance&language=en-US&filters=%7B%22chargeThresholds%22%3A%5B0%5D%7D&country=US&allowedPaymentMethods=%5B%22credit_card%22%2C%22direct_debit%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet%22%2C%22mobile_billing_non_sim%22%2C%22virtual%22%5D";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            string serializedPidl = JsonConvert.SerializeObject(pidls);

            if (useFlighting)
            {
                Assert.IsTrue(serializedPidl.Contains("\uE710"));
                Assert.IsTrue(serializedPidl.Contains("\uE8C7"));
            }
            else
            {
                Assert.IsTrue(serializedPidl.Contains("add_bold_64px_dark_grey.svg"));
                Assert.IsTrue(serializedPidl.Contains("gift_card_64px_dark_grey.svg"));
            }
        }

        // This function helps to assert the ServerErroCodes available in the PIDL response
        private void CheckServerErrorCode(Dictionary<string, ServerErrorCode> errorCodes, string errorType, bool enableErrorFlight)
        {
            ServerErrorCode errorCode = null;
            errorCodes.TryGetValue(errorType, out errorCode);

            if (enableErrorFlight)
            {
                Assert.IsNull(errorCode);
            }
            else
            {
                Assert.IsNotNull(errorCode);
            }
        }

        private void VerifyAVSComponentAdded(
            List<PIDLResource> pidls,
            string displayIdTriggeredAVS,
            bool expectedAdded,
            bool skipModernErrorMessageCheck = false)
        {
            foreach (var pidl in pidls)
            {
                // find the button triggering AVS
                DisplayHint buttonDisplayHint = pidl.GetDisplayHintById(displayIdTriggeredAVS);
                Assert.IsNotNull(buttonDisplayHint);
                Assert.IsNotNull(buttonDisplayHint.Action);
                Assert.IsNotNull(buttonDisplayHint.Action.Context);

                // verify next action is hooked to ModernValidate
                Assert.AreEqual(expectedAdded, buttonDisplayHint.Action.NextAction != null);
                Assert.AreEqual(expectedAdded, buttonDisplayHint.Action.Context.ToString().Contains("ModernValidate"));

                if (expectedAdded && !skipModernErrorMessageCheck)
                {
                    AddressTestsUtil.VerifyModernValidationErrorStrings(JsonConvert.SerializeObject(pidl.PidlResourceStrings));
                }
            }
        }

        private void VerifySummaryPageComponentAdded(List<PIDLResource> pidls, string displayIdTriggeredAVS)
        {
            foreach (var pidl in pidls)
            {
                DisplayHint buttonDisplayHint = pidl.GetDisplayHintById(displayIdTriggeredAVS);
                Assert.AreEqual("moveNext", buttonDisplayHint.Action.NextAction.ActionType.ToString());
                DisplayHint saveButtonDisplayHint = pidl.GetDisplayHintById("saveButton");
                Assert.IsNotNull(buttonDisplayHint);
                Assert.IsNotNull(buttonDisplayHint.Action);
                Assert.IsNotNull(buttonDisplayHint.Action.Context);
                Assert.AreEqual("submit", saveButtonDisplayHint.Action.ActionType.ToString());
                Assert.IsNull(saveButtonDisplayHint.Action.NextAction);
            }
        }

        private void VerifyAdditionalAVSPropertiesAdded(
            List<PIDLResource> pidls,
            bool expectAdded,
            bool addedInlinkedPidl,
            string addressPropertyName)
        {
            foreach (var pidl in pidls)
            {
                if (addedInlinkedPidl)
                {
                    foreach (var linkedPidl in pidl.LinkedPidls)
                    {
                        if (linkedPidl.DataDescription.ContainsKey(addressPropertyName))
                        {
                            var targetPidls = linkedPidl.DataDescription[addressPropertyName] as List<PIDLResource>;
                            var targetPidl = targetPidls[0];
                            VerifyAdditionalAVSPropertiesAdded(linkedPidl.DisplayPages[0], targetPidl.DataDescription, expectAdded);
                        }
                    }
                }
                else
                {
                    VerifyAdditionalAVSPropertiesAdded(pidl.DisplayPages[0], pidl.DataDescription, expectAdded);
                }
            }
        }

        private void VerifyAdditionalAVSPropertiesAdded(PageDisplayHint displayPage, Dictionary<string, object> dataDescription, bool expectAdded)
        {
            // verify the data descriptin is added additional properties
            Assert.AreEqual(expectAdded, dataDescription.ContainsKey(Constants.CommercialZipPlusFourPropertyNames.IsUserConsented));
            Assert.AreEqual(expectAdded, dataDescription.ContainsKey(Constants.CommercialZipPlusFourPropertyNames.IsAvsFullValidationSucceeded));

            bool containIsCustomerConsentedCheckboxCheckBox = false;
            bool containIsAVSFullValidationSucceededCheckBox = false;

            foreach (DisplayHint displayHint in displayPage.Members)
            {
                if (string.Equals(displayHint.PropertyName, Constants.CommercialZipPlusFourPropertyNames.IsUserConsented, StringComparison.OrdinalIgnoreCase))
                {
                    containIsCustomerConsentedCheckboxCheckBox = true;
                }

                if (string.Equals(displayHint.PropertyName, Constants.CommercialZipPlusFourPropertyNames.IsAvsFullValidationSucceeded, StringComparison.OrdinalIgnoreCase))
                {
                    containIsAVSFullValidationSucceededCheckBox = true;
                }
            }

            // verify the display description is added addtional properties
            Assert.AreEqual(expectAdded, containIsCustomerConsentedCheckboxCheckBox);
            Assert.AreEqual(expectAdded, containIsAVSFullValidationSucceededCheckBox);
        }

        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", "Account001", GlobalConstants.Partners.OfficeSMB, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", "Account001", GlobalConstants.Partners.OfficeSMB, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_AddtionalHeaderAndFooter_UsePartnerSettings(string family, string type, string country, string operation, string accountId, string partner, bool enableAddtionalHeaderFooter)
        {
            // Arrange
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language=en-US&family={family}&type={type}&partner={partner}&operation={operation}";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            string partnerSettingResponse = "{\"add\":{\"template\":\"onepage\",\"features\":{\"enableAddtionalHeader\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true}]},\"enableAddtionalFooter\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true}]}}}}";
            if (enableAddtionalHeaderFooter)
            {
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                foreach (var displayPage in pidl.DisplayPages)
                {
                    var pageMembers = displayPage.Members;
                    var addtionalHeader = pageMembers.FirstOrDefault(item => item.HintId == "additionalHeaderPlaceHolder");
                    var addtionalFooter = pageMembers.FirstOrDefault(item => item.HintId == "additionalFooterPlaceHolder");
                    Assert.IsTrue(enableAddtionalHeaderFooter ? addtionalHeader != null : addtionalHeader == null);
                    Assert.IsTrue(enableAddtionalHeaderFooter ? addtionalFooter != null : addtionalFooter == null);
                }
            }
        }

        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", "Account001", GlobalConstants.Partners.OfficeSMB, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", "Account001", GlobalConstants.Partners.OfficeSMB, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_RemoveDisplayTag_UsePartnerSettings(string family, string type, string country, string operation, string accountId, string partner, bool removeThemeTag)
        {
            // Arrange
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language=en-US&family={family}&type={type}&partner={partner}&operation={operation}";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            List<string> dropdownDisplayHintIds = new List<string> { "expiryMonth", "expiryYear", "addressState", "addressCountry" };

            string partnerSettingResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":null}}";
            if (removeThemeTag)
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"customizeDisplayTag\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"displayTagsToBeRemoved\":[{\"Key\":\"theme\",\"Value\":\"windows\"}]}]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                foreach (string dropdownDisplayHintId in dropdownDisplayHintIds)
                {
                    List<DisplayHint> displayHints = pidl.GetAllDisplayHintsOfId(dropdownDisplayHintId);
                    foreach (DisplayHint displayHint in displayHints)
                    {
                        Assert.AreEqual(removeThemeTag, !displayHint.DisplayTags.ContainsKey("theme"), "when removeThemeTag is enabled, theme tag should be removed");
                    }
                }
            }
        }

        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", "Account001", GlobalConstants.Partners.OfficeSMB, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", "Account001", GlobalConstants.Partners.OfficeSMB, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", "EmpAccount001", GlobalConstants.Partners.OfficeSMB, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", "EmpAccountNoProfile", GlobalConstants.Partners.OfficeSMB, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "update", "Account001", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "update", "Account001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "update", "EmpAccount001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "update", "EmpAccountNoProfile", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", "Account001", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", "Account001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", "EmpAccount001", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", "EmpAccount001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", "EmpAccountNoProfile", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", "EmpAccountNoProfile", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "update", "Account001", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "update", "Account001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "update", "EmpAccount001", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "update", "EmpAccount001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "update", "EmpAccountNoProfile", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "fr", "add", "Account001", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "fr", "add", "Account001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "fr", "add", "EmpAccount001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "fr", "add", "EmpAccountNoProfile", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "fr", "update", "Account001", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "fr", "update", "Account001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "fr", "update", "EmpAccount001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "fr", "update", "EmpAccountNoProfile", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "ca", "add", "Account001", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "ca", "add", "Account001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "ca", "add", "EmpAccount001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "ca", "add", "EmpAccountNoProfile", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "ca", "add", "EmpAccountNoProfile", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "ca", "update", "Account001", GlobalConstants.Partners.OfficeSMB, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "ca", "update", "Account001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "ca", "update", "EmpAccount001", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "ca", "update", "EmpAccountNoProfile", GlobalConstants.Partners.OfficeSMB, false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_IndiaTokenizationConsent_AddShowsCheckbox_CC_UsePartnerSettings(string family, string type, string country, string operation, string accountId, string partner, bool shouldGetConsentMessage, bool completePrerequisites)
        {
            // Arrange
            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };
            string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language=en-US&family={family}&type={type}&partner={partner}&operation={operation}";
            bool[] featureStatus = { true, false };

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";

                if (string.Equals(accountId, "EmpAccount001", StringComparison.OrdinalIgnoreCase) || string.Equals(accountId, "EmpAccountNoProfile", StringComparison.OrdinalIgnoreCase))
                {
                    headers.Add("x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU=");
                    headers.Add("x-ms-clientcontext-encoding", "base64");
                }
            }

            List<string> templateList = new List<string>
            {
                "onepage", "twopage", "defaulttemplate"
            };

            foreach (string template in templateList)
            {
                foreach (bool disableIndiaTokenization in featureStatus)
                {
                    bool featureUpdatedShouldGetConsentMessage = shouldGetConsentMessage;
                    string partnerSettingResponse;

                    if (disableIndiaTokenization)
                    {
                        partnerSettingResponse = "{\"add\":{\"template\":\"" + template + "\",\"features\":{\"disableIndiaTokenization\":{\"applicableMarkets\":[]}}},\"update\":{\"template\":\"" + template + "\",\"features\":{\"disableIndiaTokenization\":{\"applicableMarkets\":[]}}}}";

                        // change the shouldGetConsentMessage to false instead of true when feature is enabled
                        featureUpdatedShouldGetConsentMessage = shouldGetConsentMessage ? false : shouldGetConsentMessage;
                    }
                    else
                    {
                        partnerSettingResponse = "{\"add\":{\"template\":\"" + template + "\",\"features\":null},\"update\":{\"template\":\"" + template + "\",\"features\":null}}";
                    }

                    PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

                    // Act
                    List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

                    // Assert
                    TestContext.WriteLine($"Template: {template}, URL: {url}");
                    Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                    foreach (var pidl in pidls)
                    {
                        foreach (var displayPage in pidl.DisplayPages)
                        {
                            var pageMembers = displayPage.Members;
                            var requiredProperty_1 = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentMessage");
                            var requiredProperty_2 = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentMessageHyperlink");

                            if (featureUpdatedShouldGetConsentMessage && !displayPage.HintId.ToLower().Contains("creditcardamexadd"))
                            {
                                Assert.IsNotNull(requiredProperty_1);
                                Assert.AreEqual("tokenizationConsentMessage", requiredProperty_1.PropertyName);
                                Assert.IsNotNull(requiredProperty_2);
                            }
                            else
                            {
                                Assert.IsNull(requiredProperty_1);
                                Assert.IsNull(requiredProperty_2);
                            }

                            // for twopage template, only check the first page where indiaTokenConsentMessage and indiaTokenConsentMessageHyperlink exist
                            if (string.Equals("twopage", template))
                            {
                                break;
                            }
                        }

                        var dataDescriptionDetails = (List<PIDLResource>)pidl.DataDescription["details"];
                        object tokenizationConsent;
                        dataDescriptionDetails[0].DataDescription.TryGetValue("tokenizationConsent", out tokenizationConsent);
                        var tokenizationConsentDetails = (PropertyDescription)tokenizationConsent;

                        if (featureUpdatedShouldGetConsentMessage)
                        {
                            Assert.IsNotNull(tokenizationConsentDetails);
                            Assert.AreEqual("bool", tokenizationConsentDetails.DataType);
                            Assert.AreEqual("hidden", tokenizationConsentDetails.PropertyDescriptionType);
                            Assert.AreEqual("clientData", tokenizationConsentDetails.PropertyType);
                        }
                        else
                        {
                            Assert.IsNull(tokenizationConsentDetails);
                        }
                    }

                    PXSettings.PartnerSettingsService.Responses.Clear();
                }
            }
        }

        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.Bing, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Azure, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.CommercialStores, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Webblends, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.AmcWeb, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Cart, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "update", GlobalConstants.Partners.Azure, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "update", GlobalConstants.Partners.CommercialStores, true, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_IndiaTokenizationConsent_AddShowsCheckbox_CC(string family, string type, string country, string operation, string partner, bool flightEnable, bool shouldGetConsentCheckbox)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&family={family}&type={type}&partner={partner}&operation={operation}";

            var flights = new List<string>();
            if (flightEnable)
            {
                flights.Add("IndiaTokenizationConsentCapture");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                foreach (var displayPage in pidl.DisplayPages)
                {
                    var pageMembers = displayPage.Members;
                    var requiredProperty = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentCheckbox");
                    Assert.IsNull(requiredProperty);
                }

                var dataDescriptionDetails = (List<PIDLResource>)pidl.DataDescription["details"];
                object tokenizationConsent;
                dataDescriptionDetails[0].DataDescription.TryGetValue("tokenizationConsent", out tokenizationConsent);

                if (shouldGetConsentCheckbox)
                {
                    Assert.IsNotNull(tokenizationConsent);
                }
            }
        }

        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.Bing, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Azure, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.CommercialStores, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Webblends, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Cart, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Cart, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "update", GlobalConstants.Partners.Azure, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "update", GlobalConstants.Partners.CommercialStores, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.Bing, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Azure, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.CommercialStores, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Webblends, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Cart, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "update", GlobalConstants.Partners.Azure, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "update", GlobalConstants.Partners.CommercialStores, true, false, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_IndiaTokenizationConsent_AddShowsMessage_CC(string family, string type, string country, string operation, string partner, bool flightEnable, bool shouldGetConsentMessage, bool completePrerequisites = false)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&family={family}&type={type}&partner={partner}&operation={operation}";
            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            var flights = new List<string>();
            if (flightEnable)
            {
                flights.Add("IndiaTokenizationConsentCapture");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                foreach (var displayPage in pidl.DisplayPages)
                {
                    var pageMembers = displayPage.Members;
                    var requiredProperty_1 = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentMessage");
                    var requiredProperty_2 = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentMessageHyperlink");

                    if (shouldGetConsentMessage && !displayPage.HintId.ToLower().Contains("creditcardamexadd"))
                    {
                        Assert.IsNotNull(requiredProperty_1);
                        Assert.AreEqual("tokenizationConsentMessage", requiredProperty_1.PropertyName);
                        Assert.IsNotNull(requiredProperty_2);
                    }
                    else
                    {
                        Assert.IsNull(requiredProperty_1);
                        Assert.IsNull(requiredProperty_2);
                    }
                }

                var dataDescriptionDetails = (List<PIDLResource>)pidl.DataDescription["details"];
                object tokenizationConsent;
                dataDescriptionDetails[0].DataDescription.TryGetValue("tokenizationConsent", out tokenizationConsent);
                var tokenizationConsentDetails = (PropertyDescription)tokenizationConsent;

                if (shouldGetConsentMessage)
                {
                    Assert.IsNotNull(tokenizationConsentDetails);
                    Assert.AreEqual("bool", tokenizationConsentDetails.DataType);
                    Assert.AreEqual("hidden", tokenizationConsentDetails.PropertyDescriptionType);
                    Assert.AreEqual("clientData", tokenizationConsentDetails.PropertyType);
                }
                else
                {
                    Assert.IsNull(tokenizationConsentDetails);
                }
            }
        }

        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.Bing, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Azure, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.CommercialStores, true, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Webblends, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.AmcWeb, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Cart, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Cart, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, false, false)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.Bing, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Azure, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.CommercialStores, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Webblends, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.AmcWeb, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Cart, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Cart, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, false, false, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_IndiaTokenizationConsent_AddShowsMessage_CC_Employee_Profile(string family, string type, string country, string operation, string partner, bool flightEnable, bool shouldGetConsentMessage, bool completePrerequisites = false)
        {
            // Arrange
            string url = $"/v7.0/EmpAccount001/paymentMethodDescriptions?country={country}&language=en-US&family={family}&type={type}&partner={partner}&operation={operation}";

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            var flight = "IndiaTokenizationConsentCapture";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            if (flightEnable)
            {
                headers.Add("x-ms-flight", flight);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, flightNames: flightEnable ? flight : null, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                if (completePrerequisites && !pidl.DataDescription.ContainsKey("details"))
                {
                    continue;
                }

                foreach (var displayPage in pidl.DisplayPages)
                {
                    var pageMembers = displayPage.Members;
                    var requiredProperty_1 = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentMessage");
                    var requiredProperty_2 = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentMessageHyperlink");

                    if (shouldGetConsentMessage && !displayPage.HintId.ToLower().Contains("creditcardamexadd"))
                    {
                        Assert.IsNotNull(requiredProperty_1);
                        Assert.AreEqual("tokenizationConsentMessage", requiredProperty_1.PropertyName);
                        Assert.IsNotNull(requiredProperty_2);
                    }
                    else
                    {
                        Assert.IsNull(requiredProperty_1);
                        Assert.IsNull(requiredProperty_2);
                    }
                }

                var dataDescriptionDetails = (List<PIDLResource>)pidl.DataDescription["details"];
                object tokenizationConsent;
                dataDescriptionDetails[0].DataDescription.TryGetValue("tokenizationConsent", out tokenizationConsent);
                var tokenizationConsentDetails = (PropertyDescription)tokenizationConsent;

                if (shouldGetConsentMessage)
                {
                    Assert.IsNotNull(tokenizationConsentDetails);
                    Assert.AreEqual("bool", tokenizationConsentDetails.DataType);
                    Assert.AreEqual("hidden", tokenizationConsentDetails.PropertyDescriptionType);
                    Assert.AreEqual("clientData", tokenizationConsentDetails.PropertyType);
                }
                else
                {
                    Assert.IsNull(tokenizationConsentDetails);
                }
            }
        }

        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.Bing, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Azure, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.CommercialStores, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Cart, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.Bing, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Azure, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "cn", "add", GlobalConstants.Partners.CommercialStores, true, false, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_IndiaTokenizationConsent_AddShowsMessage_CC_Employee_ProfileNoProfile(string family, string type, string country, string operation, string partner, bool flightEnable, bool shouldGetConsentMessage, bool completePrerequisites = false)
        {
            // Arrange
            string url = $"/v7.0/EmpAccountNoProfile/paymentMethodDescriptions?country={country}&language=en-US&family={family}&type={type}&partner={partner}&operation={operation}";

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            var flight = "IndiaTokenizationConsentCapture";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU="
                },
                {
                    "x-ms-clientcontext-encoding", "base64"
                }
            };

            if (flightEnable)
            {
                headers.Add("x-ms-flight", flight);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, flightNames: flightEnable ? flight : null, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                if (completePrerequisites && !pidl.DataDescription.ContainsKey("details"))
                {
                    continue;
                }

                foreach (var displayPage in pidl.DisplayPages)
                {
                    var pageMembers = displayPage.Members;
                    var requiredProperty_1 = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentMessage");
                    var requiredProperty_2 = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentMessageHyperlink");

                    if (shouldGetConsentMessage)
                    {
                        Assert.IsNotNull(requiredProperty_1);
                        Assert.AreEqual("tokenizationConsentMessage", requiredProperty_1.PropertyName);
                        Assert.IsNotNull(requiredProperty_2);
                    }
                    else
                    {
                        Assert.IsNull(requiredProperty_1);
                        Assert.IsNull(requiredProperty_2);
                    }
                }

                var dataDescriptionDetails = (List<PIDLResource>)pidl.DataDescription["details"];
                object tokenizationConsent;
                dataDescriptionDetails[0].DataDescription.TryGetValue("tokenizationConsent", out tokenizationConsent);
                var tokenizationConsentDetails = (PropertyDescription)tokenizationConsent;

                if (shouldGetConsentMessage)
                {
                    Assert.IsNotNull(tokenizationConsentDetails);
                    Assert.AreEqual("bool", tokenizationConsentDetails.DataType);
                    Assert.AreEqual("hidden", tokenizationConsentDetails.PropertyDescriptionType);
                    Assert.AreEqual("clientData", tokenizationConsentDetails.PropertyType);
                }
                else
                {
                    Assert.IsNull(tokenizationConsentDetails);
                }
            }
        }

        /// <summary>
        /// Test is to validate expiry group.
        /// We cannot include XboxSettings for this test because we do not remove the expiryGroup due to a uniquely strutured pidl
        /// </summary>
        /// <param name="country"></param>
        /// <param name="partner"></param>
        /// <param name="accountId"></param>
        /// <param name="shouldGetExpiryGroup"></param>
        /// <param name="completePrerequisites"></param>
        /// <param name="flightNames"></param>
        /// <param name="scenario"></param>
        /// <returns></returns>
        [DataRow("in", GlobalConstants.Partners.CommercialStores, "Account001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Azure, "Account001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Bing, "Account001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.NorthStarWeb, "Account001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "Account001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Webblends, "Account001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Payin, "Account001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.AmcXbox, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.XBox, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.XboxSubs, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.XboxWeb, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.ConsumerSupport, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Cart, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.CommercialSupport, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.CommercialStores, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.Azure, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.Bing, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.NorthstarWeb, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.Webblends, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.Payin, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.AmcXbox, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.XBox, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.XboxWeb, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.ConsumerSupport, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.Cart, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.CommercialSupport, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.CommercialStores, "Account001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Azure, "Account001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Bing, "Account001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.NorthStarWeb, "Account001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.XBox, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Payin, "Account001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "Account001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Webblends, "Account001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.XboxSubs, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.XboxWeb, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.CommercialStores, "EmpAccount001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Azure, "EmpAccount001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Bing, "EmpAccount001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.NorthStarWeb, "EmpAccount001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "EmpAccount001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Webblends, "EmpAccount001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Payin, "EmpAccount001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.XBox, "EmpAccount001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.XboxSubs, "EmpAccount001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.XboxWeb, "EmpAccount001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Storify, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Mseg, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.Storify, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "Account001", false, true, "IndiaExpiryGroupDelete", "PayNow")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "EmpAccount001", true, true, null, "PayNow")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "Account001", false, false, "IndiaExpiryGroupDelete", "PayNow")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "EmpAccount001", false, false, "IndiaExpiryGroupDelete", "PayNow")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "Account001", false, true, "IndiaExpiryGroupDelete", "ChangePI")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "EmpAccount001", true, true, null, "ChangePI")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "Account001", false, false, "IndiaExpiryGroupDelete", "ChangePI")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, "EmpAccount001", false, false, "IndiaExpiryGroupDelete", "ChangePI")]
        [DataRow("us", GlobalConstants.Partners.CommercialStores, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Azure, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Bing, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.NorthStarWeb, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.XBox, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.AmcWeb, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Webblends, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Payin, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.AmcXbox, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.XboxWeb, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.ConsumerSupport, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Cart, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.CommercialSupport, "Account001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.CommercialStores, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Azure, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Bing, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.NorthStarWeb, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.XBox, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.AmcWeb, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Webblends, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Payin, "Account001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.CommercialStores, "EmpAccount001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Azure, "EmpAccount001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Bing, "EmpAccount001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.NorthStarWeb, "EmpAccount001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.AmcWeb, "EmpAccount001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.Webblends, "EmpAccount001", true, true, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.OfficeSMB, "Account001", true, true)]
        [DataRow("in", GlobalConstants.Partners.OfficeSMB, "Account001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.OfficeSMB, "EmpAccount001", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.OfficeSMB, "EmpAccountNoProfile", false, false, "IndiaExpiryGroupDelete")]
        [DataRow("in", GlobalConstants.Partners.OfficeSMB, "Account001", true, false)]
        [DataRow("in", GlobalConstants.Partners.OfficeSMB, "EmpAccount001", true, false)]
        [DataRow("in", GlobalConstants.Partners.OfficeSMB, "EmpAccountNoProfile", true, false)]
        [DataRow("in", GlobalConstants.Partners.OfficeSMB, "Account001", false, true, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.OfficeSMB, "Account001", true, true)]
        [DataRow("us", GlobalConstants.Partners.OfficeSMB, "EmpAccount001", true, true)]
        [DataRow("us", GlobalConstants.Partners.OfficeSMB, "Account001", true, false)]
        [DataRow("us", GlobalConstants.Partners.OfficeSMB, "EmpAccount001", true, false)]
        [DataRow("us", GlobalConstants.Partners.OfficeSMB, "EmpAccountNoProfile", true, false)]
        [DataRow("us", GlobalConstants.Partners.OfficeSMB, "EmpAccount001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("us", GlobalConstants.Partners.OfficeSMB, "EmpAccountNoProfile", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("ca", GlobalConstants.Partners.OfficeSMB, "Account001", true, true)]
        [DataRow("ca", GlobalConstants.Partners.OfficeSMB, "Account001", true, false)]
        [DataRow("ca", GlobalConstants.Partners.OfficeSMB, "EmpAccount001", true, false)]
        [DataRow("ca", GlobalConstants.Partners.OfficeSMB, "EmpAccountNoProfile", true, false)]
        [DataRow("ca", GlobalConstants.Partners.OfficeSMB, "EmpAccount001", true, false, "IndiaExpiryGroupDelete")]
        [DataRow("ca", GlobalConstants.Partners.OfficeSMB, "EmpAccountNoProfile", true, false, "IndiaExpiryGroupDelete")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_No_ExpiryGroup_Update_IN(string country, string partner, string accountId, bool shouldGetExpiryGroup, bool completePrerequisites, string flightNames = null, string scenario = null)
        {
            List<string> templateList = new List<string>
            {
                "onepage", "twopage", "defaulttemplate"
            };

            foreach (string template in templateList)
            {
                // Arrange
                string partnerSettingResponse = "{\"update\":{\"template\":\"" + template + "\",\"features\":null}}";
                Dictionary<string, string> headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };
                string url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language=en-US&family=credit_card&type=amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb&partner={partner}&operation=update";

                if (!string.IsNullOrEmpty(scenario))
                {
                    url += $"&scenario={scenario}";
                }

                if (completePrerequisites)
                {
                    url += "&completePrerequisites=true";

                    if (string.Equals(accountId, "EmpAccount001", StringComparison.OrdinalIgnoreCase) || string.Equals(accountId, "EmpAccountNoProfile", StringComparison.OrdinalIgnoreCase))
                    {
                        headers.Add("x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU=");
                        headers.Add("x-ms-clientcontext-encoding", "base64");
                    }
                }

                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService(url, flightNames: flightNames, additionaHeaders: headers);

                // Assert
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                foreach (var pidl in pidls)
                {
                    foreach (var displayPage in pidl.DisplayPages)
                    {
                        var pageMembers = displayPage.Members;
                        var propertyToBeRemoved = pageMembers.FirstOrDefault(item => item.HintId == "expiryGroup");

                        if (!shouldGetExpiryGroup)
                        {
                            Assert.IsNull(propertyToBeRemoved);
                        }
                    }

                    object expiryMonth, expiryYear;
                    var dataDescriptionDetails = (List<PIDLResource>)pidl.DataDescription["details"];
                    dataDescriptionDetails[0].DataDescription.TryGetValue("expiryMonth", out expiryMonth);
                    dataDescriptionDetails[0].DataDescription.TryGetValue("expiryYear", out expiryYear);

                    if (!shouldGetExpiryGroup)
                    {
                        Assert.IsNull(expiryMonth);
                        Assert.IsNull(expiryYear);
                    }
                }

                PXSettings.PartnerSettingsService.Responses.Clear();
            }
        }

        [DataRow("IN", GlobalConstants.Partners.CommercialStores, true, false, false)]
        [DataRow("IN", GlobalConstants.Partners.Azure, true, false, false)]
        [DataRow("IN", GlobalConstants.Partners.Bing, true, false, false)]
        [DataRow("IN", GlobalConstants.Partners.NorthStarWeb, true, false, false)]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, true, false, false)]
        [DataRow("in", GlobalConstants.Partners.Webblends, true, false, false)]
        [DataRow("in", GlobalConstants.Partners.Payin, true, false, false)]
        [DataRow("IN", GlobalConstants.Partners.AmcXbox, true, true, false)]
        [DataRow("in", GlobalConstants.Partners.XBox, true, true, false)]
        [DataRow("in", GlobalConstants.Partners.XboxSubs, true, true, false)]
        [DataRow("in", GlobalConstants.Partners.XboxWeb, true, true, false)]
        [DataRow("in", GlobalConstants.Partners.ConsumerSupport, true, true, false)]
        [DataRow("in", GlobalConstants.Partners.Cart, true, true, false)]
        [DataRow("IN", GlobalConstants.Partners.CommercialSupport, true, true, false)]
        [DataRow("in", GlobalConstants.Partners.CommercialStores, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.Azure, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.Bing, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.NorthstarWeb, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.Webblends, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.Payin, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.AmcXbox, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.XBox, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.XboxWeb, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.ConsumerSupport, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.Cart, false, true, false)]
        [DataRow("in", GlobalConstants.Partners.CommercialSupport, false, true, false)]
        [DataRow("us", GlobalConstants.Partners.CommercialStores, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.Azure, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.Bing, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.NorthStarWeb, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.XBox, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.AmcWeb, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.Webblends, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.Payin, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.AmcXbox, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.XboxWeb, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.ConsumerSupport, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.Cart, true, true, false)]
        [DataRow("us", GlobalConstants.Partners.CommercialSupport, true, true, false)]
        [DataRow("IN", GlobalConstants.Partners.CommercialStores, true, false, true)]
        [DataRow("IN", GlobalConstants.Partners.Azure, true, false, true)]
        [DataRow("IN", GlobalConstants.Partners.Bing, true, false, true)]
        [DataRow("IN", GlobalConstants.Partners.NorthStarWeb, true, false, true)]
        [DataRow("IN", GlobalConstants.Partners.XBox, true, true, true)]
        [DataRow("IN", GlobalConstants.Partners.Payin, true, false, true)]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, true, false, true)]
        [DataRow("in", GlobalConstants.Partners.Webblends, true, false, true)]
        [DataRow("in", GlobalConstants.Partners.XboxSubs, true, true, true)]
        [DataRow("in", GlobalConstants.Partners.XboxWeb, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.CommercialStores, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.Azure, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.Bing, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.NorthStarWeb, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.XBox, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.AmcWeb, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.Webblends, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.Payin, true, true, true)]
        [DataRow("IN", GlobalConstants.Partners.CommercialStores, true, false, true)]
        [DataRow("IN", GlobalConstants.Partners.Azure, true, false, true)]
        [DataRow("IN", GlobalConstants.Partners.Bing, true, false, true)]
        [DataRow("IN", GlobalConstants.Partners.NorthStarWeb, true, false, true)]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, true, false, true)]
        [DataRow("in", GlobalConstants.Partners.Webblends, true, false, true)]
        [DataRow("in", GlobalConstants.Partners.Payin, true, false, true)]
        [DataRow("in", GlobalConstants.Partners.XBox, true, true, true)]
        [DataRow("in", GlobalConstants.Partners.XboxSubs, true, true, true)]
        [DataRow("in", GlobalConstants.Partners.XboxWeb, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.CommercialStores, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.Azure, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.Bing, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.NorthstarWeb, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.AmcWeb, true, true, true)]
        [DataRow("us", GlobalConstants.Partners.Webblends, true, true, true)]
        [DataRow("IN", GlobalConstants.Partners.Storify, true, false, true)]
        [DataRow("IN", GlobalConstants.Partners.XboxSettings, true, false, true)]
        [DataRow("in", GlobalConstants.Partners.Mseg, true, true, true)]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, true, false, true, "PayNow")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, false, true, true, "PayNow")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, true, false, false, "PayNow")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, false, true, false, "PayNow")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, true, false, true, "ChangePI")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, false, true, true, "ChangePI")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, true, false, false, "ChangePI")]
        [DataRow("in", GlobalConstants.Partners.AmcWeb, false, true, false, "ChangePI")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_No_ExpiryGroup_Update_IN_No_Profile(string country, string partner, bool flightEnable, bool shouldGetExpiryGroup, bool completePrerequisites, string scenario = null)
        {
            string url;

            url = $"/v7.0/EmpAccountNoProfile/paymentMethodDescriptions?country={country}&language=en-US&family=credit_card&type=amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb&partner={partner}&operation=update";

            var flights = new List<string>();
            if (flightEnable)
            {
                flights.Add("IndiaExpiryGroupDelete");
            }

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            if (!string.IsNullOrEmpty(scenario))
            {
                url += $"&scenario={scenario}";
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                foreach (var displayPage in pidl.DisplayPages)
                {
                    var pageMembers = displayPage.Members;
                    var propertyToBeRemoved = pageMembers.FirstOrDefault(item => item.HintId == "expiryGroup");

                    if (!shouldGetExpiryGroup)
                    {
                        Assert.IsNull(propertyToBeRemoved);
                    }
                }

                // If PIDL is not complete, we do not need to check.
                if (!pidl.DataDescription.ContainsKey("details"))
                {
                    continue;
                }

                var dataDescriptionDetails = (List<PIDLResource>)pidl.DataDescription["details"];
                object expiryMonth, expiryYear;
                dataDescriptionDetails[0].DataDescription.TryGetValue("expiryMonth", out expiryMonth);
                dataDescriptionDetails[0].DataDescription.TryGetValue("expiryYear", out expiryYear);
                if (!shouldGetExpiryGroup)
                {
                    Assert.IsNull(expiryMonth);
                    Assert.IsNull(expiryYear);
                }
            }
        }

        [DataRow("IN", GlobalConstants.Partners.OfficeSMB, true, false, "Account001")]
        [DataRow("IN", GlobalConstants.Partners.OfficeSMB, false, false, "Account001")]
        [DataRow("US", GlobalConstants.Partners.OfficeSMB, true, true, "Account001")]
        [DataRow("US", GlobalConstants.Partners.OfficeSMB, false, true, "Account001")]
        [DataRow("IN", GlobalConstants.Partners.OfficeSMB, true, false, "EmpAccountNoProfile")]
        [DataRow("IN", GlobalConstants.Partners.OfficeSMB, false, false, "EmpAccountNoProfile")]
        [DataRow("US", GlobalConstants.Partners.OfficeSMB, true, true, "EmpAccountNoProfile")]
        [DataRow("US", GlobalConstants.Partners.OfficeSMB, false, true, "EmpAccountNoProfile")]
        [DataRow("IN", GlobalConstants.Partners.OfficeSMB, true, false, "EmpAccount001")]
        [DataRow("IN", GlobalConstants.Partners.OfficeSMB, false, false, "EmpAccount001")]
        [DataRow("US", GlobalConstants.Partners.OfficeSMB, true, true, "EmpAccount001")]
        [DataRow("US", GlobalConstants.Partners.OfficeSMB, false, true, "EmpAccount001")]
        [DataRow("IN", GlobalConstants.Partners.NorthStarWeb, true, false, "Account001")]
        [DataRow("IN", GlobalConstants.Partners.NorthStarWeb, false, false, "Account001")]
        [DataRow("US", GlobalConstants.Partners.NorthStarWeb, true, true, "Account001")]
        [DataRow("US", GlobalConstants.Partners.NorthStarWeb, false, true, "Account001")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_No_ExpiryGroup_Update_IN_PartnerSettings(string country, string partner, bool completePrerequisites, bool shouldGetExpiryGroup, string accountId)
        {
            string url;

            url = $"/v7.0/{accountId}/paymentMethodDescriptions?country={country}&language=en-US&family=credit_card&type=amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb&partner={partner}&operation=update";

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            string partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":null},\"update\":{\"template\":\"OnePage\",\"features\":null}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("x-ms-flight", "PXDisablePSSCache");

            if (string.Equals(partner, GlobalConstants.Partners.NorthStarWeb, StringComparison.OrdinalIgnoreCase))
            {
                headers["x-ms-flight"] = "PXUsePartnerSettingsService,PXDisablePSSCache,IndiaExpiryGroupDelete";
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                foreach (var displayPage in pidl.DisplayPages)
                {
                    var pageMembers = displayPage.Members;
                    var propertyToBeRemoved = pageMembers.FirstOrDefault(item => item.HintId == "expiryGroup");

                    if (!shouldGetExpiryGroup)
                    {
                        Assert.IsNull(propertyToBeRemoved);
                    }
                }

                // If PIDL is not complete, we do not need to check.
                if (!pidl.DataDescription.ContainsKey("details"))
                {
                    continue;
                }

                var dataDescriptionDetails = (List<PIDLResource>)pidl.DataDescription["details"];
                object expiryMonth, expiryYear;
                dataDescriptionDetails[0].DataDescription.TryGetValue("expiryMonth", out expiryMonth);
                dataDescriptionDetails[0].DataDescription.TryGetValue("expiryYear", out expiryYear);
                if (!shouldGetExpiryGroup)
                {
                    Assert.IsNull(expiryMonth);
                    Assert.IsNull(expiryYear);
                }
            }
        }

        [DataRow("in", "selectinstance", GlobalConstants.Partners.CommercialStores, "PaymentInstrumentListPage", true, true)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.CommercialStores, "PaymentInstrumentListPage", false, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.Azure, "PaymentInstrumentPage", false, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.Azure, "PaymentInstrumentPage", true, true)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.CommercialStores, "PaymentInstrumentListPage", true, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.CommercialStores, "PaymentInstrumentListPage", false, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.Azure, "PaymentInstrumentPage", false, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.Azure, "PaymentInstrumentPage", true, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.Payin, "PaymentInstrumentPage", true, true)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.Payin, "PaymentInstrumentPage", false, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.SetupOffice, "PaymentInstrumentPage", false, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.SetupOffice, "PaymentInstrumentPage", true, true)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.Payin, "PaymentInstrumentPage", true, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.Payin, "PaymentInstrumentPage", false, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.SetupOffice, "PaymentInstrumentPage", false, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.SetupOffice, "PaymentInstrumentPage", true, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_IndiaExpiryGroupDelete_SelectInstance_Expiry_Not_Available(string country, string operation, string partner, string pageDisplayName, bool flightEnable, bool shouldExpiryDateBeUnavailable)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation={operation}";

            var flights = new List<string>();
            if (flightEnable)
            {
                flights.Add("IndiaExpiryGroupDelete");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                var pages = pidl.DisplayPages;
                var pIPage = pages.FirstOrDefault(pg => pg.DisplayName == pageDisplayName);
                Assert.IsNotNull(pIPage);
                PropertyDisplayHint piPageMember = (PropertyDisplayHint)pIPage.Members.FirstOrDefault(mm => ((PropertyDisplayHint)mm).PropertyName == "paymentInstrumentId");
                Assert.IsNotNull(piPageMember);
                var options = piPageMember.PossibleOptions["({contextData.id})"].DisplayContent.Members;
                Assert.IsNotNull(options);
                var paymentInstrumentItemCCGroup = (GroupDisplayHint)options.FirstOrDefault(op => op.HintId == "paymentInstrumentItemCCGroup");
                Assert.IsNotNull(paymentInstrumentItemCCGroup);
                if (shouldExpiryDateBeUnavailable)
                {
                    var expiryGp = (TextDisplayHint)paymentInstrumentItemCCGroup.Members.FirstOrDefault(gp => gp.HintId == "paymentInstrumentItemCCExpiry");
                    Assert.IsNull(expiryGp);

                    var expiryGpIn = (TextDisplayHint)paymentInstrumentItemCCGroup.Members.FirstOrDefault(gp => gp.HintId == "paymentInstrumentItemCCExpiryIN");
                    Assert.IsNull(expiryGpIn);
                }
                else
                {
                    var expiryGp = (TextDisplayHint)paymentInstrumentItemCCGroup.Members.FirstOrDefault(gp => gp.HintId == "paymentInstrumentItemCCExpiryIN");
                    Assert.IsNull(expiryGp);
                    expiryGp = (TextDisplayHint)paymentInstrumentItemCCGroup.Members.FirstOrDefault(gp => gp.HintId == "paymentInstrumentItemCCExpiry");
                    Assert.IsNotNull(expiryGp);
                    Assert.AreEqual(expiryGp.DisplayContent, "({contextData.details.expiryMonth}/{contextData.details.expiryYear})");
                }
            }
        }

        [DataRow("in", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", true, true, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", true, false, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", false, true, true, "Account003-CC-TokenExpiryDetails")]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", false, false, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", true, true, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", true, false, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", false, true, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", false, false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_EnableIndiaTokenExpiryDetails_SelectInstance_Token_Expiry_AmcWeb(string country, string operation, string partner, string pageDisplayName, bool indiaExpiryGroupDelete_flight, bool enableIndiaTokenExpiryDetails_flight, bool shouldTokenExpiryBeAvailable, string piid = null)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation={operation}";

            if (string.Equals(indiaExpiryGroupDelete_flight, false) && string.Equals(enableIndiaTokenExpiryDetails_flight, true) && string.Equals(shouldTokenExpiryBeAvailable, true))
            {
                url = $"/v7.0/Account003/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation={operation}&piid={piid}";
            }

            var flights = new List<string>();
            if (indiaExpiryGroupDelete_flight)
            {
                flights.Add("IndiaExpiryGroupDelete");
            }

            if (enableIndiaTokenExpiryDetails_flight)
            {
                flights.Add("EnableIndiaTokenExpiryDetails");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                var pages = pidl.DisplayPages;
                var pIPage = pages.FirstOrDefault(pg => pg.DisplayName == pageDisplayName);
                Assert.IsNotNull(pIPage);
                PropertyDisplayHint piPageMember = (PropertyDisplayHint)pIPage.Members.FirstOrDefault(mm => ((PropertyDisplayHint)mm).PropertyName == "id");
                Assert.IsNotNull(piPageMember);

                if (!string.Equals(country, "in", StringComparison.OrdinalIgnoreCase))
                {
                    foreach (var possibleOption in piPageMember.PossibleOptions)
                    {
                        var value = possibleOption.Value;
                        var value1 = (GroupDisplayHint)value.DisplayContent.Members[1];
                        var value2 = (GroupDisplayHint)value1.Members[0];
                        if (value2.Members.Count == 2)
                        {
                            Assert.AreEqual(true, true);
                        }
                    }
                }
                else
                {
                    if (indiaExpiryGroupDelete_flight == true)
                    {
                        foreach (var possibleOption in piPageMember.PossibleOptions)
                        {
                            var value = possibleOption.Value;
                            var value1 = (GroupDisplayHint)value.DisplayContent.Members[1];
                            var value2 = (GroupDisplayHint)value1.Members[0];
                            Assert.AreEqual(value2.Members.Count, 1);
                        }
                    }
                    else
                    {
                        if (!shouldTokenExpiryBeAvailable)
                        {
                            foreach (var possibleOption in piPageMember.PossibleOptions)
                            {
                                var value = possibleOption.Value;
                                var value1 = (GroupDisplayHint)value.DisplayContent.Members[1];
                                var value2 = (GroupDisplayHint)value1.Members[0];
                                Assert.AreEqual(value2.Members.Count, 2);
                                var value3 = (TextDisplayHint)value2.Members[1];
                                var pattern = @"Exp [0-9]{2}\/[0-9]{4}$";
                                Regex regex = new Regex(pattern);
                                var expiry_info_is_available = regex.Matches(value3.DisplayContent);
                                Assert.AreEqual(expiry_info_is_available.Count, 1);
                            }
                        }
                        else
                        {
                            foreach (var possibleOption in piPageMember.PossibleOptions)
                            {
                                var value = possibleOption.Value;
                                var value1 = (GroupDisplayHint)value.DisplayContent.Members[1];
                                var value2 = (GroupDisplayHint)value1.Members[0];
                                Assert.AreEqual(value2.Members.Count, 2);
                                var value3 = (TextDisplayHint)value2.Members[1];
                                var pattern_1 = @"Exp [0-9]{2}\/[0-9]{4}$";
                                var pattern_2 = @"Exp [0-9]{2}\/[0-9]{4} Expired$";
                                var pattern_3 = @"Exp Expired$";
                                Regex regex_1 = new Regex(pattern_1);
                                Regex regex_2 = new Regex(pattern_2);
                                Regex regex_3 = new Regex(pattern_3);
                                var match_pattern_1 = regex_1.Matches(value3.DisplayContent);
                                var match_pattern_2 = regex_2.Matches(value3.DisplayContent);
                                var match_pattern_3 = regex_3.Matches(value3.DisplayContent);

                                var token_expiry_info_is_available = 1;

                                if (match_pattern_1.Count == 0 && match_pattern_2.Count == 0 && match_pattern_3.Count == 0)
                                {
                                    token_expiry_info_is_available = 0;
                                }

                                Assert.AreEqual(token_expiry_info_is_available, 1);
                            }
                        }
                    }
                }
            }
        }

        [DataRow("in", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", true, true, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", true, false, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", false, true, true, "Account003-CC-TokenExpiryDetails")]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", false, false, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", true, true, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", true, false, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", false, true, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", false, false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_EnableIndiaTokenExpiryDetails_SelectInstance_Token_Expiry_XboxNative(string country, string operation, string partner, string pageDisplayName, bool indiaExpiryGroupDelete_flight, bool enableIndiaTokenExpiryDetails_flight, bool shouldTokenExpiryBeAvailable, string piid = null)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation={operation}";

            if (string.Equals(indiaExpiryGroupDelete_flight, false) && string.Equals(enableIndiaTokenExpiryDetails_flight, true) && string.Equals(shouldTokenExpiryBeAvailable, true))
            {
                url = $"/v7.0/Account003/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation={operation}&piid={piid}";
            }

            var flights = new List<string>();
            if (indiaExpiryGroupDelete_flight)
            {
                flights.Add("IndiaExpiryGroupDelete");
            }

            if (enableIndiaTokenExpiryDetails_flight)
            {
                flights.Add("EnableIndiaTokenExpiryDetails");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                var pages = pidl.DisplayPages;
                var pIPage = pages.FirstOrDefault(pg => pg.DisplayName == pageDisplayName);
                Assert.IsNotNull(pIPage);
                var piColumnSequence = (GroupDisplayHint)pIPage.Members[0];
                Assert.IsNotNull(piColumnSequence);
                var piPageMember = (PropertyDisplayHint)piColumnSequence.Members[1];
                Assert.IsNotNull(piPageMember);

                foreach (var options in piPageMember.PossibleOptions)
                {
                    var option = options.Value.DisplayContent.Members;
                    Assert.IsNotNull(option);
                    var pi_info_displayed = (GroupDisplayHint)option[1];
                    Assert.IsNotNull(pi_info_displayed);
                    var pi_info_displayed_subpart = (ContainerDisplayHint)pi_info_displayed.Members[0];
                    Assert.IsNotNull(pi_info_displayed_subpart);
                    var pi_info_displayed_subpart_2 = (TextDisplayHint)pi_info_displayed_subpart.Members[0];
                    Assert.IsNotNull(pi_info_displayed_subpart_2);

                    if (pi_info_displayed_subpart_2.HintId.Contains("Paypal") || pi_info_displayed_subpart_2.HintId.Contains("Paysafecard"))
                    {
                        continue;
                    }

                    if (!string.Equals(country, "in", StringComparison.OrdinalIgnoreCase))
                    {
                        var pattern_1 = @"^.*••[0-9]{4}$";
                        var pattern_2 = @"^.*••[0-9]{4} [0-9]{1,2}\/[0-9]{2}$";
                        Regex regex_1 = new Regex(pattern_1);
                        Regex regex_2 = new Regex(pattern_2);
                        var match_pattern_1 = regex_1.Matches(pi_info_displayed_subpart_2.DisplayContent);
                        var match_pattern_2 = regex_2.Matches(pi_info_displayed_subpart_2.DisplayContent);
                        var cc_expiry_info_is_available = 1;

                        if (match_pattern_1.Count == 0 && match_pattern_2.Count == 0)
                        {
                            cc_expiry_info_is_available = 0;
                        }

                        Assert.AreEqual(cc_expiry_info_is_available, 1);
                    }
                    else
                    {
                        if (indiaExpiryGroupDelete_flight == true)
                        {
                            var pattern = @"^.*••[0-9]{4}$";
                            Regex regex = new Regex(pattern);
                            var expiry_info_is_not_available = regex.Matches(pi_info_displayed_subpart_2.DisplayContent);
                            Assert.AreEqual(expiry_info_is_not_available.Count, 1);
                        }
                        else
                        {
                            if (!shouldTokenExpiryBeAvailable)
                            {
                                var pattern_1 = @"^.*••[0-9]{4}$";
                                var pattern_2 = @"^.*••[0-9]{4} [0-9]{1,2}\/[0-9]{2}$";
                                Regex regex_1 = new Regex(pattern_1);
                                Regex regex_2 = new Regex(pattern_2);
                                var match_pattern_1 = regex_1.Matches(pi_info_displayed_subpart_2.DisplayContent);
                                var match_pattern_2 = regex_2.Matches(pi_info_displayed_subpart_2.DisplayContent);
                                var cc_expiry_info_is_available = 1;

                                if (match_pattern_1.Count == 0 && match_pattern_2.Count == 0)
                                {
                                    cc_expiry_info_is_available = 0;
                                }

                                Assert.AreEqual(cc_expiry_info_is_available, 1);
                            }
                            else
                            {
                                var pattern_1 = @"^.*••[0-9]{4} [0-9]{1,2}\/[0-9]{2}$";
                                var pattern_2 = @"^.*••[0-9]{4} [0-9]{1,2}\/[0-9]{2} Expired$";
                                Regex regex_1 = new Regex(pattern_1);
                                Regex regex_2 = new Regex(pattern_2);
                                var match_pattern_1 = regex_1.Matches(pi_info_displayed_subpart_2.DisplayContent);
                                var match_pattern_2 = regex_2.Matches(pi_info_displayed_subpart_2.DisplayContent);
                                var token_expiry_info_is_available = 1;

                                if (match_pattern_1.Count == 0 && match_pattern_2.Count == 0)
                                {
                                    token_expiry_info_is_available = 0;
                                }

                                Assert.IsNotNull(token_expiry_info_is_available);
                            }
                        }
                    }
                }
            }
        }

        [DataRow("showAVSSuggestions", "credit_card", "visa", "xboxsettings", "add", 3, true, "us", "creditCardVisaSummaryPage", true)]
        [DataRow("showAVSSuggestions", "credit_card", "visa", "storify", "add", 3, true, "us", "creditCardVisaSummaryPage", false)]
        [DataRow("showAVSSuggestions", "credit_card", "visa", "storify", "update", 3, true, "us", "creditCardVisaSummaryPage", false)]
        [DataRow("", "credit_card", "visa", "xboxsettings", "add", 3, true, "us", "creditCardVisaSummaryPage", true)]
        [DataRow("", "credit_card", "visa", "storify", "update", 3, true, "us", "creditCardVisaSummaryPage", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_XboxNativePartners_SummaryPage(
            string enabledFlights,
            string family,
            string type,
            string partner,
            string operation,
            int pagesExpected,
            bool expectAVSAdditionalProperties,
            string country,
            string expectedSummaryPageId,
            bool completePrerequisites)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation={operation}&family={family}&type={type}";

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            PXFlightHandler.AddToEnabledFlights("PXEnableAVSSuggestions");

            var testHeader = new Dictionary<string, string>()
            {
                { "x-ms-flight", enabledFlights },
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, enabledFlights, testHeader);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            Assert.AreEqual(pidls.First().DisplayPages.Count, pagesExpected);
            Assert.AreEqual(pidls.First().DisplayPages[2].HintId, expectedSummaryPageId);
            Assert.IsNotNull(pidls.First().GetDisplayHintById("footerNextCancelModernValidateGroup"));
        }

        [DataRow("in", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", true, true)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", false, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", true, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.AmcWeb, "PaymentInstrumentSelectionPage", false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_IndiaExpiryGroupDelete_SelectInstance_Expiry_Not_Available_Consumer_AmcWeb(string country, string operation, string partner, string pageDisplayName, bool flightEnable, bool shouldExpiryDateBeUnavailable)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation={operation}&language=en-US&country={country}&allowedPaymentMethods%3A%5Bcredit_card.amex%2Ccredit_card.discover%2Ccredit_card.hipercard%2Ccredit_card.jcb%2Ccredit_card.mc% 2Ccredit_card.visa%5D%2C";

            var flights = new List<string>();
            if (flightEnable)
            {
                flights.Add("IndiaExpiryGroupDelete");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                var pages = pidl.DisplayPages;
                var pIPage = pages.FirstOrDefault(pg => pg.DisplayName == pageDisplayName);
                Assert.IsNotNull(pIPage);
                PropertyDisplayHint piPageMember = (PropertyDisplayHint)pIPage.Members.FirstOrDefault(mm => ((PropertyDisplayHint)mm).PropertyName == "id");
                Assert.IsNotNull(piPageMember);
                foreach (var options in piPageMember.PossibleOptions)
                {
                    var option = options.Value.DisplayContent.Members;
                    Assert.IsNotNull(option);
                    var pi_info_displayed = (GroupDisplayHint)option[1];
                    Assert.IsNotNull(pi_info_displayed);
                    var pi_info_displayed_subpart = (GroupDisplayHint)pi_info_displayed.Members[0];
                    Assert.IsNotNull(pi_info_displayed_subpart);

                    if (shouldExpiryDateBeUnavailable)
                    {
                        Assert.AreEqual(pi_info_displayed_subpart.Members.Count, 1);
                    }
                    else
                    {
                        var is_credit_card = false;
                        if (pi_info_displayed_subpart.Members.Count > 1)
                        {
                            is_credit_card = true;
                            Assert.AreEqual(is_credit_card, true);
                            var pi_info_displayed_subpart_2 = (TextDisplayHint)pi_info_displayed_subpart.Members[1];
                            var credit_card_with_expiry_info = pi_info_displayed_subpart_2.DisplayContent.Contains("Exp");
                            Assert.AreEqual(credit_card_with_expiry_info, true);
                        }
                        else
                        {
                            Assert.AreNotEqual(is_credit_card, true);
                        }
                    }
                }
            }
        }

        [DataRow("in", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", true, true)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", false, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", true, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.XboxNative, "PaymentInstrumentSelectionPage", false, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.Storify, "PaymentInstrumentSelectionPage", false, false)]
        [DataRow("in", "selectinstance", GlobalConstants.Partners.XboxSettings, "PaymentInstrumentSelectionPage", true, true)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.Storify, "PaymentInstrumentSelectionPage", true, false)]
        [DataRow("us", "selectinstance", GlobalConstants.Partners.XboxSettings, "PaymentInstrumentSelectionPage", false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_IndiaExpiryGroupDelete_SelectInstance_Expiry_Not_Available_Consumer_XboxNative(string country, string operation, string partner, string pageDisplayName, bool flightEnable, bool shouldExpiryDateBeUnavailable)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation={operation}&language=en-US&country={country}&allowedPaymentMethods%3A%5Bcredit_card.amex%2Ccredit_card.discover%2Ccredit_card.hipercard%2Ccredit_card.jcb%2Ccredit_card.mc% 2Ccredit_card.visa%5D%2C";
            var flights = new List<string>();
            if (flightEnable)
            {
                flights.Add("IndiaExpiryGroupDelete");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                var pages = pidl.DisplayPages;
                var pIPage = pages.FirstOrDefault(pg => pg.DisplayName == pageDisplayName);
                Assert.IsNotNull(pIPage);
                var piColumnSequence = (GroupDisplayHint)pIPage.Members[0];
                Assert.IsNotNull(piColumnSequence);
                var piPageMember = (PropertyDisplayHint)piColumnSequence.Members[1];
                Assert.IsNotNull(piPageMember);

                if (partner == "xboxsettings")
                {
                    Assert.IsTrue(pidl.DataSources.ContainsKey("paymentInstruments"));
                    Assert.AreEqual(pidl.DataSources.Keys.Count, 1);
                    var options = pidl.DataSources["paymentInstruments"].Members;
                    Assert.IsNotNull(options);

                    foreach (var paymentInstrument in options)
                    {
                        var data = (JObject)JsonConvert.DeserializeObject(paymentInstrument.ToString());
                        string addressCountry = data?["details"]?["address"]?["country"].ToString();

                        if (addressCountry == "IN")
                        {
                            Assert.IsNull(data["details"]["expiryYear"]);
                            Assert.IsNull(data["details"]["expiryYear"]);
                        }
                    }
                }
                else
                {
                    foreach (var options in piPageMember.PossibleOptions)
                    {
                        var option = options.Value.DisplayContent.Members;
                        Assert.IsNotNull(option);
                        var pi_info_displayed = (GroupDisplayHint)option[1];
                        Assert.IsNotNull(pi_info_displayed);
                        var pi_info_displayed_subpart = (ContainerDisplayHint)pi_info_displayed.Members[0];
                        Assert.IsNotNull(pi_info_displayed_subpart);
                        var pi_info_displayed_subpart_2 = (TextDisplayHint)pi_info_displayed_subpart.Members[0];
                        Assert.IsNotNull(pi_info_displayed_subpart_2);
                        var pattern = @"^.*••[0-9]{4}$";
                        Regex regex = new Regex(pattern);
                        var expiry_info_is_available = regex.Matches(pi_info_displayed_subpart_2.DisplayContent);
                        Assert.IsNotNull(expiry_info_is_available);
                        var is_expiry_date_removed = false;

                        if (shouldExpiryDateBeUnavailable)
                        {
                            is_expiry_date_removed = true;
                            Assert.AreEqual(is_expiry_date_removed, true);
                            Assert.AreEqual(expiry_info_is_available.Count, 1);
                        }
                        else
                        {
                            Assert.AreNotEqual(is_expiry_date_removed, true);
                        }
                    }
                }
            }
        }

        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Azure, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Azure, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Bing, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Bing, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.CommercialStores, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.CommercialStores, true, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Cart, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Cart, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.AmcWeb, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.AmcWeb, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.AmcXbox, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.AmcXbox, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.ConsumerSupport, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.ConsumerSupport, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.WebPay, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.WebPay, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.XboxWeb, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.XboxWeb, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.XBox, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.XBox, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Payin, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Payin, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.SetupOfficesdx, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.SetupOfficesdx, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.SetupOffice, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.SetupOffice, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.OfficeOobe, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.OfficeOobe, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.NorthstarWeb, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.NorthstarWeb, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Webblends, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Webblends, false, false, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.XboxSettings, true, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.XboxSettings, false, false, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "in", "add", GlobalConstants.Partners.Storify, true, true, true, true)]
        [DataRow("credit_card", "amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb", "us", "add", GlobalConstants.Partners.Storify, false, false, true, true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Flight_IndiaConsumerTokenizationConsent_AddShowsMessage_CC(string family, string type, string country, string operation, string partner, bool flightEnable, bool shouldGetConsentMessage, bool completePrerequisites = false, bool hasIndiaTokenConsentElements = false)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&family={family}&type={type}&partner={partner}&operation={operation}";
            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            var flights = new List<string>();
            if (flightEnable)
            {
                flights.Add("IndiaTokenizationConsentCapture");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, flights);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                foreach (var displayPage in pidl.DisplayPages)
                {
                    var pageMembers = displayPage.Members;
                    var requiredProperty_1 = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentMessage");
                    var requiredProperty_2 = pageMembers.FirstOrDefault(item => item.HintId == "indiaTokenConsentMessageHyperlink");

                    if (hasIndiaTokenConsentElements)
                    {
                        requiredProperty_1 = pidl.GetDisplayHintById("indiaTokenConsentMessage") as TextDisplayHint;
                        requiredProperty_2 = pidl.GetDisplayHintById("indiaTokenConsentMessageHyperlink") as ButtonDisplayHint;
                    }

                    if (shouldGetConsentMessage)
                    {
                        if (displayPage.HintId.ToLower().Contains("creditcardvisa") || displayPage.HintId.ToLower().Contains("creditcardmc"))
                        {
                            if ((partner != GlobalConstants.Partners.AmcXbox && partner != GlobalConstants.Partners.XBox && partner != GlobalConstants.Partners.OfficeOobe) ||
                            ((partner == GlobalConstants.Partners.AmcXbox || partner == GlobalConstants.Partners.XBox || partner == GlobalConstants.Partners.OfficeOobe) &&
                                (displayPage.HintId.ToLower().Contains("creditcardsummary") || displayPage.HintId.ToLower().Contains("creditcardAddress"))))
                            {
                                Assert.IsNotNull(requiredProperty_1);
                                Assert.AreEqual("tokenizationConsentMessage", requiredProperty_1.PropertyName);
                                Assert.IsNotNull(requiredProperty_2);
                            }
                            else
                            {
                                Assert.IsNull(requiredProperty_1);
                                Assert.IsNull(requiredProperty_2);
                            }
                        }
                    }
                    else
                    {
                        Assert.IsNull(requiredProperty_1);
                        Assert.IsNull(requiredProperty_2);
                    }
                }

                var dataDescriptionDetails = (List<PIDLResource>)pidl.DataDescription["details"];
                object tokenizationConsent;
                dataDescriptionDetails[0].DataDescription.TryGetValue("tokenizationConsent", out tokenizationConsent);
                var tokenizationConsentDetails = (PropertyDescription)tokenizationConsent;

                if (shouldGetConsentMessage)
                {
                    Assert.IsNotNull(tokenizationConsentDetails);
                    Assert.AreEqual("bool", tokenizationConsentDetails.DataType);
                    Assert.AreEqual("hidden", tokenizationConsentDetails.PropertyDescriptionType);
                    Assert.AreEqual("clientData", tokenizationConsentDetails.PropertyType);
                }
                else
                {
                    Assert.IsNull(tokenizationConsentDetails);
                }
            }
        }

        [DataRow(GlobalConstants.Partners.Cart, "us", "{\"chargeThresholds\":[20.0]}", "select", false)]
        [DataRow(GlobalConstants.Partners.Cart, "us", "{\"chargeThresholds\":[30.0]}", "select", true)]
        [DataRow(GlobalConstants.Partners.Cart, "us", "{\"chargeThresholds\":[10000.0]}", "select", true)]
        [DataRow(GlobalConstants.Partners.Cart, "us", "{\"chargeThresholds\":[4850.0]}", "select", true)]
        [DataRow(GlobalConstants.Partners.Cart, "us", "{\"chargeThresholds\":[10250.0]}", "select", false)]
        [DataRow(GlobalConstants.Partners.Cart, "fr", "{\"chargeThresholds\":[25.0]}", "select", false)]
        [DataRow(GlobalConstants.Partners.Cart, "fr", "{\"chargeThresholds\":[30.0]}", "select", true)]
        [DataRow(GlobalConstants.Partners.Cart, "fr", "{\"chargeThresholds\":[2000.0]}", "select", true)]
        [DataRow(GlobalConstants.Partners.Cart, "fr", "{\"chargeThresholds\":[2050.0]}", "select", false)]
        [DataRow(GlobalConstants.Partners.Cart, "de", "{\"chargeThresholds\":[45.0]}", "select", false)]
        [DataRow(GlobalConstants.Partners.Cart, "de", "{\"chargeThresholds\":[99.0]}", "select", true)]
        [DataRow(GlobalConstants.Partners.Cart, "de", "{\"chargeThresholds\":[5000.0]}", "select", true)]
        [DataRow(GlobalConstants.Partners.Cart, "de", "{\"chargeThresholds\":[5100.0]}", "select", false)]
        [DataRow(GlobalConstants.Partners.Cart, "ch", "{\"chargeThresholds\":[100.0]}", "select", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescription_SelectPM_BNPL_ChargeThreshold(string partner, string country, string filters, string operation, bool bnplExpected)
        {
            // Arrange - This test is to check charge threshold meets min and max price to list out available payment method.
            string url = $"/v7.0/AccountPMGrouping/paymentMethodDescriptions?partner={partner}&country={country}&language=en-us&operation={operation}";
            if (partner.Equals(GlobalConstants.Partners.Cart))
            {
                url += $"&filters={filters}";
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            foreach (var pidl in pidls)
            {
                if (partner.Equals(GlobalConstants.Partners.Cart))
                {
                    var paymentMethod = pidl.GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
                    if (bnplExpected)
                    {
                        Assert.IsTrue(paymentMethod.PossibleOptions.ContainsKey("buy_now_pay_later_paypal_bnpl"));
                    }
                    else
                    {
                        Assert.IsFalse(paymentMethod.PossibleOptions.ContainsKey("buy_now_pay_later_paypal_bnpl"));
                    }
                }
                else
                {
                    Assert.AreEqual(pidl.ClientAction.ActionType, ClientActionType.ReturnContext);
                }
            }
        }

        /// <summary>
        /// This CIT is used to verify the feature moveCardNumberBeforeCardHolderName, which is used to move the card number before the card holder name.
        /// </summary>
        /// <param name="operation"></param>
        /// <param name="enableMoveCardNumberBeforeCardHolderNameFeature"></param>
        /// <returns></returns>
        [DataRow("add")]
        [DataRow("update")]
        [DataRow("add", true)]
        [DataRow("update", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_MoveCardNumberBeforeCardHolderNameFeatureCheck(string operation, bool enableMoveCardNumberBeforeCardHolderNameFeature = false)
        {
            // Arrange
            int firstNameMemberSequencePosition, lastNameMemberSequencePosition = 0;
            var ccPidls = new List<PIDLResource>();
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&partner=officesmb&family=credit_card&operation{operation}";

            if (enableMoveCardNumberBeforeCardHolderNameFeature)
            {
                string partnerSettingResponse = "{\"add\":{\"template\":\"onepage\",\"features\":{\"customizeElementLocation\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"moveCardNumberBeforeCardHolderName\":true}]}}},\"update\":{\"template\":\"onepage\",\"features\":{\"customizeElementLocation\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"moveCardNumberBeforeCardHolderName\":true}]}}}}";

                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            }

            // Act
            ccPidls = await GetPidlFromPXService(url, HttpStatusCode.OK, additionaHeaders: headers);

            // Assert
            foreach (PIDLResource pidl in ccPidls)
            {
                Assert.IsNotNull(ccPidls, "Pidl is expected to be not null");

                firstNameMemberSequencePosition = pidl.DisplayPages[0].Members.FindIndex(displayHint => displayHint.HintId == Constants.DisplayHintIds.NameDisplayHintId);
                lastNameMemberSequencePosition = pidl.DisplayPages[0].Members.FindIndex(displayHint => displayHint.HintId == Constants.DisplayHintIds.AmexNumberDisplayHintId);

                if (lastNameMemberSequencePosition == -1)
                {
                    lastNameMemberSequencePosition = pidl.DisplayPages[0].Members.FindIndex(displayHint => displayHint.HintId == Constants.DisplayHintIds.NumberDisplayHintId);
                }

                if (enableMoveCardNumberBeforeCardHolderNameFeature)
                {
                    Assert.IsTrue(lastNameMemberSequencePosition < firstNameMemberSequencePosition);
                }
                else
                {
                    Assert.IsTrue(firstNameMemberSequencePosition < lastNameMemberSequencePosition);
                }
            }
        }

        [DataRow("Account001", "us", GlobalConstants.Partners.DefaultTemplate, "add")]
        [DataRow("Account001", "us", GlobalConstants.Partners.DefaultTemplate, "update")]
        [DataRow("Account001", "us", GlobalConstants.Partners.WindowsSettings, "add")]
        [DataRow("Account001", "us", GlobalConstants.Partners.WindowsSettings, "update")]
        [DataRow("Account001", "us", GlobalConstants.Partners.OfficeSMB, "add")]
        [DataRow("Account001", "us", GlobalConstants.Partners.OfficeSMB, "update")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_UseTextForCVVHelpLink(string accountId, string country, string partner, string operation)
        {
            // Arrange
            Dictionary<string, string> headers = new Dictionary<string, string>();
            if (partner.Equals(GlobalConstants.Partners.WindowsSettings) || partner.Equals(GlobalConstants.Partners.OfficeSMB))
            {
                string partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"useTextForCVVHelpLink\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"useTextForCVVHelpLink\":true}]}}},\"update\":{\"template\":\"OnePage\",\"features\":{\"useTextForCVVHelpLink\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"useTextForCVVHelpLink\":true}]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                headers.Add("x-ms-flight", "PXUsePartnerSettingsService,PXDisablePSSCache");
            }

            var ccPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family=credit_card&operation{3}",
                    accountId,
                    country,
                    partner,
                    operation),
                additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(ccPidls, "Pidl is expected to be not null");
            foreach (var pidl in ccPidls)
            {
                PropertyDisplayHint cvv = pidl.GetDisplayHintById("cvv") as PropertyDisplayHint;
                Assert.IsTrue(cvv != null);

                if (partner.Equals(GlobalConstants.Partners.WindowsSettings) || partner.Equals(GlobalConstants.Partners.OfficeSMB))
                {
                    Assert.IsTrue(string.IsNullOrEmpty(cvv.DisplayImage), "Display Image is empty for Windows Settings");
                    Assert.IsFalse(string.IsNullOrEmpty(cvv.DisplayHelpSequenceText), "Display help sequence text is not empty for Windows Settings");

                    PXSettings.PartnerSettingsService.Responses.Clear();
                }
                else
                {
                    Assert.IsFalse(string.IsNullOrEmpty(cvv.DisplayImage), "Display Image is not empty");
                }
            }
        }

        [DataRow(GlobalConstants.Partners.OfficeSMB, true)]
        [DataRow(GlobalConstants.Partners.OfficeSMB, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_CustomizeStructure(string partner, bool removeGroupForExpiryMonthAndYear)
        {
            // Arrange
            string accountId = "Account001";
            string operation = "add";
            string family = "credit_card";
            string country = "us";

            string expectedPSSResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":null}}";

            if (removeGroupForExpiryMonthAndYear)
            {
                expectedPSSResponse = "{\"add\":{\"template\":\"onepage\",\"features\":{\"customizeStructure\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeGroupForExpiryMonthAndYear\":true}]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };

            string url = string.Format(
                        "/v7.0/{0}/paymentMethodDescriptions?partner={1}&operation={2}&language=en-us&family={3}&country={4}",
                        accountId,
                        partner,
                        operation,
                        family,
                        country);

            await GetRequest(
                url,
                headers,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    // Assert
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);

                    var pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource resource in pidls)
                    {
                        foreach (var displayPage in resource.DisplayPages)
                        {
                            Assert.AreEqual(HttpStatusCode.OK, responseCode);
                            var pageMembers = displayPage.Members;
                            var expiryGroup = pageMembers.FirstOrDefault(item => item.HintId == "expiryGroup") as ContainerDisplayHint;
                            if (removeGroupForExpiryMonthAndYear)
                            {
                                Assert.IsTrue(expiryGroup.Members[0] is PropertyDisplayHint);
                                Assert.IsTrue(expiryGroup.Members[1] is PropertyDisplayHint);
                            }
                            else
                            {
                                Assert.IsTrue(expiryGroup.Members[0] is ContainerDisplayHint);
                                Assert.IsTrue(expiryGroup.Members[1] is ContainerDisplayHint);
                            }
                        }
                    }
                });
        }

        [DataRow("Account001", "us", GlobalConstants.Partners.DefaultTemplate, "add")]
        [DataRow("Account001", "us", GlobalConstants.Partners.DefaultTemplate, "update")]
        [DataRow("Account001", "us", GlobalConstants.Partners.WindowsSettings, "add")]
        [DataRow("Account001", "us", GlobalConstants.Partners.WindowsSettings, "update")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_UseFixedSVGForMC(string accountId, string country, string partner, string operation)
        {
            // Arrange
            Dictionary<string, string> headers = new Dictionary<string, string>();
            if (partner.Equals(GlobalConstants.Partners.WindowsSettings) || partner.Equals(GlobalConstants.Partners.OfficeSMB))
            {
                string partnerSettingResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"swapLogoSource\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"useFixedSVGForMC\":true}]}}},\"update\":{\"template\":\"OnePage\",\"features\":{\"swapLogoSource\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"useFixedSVGForMC\":true}]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                headers.Add("x-ms-flight", "PXUsePartnerSettingsService,PXDisablePSSCache");
            }

            var ccPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family=credit_card&type=mc&operation{3}",
                    accountId,
                    country,
                    partner,
                    operation),
                additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(ccPidls, "Pidl is expected to be not null");
            foreach (var pidl in ccPidls)
            {
                LogoDisplayHint mcLogo = pidl.GetDisplayHintById("creditCardMCLogo") as LogoDisplayHint;
                Assert.IsTrue(mcLogo != null);

                if (partner.Equals(GlobalConstants.Partners.WindowsSettings))
                {
                    Assert.IsTrue(mcLogo.SourceUrl.Contains("logo_mc_left_aligned.svg"), "MC logo for Windows Settings uses the fixed SVG");

                    PXSettings.PartnerSettingsService.Responses.Clear();
                }
                else
                {
                    Assert.IsTrue(mcLogo.SourceUrl.Contains("logo_mc.svg"), "MC logo for template partner uses the standard SVG");
                }
            }
        }

        [DataRow("Account001", "us", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "us", GlobalConstants.Partners.NorthstarWeb, "credit_card", "update", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "jp", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "jp", GlobalConstants.Partners.NorthstarWeb, "credit_card", "update", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "ca", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "cn", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "cl", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "pe", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "gt", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "in", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "fr", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "fi", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "pt", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "it", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "br", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "sk", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "sj", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "ch", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", false, true)]
        [DataRow("Account001", "us", GlobalConstants.Partners.NorthstarWeb, "credit_card", "add", false, false, "paymentSummaryText", "You can use this payment option to buy Microsoft products and services anywhere you sign in with Email address.", false, true)]
        [DataRow("EmpAccountNoProfile", "us", GlobalConstants.Partners.CommercialStores, "credit_card", "add", true, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", true, false)]
        [DataRow("EmpAccountNoProfile", "us", GlobalConstants.Partners.CommercialStores, "credit_card", "add", true, false, "accept_card_message", "We accept the following cards:", true, false)]
        [DataRow("EmpAccountNoProfile", "us", "smboffice", "credit_card", "add", true, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", true, false)]
        [DataRow("EmpAccountNoAddressName", "us", "smb", "credit_card", "add", true, true, "microsoft_privacy_static_text", "Microsoft respects your privacy. See our ", true, true)]
        [DataTestMethod]
        public async Task GetPaymentMethod_Add_CreditCard_PartnerSettingsService(string accountId, string country, string partner, string family, string operation, bool iscompletePrerequisites, bool usePartnerSetting, string diplayHintId, string actualText, bool applyAuthInfo, bool ignoreLinkedPidl)
        {
            var addPidls = new List<PIDLResource>();
            Dictionary<string, string> testHeader = new Dictionary<string, string>();

            string url = "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family={3}&operation={4}&language=en-US";

            if (iscompletePrerequisites)
            {
                url += $"&completePrerequisites={iscompletePrerequisites}";
            }

            if (usePartnerSetting)
            {
                testHeader.Add("x-ms-flight", "PXUsePartnerSettingsService,PXDisablePSSCache");
                var pssResponse = "{\"add\":{\"template\":\"onepage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideFirstAndLastNameForCompletePrerequisites\":true}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"update\":{\"template\":\"onepage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideFirstAndLastNameForCompletePrerequisites\":true}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"},\"handlepaymentchallenge\":{\"template\":\"defaultTemplate\"}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(pssResponse);
            }

            if (applyAuthInfo)
            {
                testHeader.Add("x-ms-authinfo", "type=QUFE,email=bWFsaUBzaG93aW5ndGltZS5jb20=,tid=MTcyMzY0MGItN2VhMy00YmE2LWExYTctNjZiOWQ0MDkzMmRj,oid=MzgzMzA5ODMtNjhkZC00NDI5LWE2Y2MtMzdjMTQ0Yzg3YjIx,tokenBody=ZXlKaGRXUWlPaUkwTldFek16QmlNUzFpTVdWakxUUmpZekV0T1RFMk1TMDVaakF6T1RreVlXRTBPV1lpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDOHhOekl6TmpRd1lpMDNaV0V6TFRSaVlUWXRZVEZoTnkwMk5tSTVaRFF3T1RNeVpHTXZJaXdpYVdGMElqb3hOVFk1T1RZMU5UWTRMQ0p1WW1ZaU9qRTFOams1TmpVMU5qZ3NJbVY0Y0NJNk1UVTJPVGsyT0RVek1Dd2lZV055SWpvaU1TSXNJbUZwYnlJNklqUXlSbWRaU1doaFJuSTBjR0ZRTjJwRGMydHdjRmhKY2pkb2NXRTNPV3R6Y1doTmVVcFVPWEZuTWpWWEswSlBlQ3RsYzBFaUxDSmhiWElpT2xzaWNIZGtJbDBzSW1Gd2NHbGtJam9pTURBd01EQXdNRFl0TURBd01DMHdabVl4TFdObE1EQXRNREF3TURBd01EQXdNREF3SWl3aVlYQndhV1JoWTNJaU9pSXlJaXdpWm1GdGFXeDVYMjVoYldVaU9pSkJiR2tpTENKbmFYWmxibDl1WVcxbElqb2lUVzlvWVcxdFpXUWlMQ0pwY0dGa1pISWlPaUkzTkM0eE1Ua3VNVGMxTGpJaUxDSnVZVzFsSWpvaVRXOW9ZVzF0WldRZ1FXeHBJaXdpYjJsa0lqb2lNemd6TXpBNU9ETXROamhrWkMwME5ESTVMV0UyWTJNdE16ZGpNVFEwWXpnM1lqSXhJaXdpYjI1d2NtVnRYM05wWkNJNklsTXRNUzAxTFRJeExURXdPRFV3TXpFeU1UUXRNamczTWpFNE56STVMVGd6T1RVeU1qRXhOUzB6TVRVMk15SXNJbkIxYVdRaU9pSXhNREF6TWpBd01ETkZSVVpHUVRsRUlpd2ljMk53SWpvaWRYTmxjbDlwYlhCbGNuTnZibUYwYVc5dUlpd2ljM1ZpSWpvaVZubE1ZMlp1YW5kV1VYSlhPVFpSUlRac1lsaFpWMUl5YUV0RFR6bE9aMDV2VmtZNFQyUjRlSFJxU1NJc0luUnBaQ0k2SWpFM01qTTJOREJpTFRkbFlUTXROR0poTmkxaE1XRTNMVFkyWWpsa05EQTVNekprWXlJc0luVnVhWEYxWlY5dVlXMWxJam9pYldGc2FVQnphRzkzYVc1bmRHbHRaUzVqYjIwaUxDSjFjRzRpT2lKdFlXeHBRSE5vYjNkcGJtZDBhVzFsTG1OdmJTSXNJblYwYVNJNklrbFdZVmRVTldWaWExVkhVRW8yUkhvMVZtZDBRVUVpTENKMlpYSWlPaUl4TGpBaUxDSjNhV1J6SWpwYklqWXlaVGt3TXprMExUWTVaalV0TkRJek55MDVNVGt3TFRBeE1qRTNOekUwTldVeE1DSmRmUQ==,context=bWU=");
                testHeader.Add("x-ms-clientcontext-encoding", "base64");
            }

            addPidls = await GetPidlFromPXService(
                string.Format(
                    url,
                    accountId,
                    country,
                    partner,
                    family,
                    operation),
                HttpStatusCode.OK,
                null,
                testHeader);

            // Assert
            Assert.IsNotNull(addPidls, "Pidl is expected to be not null");

            foreach (var pidl in addPidls)
            {
                if (applyAuthInfo)
                {
                    if (!ignoreLinkedPidl)
                    {
                        // linked pidl resouce addresses should presents
                        var linkedPidl = pidl.LinkedPidls[0];
                        Assert.AreEqual("profile", linkedPidl.Identity["description_type"]);
                        Assert.AreEqual("employee", linkedPidl.Identity["type"]);
                        Assert.AreEqual(country, linkedPidl.Identity["country"], true);
                        Assert.AreEqual("add", linkedPidl.Identity["operation"]);
                    }

                    DisplayHint saveButtonDisplayHint = pidl.GetDisplayHintById("saveButton");
                    Assert.IsNotNull(saveButtonDisplayHint.Action);
                    Assert.IsNotNull(saveButtonDisplayHint.Action.Context);

                    if (usePartnerSetting)
                    {
                        Assert.IsNotNull(saveButtonDisplayHint.Action.NextAction);

                        var context = JsonConvert.DeserializeObject<RestLink>(JsonConvert.SerializeObject(saveButtonDisplayHint.Action.Context));
                        Assert.IsTrue(context.Href.Contains("scenario=suggestAddressesTradeAVSUsePidlPageV2"));
                        Assert.IsTrue(context.Href.Contains("ModernValidate"));
                        Assert.AreEqual(context.PropertyName, accountId == "EmpAccountNoAddressName" ? "default_address" : "address", "expected propertyName is not found in the context");
                    }
                }

                var pirvacyDiplayHint = pidl.GetDisplayHintById(diplayHintId) as TextDisplayHint;
                Assert.AreEqual(pirvacyDiplayHint.DisplayContent, actualText);

                if (string.Equals(partner, GlobalConstants.Partners.NorthstarWeb, StringComparison.OrdinalIgnoreCase))
                {
                    PropertyDescription expiryYear = pidl.GetPropertyDescriptionByPropertyName("expiryYear");
                    if (expiryYear != null)
                    {
                        Assert.AreEqual(usePartnerSetting, expiryYear.Transformation == null);
                    }
                }
            }
        }

        [DataRow("Account001", "us", GlobalConstants.Partners.NorthstarWeb, "ewallet", "paypal", "add", true)]
        [DataRow("Account001", "us", GlobalConstants.Partners.NorthstarWeb, "ewallet", "paypal", "add", false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_Add_Resources_PartnerSettingsService_DefaultTemplate(string accountId, string country, string partner, string family, string type, string operation, bool usePartnerSetting)
        {
            var addPidls = new List<PIDLResource>();
            string microsoftPrivacyTextId = "microsoft_privacy_static_text";
            string microsoftPrivacyText = "Microsoft respects your privacy. See our ";
            Dictionary<string, string> testHeader = null;

            if (usePartnerSetting)
            {
                testHeader = new Dictionary<string, string>()
                {
                    { "x-ms-flight", "PXUsePartnerSettingsService" },
                };
            }

            addPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family={3}&operation={4}&type={5}",
                    accountId,
                    country,
                    partner,
                    family,
                    operation,
                    type),
                HttpStatusCode.OK,
                null,
                testHeader);

            // Assert
            Assert.IsNotNull(addPidls, "Pidl is expected to be not null");

            foreach (var pidl in addPidls)
            {
                var displayHint = pidl.GetDisplayHintById(microsoftPrivacyTextId) as TextDisplayHint;
                Assert.AreEqual(displayHint.DisplayContent, microsoftPrivacyText);
            }
        }

        [DataRow("Account001", "us", GlobalConstants.Partners.NorthstarWeb, "ewallet", "paypal", "add")]
        [DataRow("Account001", "us", "ggpdeds", "credit_card", null, "add")]
        [DataRow("Account001", "us", "cart", null, null, "select")]
        [DataRow("Account001", "us", "webblends", null, null, "select")]
        [DataRow("Account001", "us", "xbox", "credit_card", "amex", "add", true)]
        [DataTestMethod]
        public async Task TestPartnerMigration_PartnerSettingsService(string accountId, string country, string partner, string family, string type, string operation, bool useOnePage = false)
        {
            var pssPidls = new List<PIDLResource>();
            var pidls = new List<PIDLResource>();
            Dictionary<string, string> testHeader = null;

            testHeader = new Dictionary<string, string>()
            {
                { "x-ms-flight", "PXUsePartnerSettingsService" },
            };

            string expectedPSSResponse = $"{{\"default\":{{\"template\":\"{(useOnePage ? "onepage" : partner)}\"}}}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}",
                    accountId,
                    country,
                    partner);

            if (family != null)
            {
                url += $"&family={family}";
            }

            if (operation != null)
            {
                url += $"&operation={operation}";
            }

            if (type != null)
            {
                url += $"&type={type}";
            }

            pssPidls = await GetPidlFromPXService(
                url,
                HttpStatusCode.OK,
                null,
                testHeader);

            pidls = await GetPidlFromPXService(
                url,
                HttpStatusCode.OK);

            // Assert
            Assert.IsNotNull(pssPidls, "Pidl using PSS is expected to be not null");
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            Assert.IsTrue(pssPidls.Count == pidls.Count, "Pidl count is not expected");
            for (int i = 0; i < pssPidls.Count; i++)
            {
                Assert.IsTrue(pidls[i].Identity.Count == pssPidls[i].Identity.Count && !pidls[i].Identity.Except(pssPidls[i].Identity).Any(), "Pidl Identity should not be different");
                Assert.IsTrue(pidls[i].DataDescription.Count == pssPidls[i].DataDescription.Count, "Pidl data description count should not be different");
                Assert.IsTrue((pidls[i].DisplayPages.Count == pssPidls[i].DisplayPages.Count) ^ useOnePage, "Pidl display pages count should not be different");
            }
        }

        [DataRow("Account001", "us", "testTemplateOverride", "credit_card", "discover", "add", 2)]
        [DataRow("Account001", "us", "testTemplateOverride", "credit_card", "visa", "add", 2)]
        [DataTestMethod]
        public async Task GetPaymentMethod_Add_Resources_PartnerSettingsService_TemplateOverride(string accountId, string country, string partner, string family, string type, string operation, int expectedPages)
        {
            var addPidls = new List<PIDLResource>();
            Dictionary<string, string> testHeader = new Dictionary<string, string>();
            testHeader.Add("x-ms-flight", "PXUsePartnerSettingsService");

            string url = "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family={3}&operation={4}&type={5}&language=en-US";

            string expectedPSSResponse = "{\"add\":{\"template\":\"onepage\",\"resources\":{\"paymentMethod\":{\"credit_card\":{\"template\":\"twopage\"}}},\"features\":{\"threeDSOne\":{\"applicableMarkets\":[\"in\"],\"displayCustomizationDetail\":null}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":null}}}}";

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            addPidls = await GetPidlFromPXService(
                string.Format(
                    url,
                    accountId,
                    country,
                    partner,
                    family,
                    operation,
                    type),
                HttpStatusCode.OK,
                null,
                testHeader);

            // Assert
            Assert.IsNotNull(addPidls, "Pidl is expected to be not null");

            foreach (var pidl in addPidls)
            {
                Assert.AreEqual(expectedPages, pidl.DisplayPages.Count);
            }
        }

        [DataRow("Account001", "us", GlobalConstants.Partners.NorthstarWeb, "select", true)]
        [DataRow("Account001", "us", GlobalConstants.Partners.NorthstarWeb, "select", true)]
        [DataRow("Account001", "us", GlobalConstants.Partners.NorthstarWeb, "select", false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_Select_PM_UsingPartnerSettingsService(string accountId, string country, string partner, string operation, bool usePSScache)
        {
            var selectPidls = new List<PIDLResource>();

            string flights = usePSScache ? "PXUsePartnerSettingsService,enablePaymentMethodGrouping" : "PXUsePartnerSettingsService,enablePaymentMethodGrouping,PXDisablePSSCache";

            Dictionary<string, string> testHeader = new Dictionary<string, string>()
            {
                { "x-ms-flight", flights },
            };

            string expectedPSSResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideFirstAndLastNameForCompletePrerequisites\":true}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}}}";

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);
            selectPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&operation={3}",
                    accountId,
                    country,
                    partner,
                    operation),
                HttpStatusCode.OK,
                null,
                testHeader);

            // Assert
            Assert.IsNotNull(selectPidls, "Pidl is expected to be not null");

            var paymentMethod = selectPidls[0].GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
            Assert.AreEqual(paymentMethod.PossibleValues.Count, 5);
        }

        [DataRow("Account001", "us", "officesmb", "selectInstance", true)]
        [DataRow("Account001", "us", "officesmb", "selectInstance", false)]
        [DataRow("Account001", "in", "officesmb", "selectInstance", true)]
        [DataRow("Account001", "in", "officesmb", "selectInstance", false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_SelectInstance_UsingPartnerSettingsService_DropDown(string accountId, string country, string partner, string operation, bool showPIExpirationInformation)
        {
            var selectPidls = new List<PIDLResource>();

            string expectedPSSResponse = null;
            if (showPIExpirationInformation)
            {
                expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"showPIExpirationInformation\":{\"applicableMarkets\":[]}}}}";
            }
            else
            {
                expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":null}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);
            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };

            selectPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&operation={3}",
                    accountId,
                    country,
                    partner,
                    operation),
                HttpStatusCode.OK,
                null,
                headers);

            // Assert
            Assert.IsNotNull(selectPidls, "Pidl is expected to be not null");

            var paymentInstrument = selectPidls[0].GetDisplayHintById("paymentInstrument") as PropertyDisplayHint;
            SelectOptionDescription unexpiredCreditCardselectOptionDescription = paymentInstrument.PossibleOptions.ElementAt(0).Value;

            SelectOptionDescription expiredCreditCardselectOptionDescription = paymentInstrument.PossibleOptions.ElementAt(1).Value;

            if (!showPIExpirationInformation)
            {
                // Asserts for unexpired credit card
                Assert.IsNotNull(unexpiredCreditCardselectOptionDescription.DisplayText, "option displayText should not be null when showPIExpirationInformation is false");

                if (string.Equals(country, "in"))
                {
                    Assert.AreEqual(unexpiredCreditCardselectOptionDescription.DisplayText, "John Doe ••5678");
                }
                else
                {
                    Assert.AreEqual(unexpiredCreditCardselectOptionDescription.DisplayText, "John Doe ••5678 06/40");
                }

                Assert.IsNotNull(unexpiredCreditCardselectOptionDescription.DisplayImageUrl, "option DisplayImageUrl should not be null when showPIExpirationInformation is false");
                Assert.IsNull(unexpiredCreditCardselectOptionDescription.DisplayContent, "option DisplayContent should be null when showPIExpirationInformation is false");

                // testings for expired credit card
                if (string.Equals(country, "in"))
                {
                    Assert.AreEqual(expiredCreditCardselectOptionDescription.DisplayText, "John Doe ••0002");
                }
                else
                {
                    Assert.AreEqual(expiredCreditCardselectOptionDescription.DisplayText, "John Doe ••0002 06/20");
                }
            }
            else
            {
                // Asserts for unexpired credit card
                Assert.IsNull(unexpiredCreditCardselectOptionDescription.DisplayText, "option displayText should be null when showPIExpirationInformation is true");
                GroupDisplayHint groupDisplayHint = unexpiredCreditCardselectOptionDescription.DisplayContent;
                Assert.AreEqual(groupDisplayHint.Members.Count, 2, "groupDisplayHint should contains 2 element, logo and textgroup");

                ImageDisplayHint logo = groupDisplayHint.Members[0] as ImageDisplayHint;
                Assert.IsNotNull(logo);

                TextGroupDisplayHint textGroup = groupDisplayHint.Members[1] as TextGroupDisplayHint;
                Assert.IsNotNull(textGroup);
                Assert.AreEqual(textGroup.Members.Count, 1, "textGroup should only contain one element for unexpired card");

                groupDisplayHint = unexpiredCreditCardselectOptionDescription.DisplayContent;
                Assert.AreEqual(groupDisplayHint.Members.Count, 2, "groupDisplayHint should contains 2 element, logo and textgroup");

                logo = groupDisplayHint.Members[0] as ImageDisplayHint;
                Assert.IsNotNull(logo);

                textGroup = groupDisplayHint.Members[1] as TextGroupDisplayHint;
                TextDisplayHint cardDisplayText = textGroup.Members[0] as TextDisplayHint;
                if (string.Equals(country, "in"))
                {
                    Assert.AreEqual(cardDisplayText.DisplayContent, "John Doe ••5678");
                    Assert.AreEqual(textGroup.Members.Count, 1, "textGroup should only contain two element for expired card");
                }
                else
                {
                    Assert.AreEqual(cardDisplayText.DisplayContent, "John Doe ••5678 06/40");
                    Assert.IsNotNull(textGroup);
                    Assert.AreEqual(textGroup.Members.Count, 1, "unexpired card doesn't contain expired text");
                }

                Assert.IsNull(unexpiredCreditCardselectOptionDescription.DisplayImageUrl, "option DisplayImageUrl should be null when showPIExpirationInformation is true");
                Assert.IsNotNull(unexpiredCreditCardselectOptionDescription.DisplayContent, "option DisplayContent should not be null when showPIExpirationInformation is true");

                groupDisplayHint = unexpiredCreditCardselectOptionDescription.DisplayContent;
                Assert.AreEqual(groupDisplayHint.Members.Count, 2, "groupDisplayHint should contains 2 element, logo and textgroup");

                logo = groupDisplayHint.Members[0] as ImageDisplayHint;
                Assert.IsNotNull(logo);

                textGroup = groupDisplayHint.Members[1] as TextGroupDisplayHint;
                Assert.IsNotNull(textGroup);
                Assert.AreEqual(textGroup.Members.Count, 1, "textGroup should only contain one element for unexpired card");

                // testings for expired credit card
                groupDisplayHint = expiredCreditCardselectOptionDescription.DisplayContent;
                Assert.AreEqual(groupDisplayHint.Members.Count, 2, "groupDisplayHint should contains 2 element, logo and textgroup");

                logo = groupDisplayHint.Members[0] as ImageDisplayHint;
                Assert.IsNotNull(logo);

                textGroup = groupDisplayHint.Members[1] as TextGroupDisplayHint;
                cardDisplayText = textGroup.Members[0] as TextDisplayHint;
                if (string.Equals(country, "in"))
                {
                    Assert.AreEqual(cardDisplayText.DisplayContent, "John Doe ••0002");
                    Assert.AreEqual(textGroup.Members.Count, 1, "textGroup should only contain two element for expired card");
                }
                else
                {
                    Assert.AreEqual(cardDisplayText.DisplayContent, "John Doe ••0002 06/20");
                    Assert.IsNotNull(textGroup);
                    Assert.AreEqual(textGroup.Members.Count, 2, "textGroup should only contain two element for expired card");

                    TextDisplayHint displayTextExpiry = textGroup.Members[1] as TextDisplayHint;
                    Assert.AreEqual(displayTextExpiry.DisplayContent, "Expired");
                }
            }
        }

        [DataRow("Account001", "us", "SelectInstance", "windowsstore")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SelectInstance_WindowsNative_PartnerSettings(string accountId, string country, string operation, string partner)
        {
            string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"addNewPaymentMethodOption\":{\"applicableMarkets\":[]},\"useListModernResource\":{\"applicableMarkets\":[]},\"includeCreditCardLogos\":{\"applicableMarkets\":[]},\"listPIForWindows\":{\"applicableMarkets\":[]}}}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);
            var requestHeaders = new Dictionary<string, string>()
            {
                { "x-ms-flight", "PXUsePartnerSettingsService" }
            };
            string allowedPMs = "%5B%22credit_card%22%2C%22direct_debit%22%2C%22online_bank_transfer.paysafecard%22%2C%22ewallet%22%2C%22mobile_billing_non_sim%22%2C%22virtual%22%2C%22add_new_payment_method%22%5D";
            string filters = "%7B%22chargeThresholds%22%3A%5B0%5D%7D";

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&language=en-US&operation={3}&allowedPaymentMethods={4}&filters={5}",
                    accountId,
                    country,
                    partner,
                    operation,
                    allowedPMs,
                    filters);

            await GetRequest(
                url,
                requestHeaders,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    List<PIDLResource> pidls = ReadPidlResourceFromJson(responseBody);
                    foreach (PIDLResource pidl in pidls)
                    {
                        if (partner == "windowsstore")
                        {
                            Assert.IsTrue(pidl.DisplayPages.Count == 1);
                            DisplayHint paymentInstrumentListPi = pidl.GetDisplayHintById("paymentInstrumentListPi");
                            List<string> piListStyleHints = new List<string> { "height-auto", "height-inner-auto", "selection-height-auto", "selection-border-bottom-grey", "selection-padding-vertical-none" };
                            Assert.IsTrue(paymentInstrumentListPi.StyleHints.SequenceEqual(piListStyleHints));

                            PropertyDisplayHint propertyDisplayHint = paymentInstrumentListPi as PropertyDisplayHint;
                            GroupDisplayHint displayContent = propertyDisplayHint.PossibleOptions.First().Value.DisplayContent;
                            TextDisplayHint circlePlusIcon = (displayContent.Members.Last() as ContainerDisplayHint).Members.First() as TextDisplayHint;

                            List<string> circlePlusIconStyleHints = new List<string>() { "font-size-small", "margin-end-x-small", "margin-start-small", "text-line-height-none", "font-family-segoe-mdl2-assets" };

                            Assert.IsNotNull(circlePlusIcon, "circlePlusIcon is expected to be not null");
                            Assert.IsTrue(circlePlusIconStyleHints.SequenceEqual(circlePlusIcon.StyleHints), "circlePlusIcon stylehints mismatched");
                        }
                    }
                });
        }

        [DataRow("Account001", "us", "windowsstore", "selectInstance")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SelectInstance_UsingPartnerSettingsService_DropDown_ClientSidePrefill(string accountId, string country, string partner, string operation)
        {
            var selectPidls = new List<PIDLResource>();

            string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"useListModernResource\":{\"applicableMarkets\":[]},\"addNewPaymentMethodOptions\":{\"applicableMarkets\":[]},\"includeCardLogos\":{\"applicableMarkets\":[]}}}}";

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);
            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PXUsePartnerSettingsService,PXDisablePSSCache" } };

            selectPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&operation={3}",
                    accountId,
                    country,
                    partner,
                    operation),
                HttpStatusCode.OK,
                null,
                headers);

            // Assert
            Assert.IsNotNull(selectPidls, "Pidl is expected to be not null");
            var dataSource = selectPidls[0].DataSources["paymentInstruments"].Href;
            Assert.AreEqual("https://{pifd-endpoint}/users/{userId}/PaymentInstrumentsEx?country=us&language=en-US&status=active&operation=selectinstance&partner=windowsstore", dataSource);
            var cardLogoDesc = selectPidls[0].DataDescription.FirstOrDefault(x => x.Key == "cardLogos");
            Assert.IsNotNull(cardLogoDesc);
        }

        /// <summary>
        /// This CIT is used to verify the styling of the select payment method drop down.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="operation"></param>
        /// <param name="ispaymentMethodGroupingFeatureEnable"></param>
        /// <returns></returns>
        [DataRow("macmanage", "select", true)]
        [DataRow("macmanage", "select")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SelectPMDropDownStyling(string partner, string operation, bool ispaymentMethodGroupingFeatureEnable = false)
        {
            foreach (string country in Constants.Countries)
            {
                int logoIndexvalue = 0;
                int logoInGroupIndexValue = 0;
                int textGroupIndexValue = 0;

                string expectedPSSResponse = ispaymentMethodGroupingFeatureEnable
                    ? "{\"" + operation + "\":{\"template\":\"selectpmdropdown\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}}}"
                    : "{\"" + operation + "\":{\"template\":\"selectpmdropdown\"}}";

                PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

                List<PIDLResource> selectPidls = await GetPidlFromPXService($"/v7.0/Account001/paymentMethodDescriptions?country={country}&partner={partner}&operation={operation}", HttpStatusCode.OK);

                // Assert
                Assert.IsNotNull(selectPidls, "Pidl is expected to be not null");
                var selectPM = selectPidls[0].GetDisplayHintById(Constants.DescriptionTypes.PaymentMethodDescription) as PropertyDisplayHint;
                Assert.IsNotNull(selectPM, "The paymentMethod is expected to be not null");
                Assert.IsTrue(selectPM.StyleHints.Contains(Constants.StyleHints.PaddingVerticalSmall), "The paymentMethod HintId should have the styling 'padding-vertical-small'.");

                foreach (SelectOptionDescription possibleOption in selectPM.PossibleOptions.Values)
                {
                    GroupDisplayHint displayContentGroupDisplayHint = possibleOption.DisplayContent as GroupDisplayHint;

                    Assert.IsNotNull(displayContentGroupDisplayHint, $"DisplayContentGroupDisplayHint is null for HintId: {displayContentGroupDisplayHint?.HintId}");
                    Assert.IsTrue(displayContentGroupDisplayHint.StyleHints.Contains(Constants.StyleHints.WidthFill), $"StyleHint 'width-fill' is missing for HintId: {displayContentGroupDisplayHint.HintId}");
                    Assert.IsTrue(displayContentGroupDisplayHint.StyleHints.Contains(Constants.StyleHints.AlignverticalCenter), $"StyleHint 'align-vertical-center' is missing for HintId: {displayContentGroupDisplayHint.HintId}");
                    Assert.AreEqual(displayContentGroupDisplayHint.Members.Count, 2, $"Members count is not 2 for HintId: {displayContentGroupDisplayHint.HintId}");

                    ImageDisplayHint logo = displayContentGroupDisplayHint.Members.FirstOrDefault(logoType => logoType.DisplayHintType == Constants.DisplayHintTypes.Image) as ImageDisplayHint;
                    GroupDisplayHint logoInGroup = displayContentGroupDisplayHint.Members.FirstOrDefault(logoInGroupType => logoInGroupType.DisplayHintType == Constants.DisplayHintTypes.Group) as GroupDisplayHint;

                    if (logo != null)
                    {
                        Assert.IsTrue(
                            logo.StyleHints.Contains(Constants.StyleHints.ImageHeightSmall) &&
                            logo.StyleHints.Contains(Constants.StyleHints.AlignHorizontalCenter),
                            $"StyleHints 'image-height-small' or 'alignment-horizontal-center' are missing for HintId: {displayContentGroupDisplayHint.HintId}");
                    }
                    else
                    {
                        Assert.IsNotNull(logoInGroup, $"LogoInGroup is null for HintId: {displayContentGroupDisplayHint.HintId}");

                        foreach (var logoImage in logoInGroup.Members)
                        {
                            Assert.IsNotNull(logoImage);
                            Assert.AreEqual(logoImage.DisplayHintType, Constants.DisplayHintTypes.Image, $"DisplayHintType is not Image for HintId: {displayContentGroupDisplayHint.HintId}");
                            Assert.IsTrue(
                                logoImage.StyleHints.Contains(Constants.StyleHints.ImageHeightSmall) &&
                                logoImage.StyleHints.Contains(Constants.StyleHints.AlignHorizontalCenter),
                                $"StyleHints 'image-height-small' or 'alignment-horizontal-center' are missing for HintId: {displayContentGroupDisplayHint.HintId}");
                        }

                        Assert.IsTrue(
                            logoInGroup.StyleHints.Contains(Constants.StyleHints.GapSmall) &&
                            logoInGroup.StyleHints.Contains(Constants.StyleHints.DirectionHorizontal),
                            $"StyleHint 'gap-small' or 'direction-horizontal' is missing for HintId: {displayContentGroupDisplayHint.HintId}");
                    }

                    TextGroupDisplayHint textGroup = displayContentGroupDisplayHint.Members.FirstOrDefault(textGroupType => textGroupType.DisplayHintType == Constants.DisplayHintTypes.TextGroup) as TextGroupDisplayHint;

                    textGroupIndexValue = displayContentGroupDisplayHint.Members.FindIndex(textGroupType => textGroupType.DisplayHintType == Constants.DisplayHintTypes.TextGroup);
                    logoIndexvalue = displayContentGroupDisplayHint.Members.FindIndex(logoType => logoType.DisplayHintType == Constants.DisplayHintTypes.Image);
                    logoInGroupIndexValue = displayContentGroupDisplayHint.Members.FindIndex(logoInGroupType => logoInGroupType.DisplayHintType == Constants.DisplayHintTypes.Group);

                    if (logo != null)
                    {
                        // The following assertion verifies the position of the logo and the text
                        Assert.IsTrue(logoIndexvalue > textGroupIndexValue, $"LogoIndexValue is not greater than TextGroupIndexValue for HintId: {displayContentGroupDisplayHint.HintId}");
                    }
                    else
                    {
                        // The following assertion verifies the position of the logoGroup and the text
                        Assert.IsTrue(logoInGroupIndexValue > textGroupIndexValue, $"LogoIndexValue is not greater than TextGroupIndexValue for HintId: {displayContentGroupDisplayHint.HintId}");
                    }

                    Assert.IsNotNull(textGroup, $"TextGroupDisplayHint is null for HintId: {displayContentGroupDisplayHint.HintId}");
                    Assert.IsTrue(
                        textGroup.StyleHints.Contains(Constants.StyleHints.GapSmall) &&
                        textGroup.StyleHints.Contains(Constants.StyleHints.WidthFill),
                        $"StyleHint 'gap-small' or 'width-fill' is missing for HintId: {displayContentGroupDisplayHint.HintId}");

                    TextDisplayHint textHintId = textGroup.Members[0] as TextDisplayHint;

                    Assert.IsNotNull(textHintId, $"TextDisplayHint is null for HintId: {displayContentGroupDisplayHint.HintId}");
                    Assert.IsNotNull(textHintId.DisplayContent, $"DisplayContent is null for HintId: {displayContentGroupDisplayHint.HintId}");
                }
            }
        }

        [DataRow("Account001", "us", "officesmb", "selectInstance")]
        [DataRow("Account001", "in", "officesmb", "selectInstance")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SelectInstance_UsingPartnerSettingsService_ButtonList(string accountId, string country, string partner, string operation)
        {
            var selectPidls = new List<PIDLResource>();

            string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpibuttonlist\",\"features\":null}}";

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);
            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };

            selectPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&operation={3}",
                    accountId,
                    country,
                    partner,
                    operation),
                HttpStatusCode.OK,
                null,
                headers);

            // Assert
            Assert.IsNotNull(selectPidls, "Pidl is expected to be not null");

            var paymentInstrument = selectPidls[0].GetDisplayHintById("paymentInstrument") as PropertyDisplayHint;
            SelectOptionDescription unexpiredCreditCardselectOptionDescription = paymentInstrument.PossibleOptions.ElementAt(0).Value;

            // Asserts for unexpired credit card
            Assert.IsNotNull(unexpiredCreditCardselectOptionDescription);
            GroupDisplayHint groupDisplayHint = unexpiredCreditCardselectOptionDescription.DisplayContent;
            Assert.AreEqual(groupDisplayHint.Members.Count, 2, "groupDisplayHint should contains 2 element, logo and textgroup");

            ImageDisplayHint logo = groupDisplayHint.Members[0] as ImageDisplayHint;
            Assert.IsNotNull(logo);

            GroupDisplayHint group = groupDisplayHint.Members[1] as GroupDisplayHint;
            TextGroupDisplayHint textGroup = group.Members[0] as TextGroupDisplayHint;
            Assert.IsNotNull(textGroup);

            TextDisplayHint cardDisplayText = textGroup.Members[0] as TextDisplayHint;
            if (string.Equals(country, "in"))
            {
                Assert.AreEqual(cardDisplayText.DisplayContent, "John Doe ••5678");
                Assert.AreEqual(textGroup.Members.Count, 1, "textGroup should only contain two element for expired card");
            }
            else
            {
                Assert.AreEqual(cardDisplayText.DisplayContent, "John Doe ••5678 06/40");
                Assert.IsNotNull(textGroup);
            }

            // testings for expired credit card
            SelectOptionDescription expiredCreditCardselectOptionDescription = paymentInstrument.PossibleOptions.ElementAt(1).Value;
            Assert.IsNotNull(expiredCreditCardselectOptionDescription);
            groupDisplayHint = expiredCreditCardselectOptionDescription.DisplayContent;
            Assert.AreEqual(groupDisplayHint.Members.Count, 2, "groupDisplayHint should contains 2 element, logo and textgroup");

            logo = groupDisplayHint.Members[0] as ImageDisplayHint;
            Assert.IsNotNull(logo);

            group = groupDisplayHint.Members[1] as GroupDisplayHint;
            textGroup = group.Members[0] as TextGroupDisplayHint;
            Assert.IsNotNull(textGroup);

            cardDisplayText = textGroup.Members[0] as TextDisplayHint;
            if (string.Equals(country, "in"))
            {
                Assert.AreEqual(cardDisplayText.DisplayContent, "John Doe ••0002");
            }
            else
            {
                Assert.AreEqual(cardDisplayText.DisplayContent, "John Doe ••0002 06/20");
                Assert.IsNotNull(textGroup);
                TextDisplayHint expiredDisplayText = textGroup.Members[1] as TextDisplayHint;
                Assert.AreEqual(expiredDisplayText.DisplayContent, " Expired");
            }
        }

        [DataRow("Account001", "in", "officesmb", "selectInstance")]
        [DataRow("Account001", "us", "officesmb", "selectInstance")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SelectInstance_UsingPartnerSettingsService_RadioButton(string accountId, string country, string partner, string operation)
        {
            var selectPidls = new List<PIDLResource>();

            string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpiradiobutton\",\"features\":null}}";

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);
            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };

            selectPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&operation={3}",
                    accountId,
                    country,
                    partner,
                    operation),
                HttpStatusCode.OK,
                null,
                headers);

            // Assert
            Assert.IsNotNull(selectPidls, "Pidl is expected to be not null");

            var paymentInstrument = selectPidls[0].GetDisplayHintById("paymentInstrument") as PropertyDisplayHint;
            SelectOptionDescription unexpiredCreditCardselectOptionDescription = paymentInstrument.PossibleOptions.ElementAt(0).Value;

            // Asserts for unexpired credit card
            Assert.IsNotNull(unexpiredCreditCardselectOptionDescription);
            GroupDisplayHint groupDisplayHint = unexpiredCreditCardselectOptionDescription.DisplayContent;
            Assert.AreEqual(groupDisplayHint.Members.Count, 2, "groupDisplayHint should contains 2 element, logo and textgroup");

            ImageDisplayHint logo = groupDisplayHint.Members[0] as ImageDisplayHint;
            Assert.IsNotNull(logo);

            GroupDisplayHint group = groupDisplayHint.Members[1] as GroupDisplayHint;
            GroupDisplayHint textGroup = group.Members[0] as GroupDisplayHint;
            Assert.IsNotNull(textGroup);

            TextDisplayHint expiryDisplayText = textGroup.Members[0] as TextDisplayHint;
            if (string.Equals(country, "in"))
            {
                Assert.AreEqual(expiryDisplayText.DisplayContent, "John Doe ••5678");
                Assert.AreEqual(textGroup.Members.Count, 1, "no expiry shold be shown in India");
            }
            else
            {
                Assert.AreEqual(expiryDisplayText.DisplayContent, "John Doe ••5678");
                expiryDisplayText = textGroup.Members[1] as TextDisplayHint;
                Assert.AreEqual(expiryDisplayText.DisplayContent, " 06/40");
                Assert.AreEqual(textGroup.Members.Count, 2);
            }

            // testings for expired credit card
            SelectOptionDescription expiredCreditCardselectOptionDescription = paymentInstrument.PossibleOptions.ElementAt(1).Value;
            Assert.IsNotNull(expiredCreditCardselectOptionDescription);
            groupDisplayHint = expiredCreditCardselectOptionDescription.DisplayContent;
            Assert.AreEqual(groupDisplayHint.Members.Count, 2, "groupDisplayHint should contains 2 element, logo and textgroup");

            logo = groupDisplayHint.Members[0] as ImageDisplayHint;
            Assert.IsNotNull(logo);

            group = groupDisplayHint.Members[1] as GroupDisplayHint;
            textGroup = group.Members[0] as GroupDisplayHint;
            Assert.IsNotNull(textGroup);

            expiryDisplayText = textGroup.Members[0] as TextDisplayHint;
            if (string.Equals(country, "in"))
            {
                Assert.AreEqual(expiryDisplayText.DisplayContent, "John Doe ••0002");
            }
            else
            {
                Assert.AreEqual(expiryDisplayText.DisplayContent, "John Doe ••0002");
                expiryDisplayText = textGroup.Members[1] as TextDisplayHint;
                Assert.AreEqual(expiryDisplayText.DisplayContent, " 06/20");
                TextDisplayHint expiredDisplayText = textGroup.Members[2] as TextDisplayHint;
                Assert.AreEqual(expiredDisplayText.DisplayContent, "Expired");
            }
        }

        [DataRow("Account001", "us", "windowssettings", "selectInstance")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SelectInstance_UsingPartnerSettingsService_DefaultTemplate_WindowsSettings(string accountId, string country, string partner, string operation)
        {
            var selectPidls = new List<PIDLResource>();

            string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"defaulttemplate\",\"features\":null}}";

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            selectPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&operation={3}",
                    accountId,
                    country,
                    partner,
                    operation),
                HttpStatusCode.OK,
                null);

            // Assert
            Assert.IsNotNull(selectPidls, "Pidl is expected to be not null");

            var paymentInstrument = selectPidls[0].GetDisplayHintById("paymentInstrument") as PropertyDisplayHint;

            // check if the disabled tag is true for expired pis
            foreach (SelectOptionDescription possibleOption in paymentInstrument.PossibleOptions.Values)
            {
                DisplayHintAction pidlAction = possibleOption.PidlAction as DisplayHintAction;
                ActionContext context = JsonConvert.DeserializeObject<ActionContext>(JsonConvert.SerializeObject(pidlAction.Context));
                if (context.ResourceActionContext != null)
                {
                    Assert.IsTrue(possibleOption.IsDisabled);

                    GroupDisplayHint optionDisplayGroup = possibleOption.DisplayContent.Members.Last() as GroupDisplayHint;
                    Assert.AreEqual(1, optionDisplayGroup.Members.Count);
                }
                else
                {
                    Assert.IsTrue(!possibleOption.IsDisabled);
                }
            }

            List<DisplayHint> pidlList = selectPidls[0].GetAllDisplayHintsOfId("newPaymentMethodLink");
            ButtonDisplayHint button = pidlList[0] as ButtonDisplayHint;
            Assert.AreEqual("Add or update payment method", button.DisplayContent);

            SelectOptionDescription unexpiredCreditCardselectOptionDescription = paymentInstrument.PossibleOptions.ElementAt(0).Value;

            // Asserts for unexpired credit card
            Assert.IsNotNull(unexpiredCreditCardselectOptionDescription);
            GroupDisplayHint groupDisplayHint = unexpiredCreditCardselectOptionDescription.DisplayContent;
            Assert.AreEqual(groupDisplayHint.Members.Count, 2, "groupDisplayHint should contains 2 element, logo and textgroup");

            ImageDisplayHint logo = groupDisplayHint.Members[0] as ImageDisplayHint;
            Assert.IsNotNull(logo);

            GroupDisplayHint group = groupDisplayHint.Members[1] as GroupDisplayHint;
            GroupDisplayHint textGroup = group.Members[0] as GroupDisplayHint;
            Assert.IsNotNull(textGroup);

            TextDisplayHint expiryDisplayText = textGroup.Members[0] as TextDisplayHint;
            if (string.Equals(country, "in"))
            {
                Assert.AreEqual(expiryDisplayText.DisplayContent, "John Doe ••5678");
                Assert.AreEqual(textGroup.Members.Count, 1, "no expiry shold be shown in India");
            }
            else
            {
                Assert.AreEqual(expiryDisplayText.DisplayContent, "John Doe ••5678");
                expiryDisplayText = textGroup.Members[1] as TextDisplayHint;
                Assert.AreEqual(expiryDisplayText.DisplayContent, " 06/40");
                Assert.AreEqual(textGroup.Members.Count, 2);
            }

            // testings for expired credit card
            SelectOptionDescription expiredCreditCardselectOptionDescription = paymentInstrument.PossibleOptions.ElementAt(1).Value;
            Assert.IsNotNull(expiredCreditCardselectOptionDescription);
            groupDisplayHint = expiredCreditCardselectOptionDescription.DisplayContent;
            Assert.AreEqual(groupDisplayHint.Members.Count, 2, "groupDisplayHint should contains 2 element, logo and textgroup");

            logo = groupDisplayHint.Members[0] as ImageDisplayHint;
            Assert.IsNotNull(logo);

            group = groupDisplayHint.Members[1] as GroupDisplayHint;
            textGroup = group.Members[0] as GroupDisplayHint;
            Assert.IsNotNull(textGroup);

            expiryDisplayText = textGroup.Members[0] as TextDisplayHint;
            if (string.Equals(country, "in"))
            {
                Assert.AreEqual(expiryDisplayText.DisplayContent, "John Doe ••0002");
            }
            else
            {
                Assert.AreEqual(expiryDisplayText.DisplayContent, "John Doe ••0002");
                expiryDisplayText = textGroup.Members[1] as TextDisplayHint;
                Assert.AreEqual(expiryDisplayText.DisplayContent, " 06/20");
                TextDisplayHint expiredDisplayText = textGroup.Members[2] as TextDisplayHint;
                Assert.AreEqual(expiredDisplayText.DisplayContent, "Expired");
            }
        }

        /// <summary>
        /// CIT to validate the ReturnBackupPidlForSplitPaymentSupported feature logic.
        /// </summary>
        [DataRow("officesmb", "listpiradiobutton", true)]
        [DataRow("officesmb", "listpiradiobutton", false)]
        [DataRow("officesmb", "listpidropdown", true)]
        [DataRow("officesmb", "listpibuttonlist", true)]
        [DataRow("officesmb", "defaulttemplate", true)]
        [DataRow("amcweb", "amcweb", true)]
        [DataRow("amcweb", "amcweb", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectInstance_ReturnBackupPidlForSplitPaymentSupported(string partner, string templateName, bool enableFeature)
        {
            // Arrange
            bool[] status = { true, false };

            foreach (bool sendisBackupPiOptional in status)
            {
                string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=SelectInstance&language=en-US&&country=us";
                url = url + (sendisBackupPiOptional ? "&filters={\"splitPaymentSupported\":true,\"isBackupPiOptional\":true}" : "&filters={\"splitPaymentSupported\":true}");

                // TODO: Currently using only officesmb (virtual partner) for testing feature whereas amcweb have this flow by default.
                // When other partners used in this test are migrated to use the templates then either this condition can be updated
                // to include partner name or remove the entire condition.
                if (string.Equals(partner, "officesmb", StringComparison.OrdinalIgnoreCase))
                {
                    string pssmockResponse = "{\"selectinstance\":{\"template\":\"" + templateName + "\",\"features\":{}}}";
                    if (enableFeature)
                    {
                        pssmockResponse = "{\"selectinstance\":{\"template\":\"" + templateName + "\",\"features\":{\"returnBackupPidlForSplitPaymentSupported\":{\"applicableMarkets\":[]}}}}";
                    }

                    PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);
                }

                // Act
                TestContext.WriteLine($"Calling url: {url}");
                List<PIDLResource> pidls = await GetPidlFromPXService(url);

                // Assert
                Assert.IsNotNull(pidls, "pidl is expected to be not null");
                Assert.IsNotNull(pidls[0].Identity["resource_id"], "Pidl expected to have the resource_id in identity");

                // TODO: Amcweb partner check can be removed from below condition, once migrated to use the feature with templates
                if ((enableFeature && string.Equals(templateName, "listpiradiobutton", StringComparison.OrdinalIgnoreCase))
                    || string.Equals(partner, "amcweb", StringComparison.OrdinalIgnoreCase))
                {
                    Assert.AreEqual("selectpibackup", pidls[0].Identity["resource_id"], "Expected to have the resource_id as selectpibackup");
                    var paymentInstruments = pidls[0].GetDisplayHintById("paymentInstrument") as PropertyDisplayHint;

                    if (sendisBackupPiOptional)
                    {
                        Assert.IsTrue(paymentInstruments.PossibleOptions.ContainsKey("NoBackupPISelected"), "Expected to have the NoBackupPISelected option");
                    }
                    else
                    {
                        Assert.IsFalse(paymentInstruments.PossibleOptions.ContainsKey("NoBackupPISelected"), "Expected to not have the NoBackupPISelected option");
                    }
                }
                else
                {
                    Assert.AreEqual("selectpi", pidls[0].Identity["resource_id"], "Expected to have the resource_id as selectpi");
                }

                PXSettings.PartnerSettingsService.ResetToDefaults();
            }
        }

        [DataRow("cart", "us", "useButtonPidlPayload", true)]
        [DataRow("webblends", "us", "paymentInstrument", true)]
        [DataRow("amcweb", "us", "usePaymentInstrumentButton", true)]
        [DataRow("oxowebdirect", "us", "paymentInstrument", false)]
        [TestMethod]
        public async Task GetPaymentMethodDescriptions_Venmo_Show_SelectPaymentResource(string partner, string country, string usePmButtonHintId, bool hasGroupDisplayHint)
        {
            // TODO: Remove once venmo is flighted at 100%
            PXFlightHandler.AddToEnabledFlights("PxEnableVenmo");
            PXFlightHandler.AddToEnabledFlights("PxEnableSelectPMAddPIVenmo");

            global::Tests.Common.Model.Pims.PaymentInstrument expectedPI = PimsMockResponseProvider.GetPaymentInstrument("Account001", "Account001-Pi014-Venmo");

            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=SelectInstance&country={country}&language=en-US&allowedPaymentMethods=%5B%22ewallet.venmo%22%5D";

            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null);

            PIDLResource pidl = pidls[0];
            Assert.IsNotNull(pidl, "PIDL should not be null");
            Assert.IsNull(pidl.ClientAction, "Client action should be null");

            PageDisplayHint piSelectionPage = pidl.DisplayPages[0];
            Assert.IsNotNull(piSelectionPage, "Payment Instrument Selection Page should not be null.");
            Assert.AreEqual("paymentInstrumentSelectPage", piSelectionPage.HintId, "paymentInstrumentSelectPage HintId is not as expected");

            PropertyDisplayHint piProperty = pidl.GetDisplayHintById("paymentInstrument") as PropertyDisplayHint;
            Assert.IsNotNull(piProperty, "paymentInstrument property display hint should not be null.");

            string piid = expectedPI.PaymentInstrumentId;
            Assert.IsNotNull(piid, "pi id should not be null");

            Assert.IsNotNull(pidl.GetDisplayHintById(usePmButtonHintId), $"DisplayHint with id {usePmButtonHintId} is missing.");

            SelectOptionDescription description = piProperty.PossibleOptions.ElementAt(0).Value;
            GroupDisplayHint content = description.DisplayContent;

            if (hasGroupDisplayHint)
            {
                Assert.IsNotNull(content);

                ImageDisplayHint logo = content.Members[0] as ImageDisplayHint;
                Assert.IsNotNull(logo, $"ImageDisplayGroup with id \"optionLogo_{piid}\" pi logo should not be null");
                Assert.AreEqual(logo.HintId, $"optionLogo_{piid}", $"pi logo HintId should match \"optionLogo_{piid}\"");
                Assert.IsTrue(logo.SourceUrl.ToLower().Contains("venmo"), "pi logo sourceUrl should contain \"venmo\".");

                GroupDisplayHint optionGroup = content.Members[1] as GroupDisplayHint;
                Assert.IsNotNull(optionGroup, $"GroupDisplayHint with id \"optionDisplayGroup_{piid}\" should not be null");
                Assert.AreEqual(optionGroup.HintId, $"optionDisplayGroup_{piid}", $"pi logo HintId should match \"optionDisplayGroup_{piid}\"");
            }
            else
            {
                Assert.IsNull(content);
                Assert.IsNotNull(description.DisplayImageUrl);
                Assert.IsTrue(description.DisplayImageUrl.Contains("venmo"), "DisplayImageUrl should contain \"venmo\".");
            }
        }

        [DataRow("playxbox", "us", "paymentInstrument")]
        [TestMethod]
        public async Task GetPaymentMethodDescriptions_Venmo_Show_SelectPaymentResource_withPSS(string partner, string country, string usePmButtonHintId)
        {
            PXSettings.PartnerSettingsService.ArrangeResponse(Constants.PSSMockResponses.PXPartnerSettingsPlayXbox);

            global::Tests.Common.Model.Pims.PaymentInstrument expectedPI = PimsMockResponseProvider.GetPaymentInstrument("Account001", "Account001-Pi014-Venmo");

            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=SelectInstance&country={country}&language=en-US&allowedPaymentMethods=%5B%22ewallet.venmo%22%5D";

            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null);

            PIDLResource pidl = pidls[0];
            Assert.IsNotNull(pidl, "PIDL should not be null");
            Assert.IsNull(pidl.ClientAction, "Client action should be null");

            PageDisplayHint piSelectionPage = pidl.DisplayPages[0];
            Assert.IsNotNull(piSelectionPage, "Payment Instrument Selection Page should not be null.");
            Assert.AreEqual("paymentInstrumentSelectPage", piSelectionPage.HintId, "paymentInstrumentSelectPage HintId is not as expected");

            PropertyDisplayHint piProperty = pidl.GetDisplayHintById("paymentInstrument") as PropertyDisplayHint;
            Assert.IsNotNull(piProperty, "paymentInstrument property display hint should not be null.");

            string piid = expectedPI.PaymentInstrumentId;
            Assert.IsNotNull(piid, "pi id should not be null");

            Assert.IsNotNull(pidl.GetDisplayHintById(usePmButtonHintId), $"DisplayHint with id {usePmButtonHintId} is missing.");

            SelectOptionDescription description = piProperty.PossibleOptions.ElementAt(0).Value;
            GroupDisplayHint content = description.DisplayContent;

            Assert.IsNotNull(content);

            ImageDisplayHint logo = content.Members[0] as ImageDisplayHint;
            Assert.IsNotNull(logo, $"ImageDisplayGroup with id \"optionLogo_{piid}\" pi logo should not be null");
            Assert.AreEqual(logo.HintId, $"optionLogo_{piid}", $"pi logo HintId should match \"optionLogo_{piid}\"");
            Assert.IsTrue(logo.SourceUrl.ToLower().Contains("venmo"), "pi logo sourceUrl should contain \"venmo\".");

            GroupDisplayHint optionGroup = content.Members[1] as GroupDisplayHint;
            Assert.IsNotNull(optionGroup, $"GroupDisplayHint with id \"optionDisplayGroup_{piid}\" should not be null");
            Assert.AreEqual(optionGroup.HintId, $"optionDisplayGroup_{piid}", $"pi logo HintId should match \"optionDisplayGroup_{piid}\"");
        }

        [DataRow("azure", "\"dn\nmo%42#22%5D")]
        [DataRow("commercialstores", "\"dn\venmo%42#22%5D")]
        [DataTestMethod]
        public async Task SelectPaymentResource_InvalidAllowedPaymentMethod(string partner, string allowedPaymentMethods)
        {
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=SelectInstance&country=us&language=en-US&allowedPaymentMethods={allowedPaymentMethods}";

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.InternalServerError, responseCode);
                    Assert.IsTrue(responseBody.Contains("PIDLInvalidAllowedPaymentMethods"));
                });
        }

        [DataRow("unionpay_creditcard", "northstarweb", "update")]
        [DataRow("unionpay_debitcard", "webblends", "update")]
        [DataRow("unionpay_creditcard", "webblends", "add")]
        [DataRow("unionpay_debitcard", "northstarweb", "add")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ChinaUnionPayNoCountry(string type, string partner, string operation)
        {
            var url = $"/v7.0/Account001/paymentMethodDescriptions?type={type}&partner={partner}&operation={operation}&language=en-Us&family=credit_card";

            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    if (operation == "update")
                    {
                        Assert.AreEqual(HttpStatusCode.OK, responseCode);
                        List<PIDLResource> pidls = ReadPidlResourceFromJson(responseBody);
                        Assert.IsNotNull(pidls, "Pidl is expected to be not null");
                        Assert.IsTrue(pidls.Count > 0);
                    }
                    else
                    {
                        Assert.AreEqual(HttpStatusCode.BadRequest, responseCode);
                        Assert.IsTrue(responseBody.Contains("Country is a mandatory argument"));
                    }
                });
        }

        [DataRow("commercialstores")]
        [DataRow("amcweb")]
        [DataRow("defaulttemplate")]
        [DataRow("officesmb")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SepaUpdateIE(string partner)
        {
            // Arrange
            string type = "sepa";
            string family = "direct_debit";
            var headers = new Dictionary<string, string>();

            if (partner.Contains("officesmb"))
            {
                string partnerSettingResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\",\"resources\":{\"paymentMethod\":{\"direct_debit.sepa\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\"}}}},\"update\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\",\"resources\":{\"paymentMethod\":{\"direct_debit.sepa\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\"}}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };
            }

            var url = $"/v7.0/Account001/paymentMethodDescriptions?type={type}&partner={partner}&operation=Update&language=en-Us&family={family}&country=ie";

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            Assert.AreEqual(type, pidls[0].Identity["type"]);
            Assert.AreEqual(family, pidls[0].Identity["family"]);
        }

        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_AlignedLogos()
        {
            string url = "/v7.0/Account01/paymentMethodDescriptions?country=us&language=en-us&partner=commercialstores&operation=add&family=credit_card&type=amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb";

            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, "PXUseAlignedLogos", null);

            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                LogoDisplayHint logo = pidl.DisplayPages.First().Members.OfType<LogoDisplayHint>().First();
                Assert.IsTrue(logo.SourceUrl.EndsWith("_aligned.svg"));
            }
        }

        [DataRow("storify", true, "us")]
        [DataRow("xboxsettings", true, "us")]
        [DataTestMethod]
        public async Task Delete_Venmo(string partner, bool needsVenmo, string country)
        {
            string accountId = "Account001";

            string url = string.Format(
                     "/v7.0/{0}/paymentMethodDescriptions?type=venmo&partner={1}&operation=Delete&country=US&language=en-US&family=ewallet",
                     accountId,
                     partner);

            PXFlightHandler.AddToEnabledFlights("enablePaymentMethodGrouping");
            PXFlightHandler.AddToEnabledFlights("PxEnableVenmo");
            PXFlightHandler.AddToEnabledFlights("PxEnableSelectPMAddPIVenmo");

            PaymentMethod pm = new PaymentMethod
            {
                PaymentMethodFamily = "ewallet",
                PaymentMethodType = "venmo",
            };

            List<PaymentMethod> paymentMethods = new List<PaymentMethod> { pm };
            PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(paymentMethods));

            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, null);

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(needsVenmo == pidlString.Contains("venmo"));
            Assert.IsTrue(pidlString.Contains(string.Format("https://{{pifd-endpoint}}/users/{{userId}}/PaymentInstrumentsEx/{{partnerData.prefillData.id}}?partner={0}", partner)));
        }

        /// <summary>
        /// CIT to validate the MoveSelectedPIToFirstOption feature logic which moves the selectedPI to first option making it default instance.
        /// </summary>
        [DataRow("officesmb", "listpiradiobutton", true)]
        [DataRow("officesmb", "listpiradiobutton", false)]
        [DataRow("officesmb", "listpidropdown", true)]
        [DataRow("officesmb", "listpidropdown", false)]
        [DataRow("officesmb", "listpibuttonlist", true)]
        [DataRow("officesmb", "listpibuttonlist", false)]
        [DataRow("amcweb", "amcweb", true)]
        [DataRow("amcweb", "amcweb", false)]
        [DataRow("oxowebdirect", "oxowebdirect", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectInstance_MoveSelectedPIToFirstOption(string partner, string templateName, bool enableFeature)
        {
            // Arrange
            bool[] status = { true, false };
            Dictionary<string, bool> piCollectionWithStatus = new Dictionary<string, bool>()
            {
                // id, status- is id valid and available in listpi
                { "Account001-Pi003-Amex", true },
                { "Account001-Pi008-Paypal", true },
                { "Not-existing-invalid-pi-id", false },
                { "Invalid-pidl-filter-%22%7D", false },
                { "ghostery", false }
            };

            foreach (var piKvp in piCollectionWithStatus)
            {
                string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=SelectInstance&language=en-US&&country=us&filters=%7B%22id%22%3A%22{piKvp.Key}%22%7D";

                if (piKvp.Key == "ghostery")
                {
                    // The URL below does not include an ID parameter for the filters, which should result in an exception.
                    url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&orderId=30982be1-af14-4fd8-91c1-3f4a4b75d1b9&operation=SelectInstance&language=en-GB&filters={piKvp.Key}&country=GB&allowedPaymentMethods=%5B%22credit_card.hipercard%22%2C%22credit_card.elo%22%2C%22credit_card.verve%22%2C%22credit_card.unionpay_creditcard%22%2C%22credit_card.unionpay_debitcard%22%2C%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22credit_card.discover%22%2C%22credit_card.jcb%22%2C%22ewallet.paypal%22%2C%22ewallet.alipay_billing_agreement%22%2C%22ewallet.kakaopay%22%2C%22direct_debit.sepa%22%2C%22direct_debit.ideal_billing_agreement%22%2C%22direct_debit.ach%22%2C%22invoice_credit.klarna%22%2C%22mobile_billing_non_sim%22%2C%22add_new_payment_method%22%5D";
                }

                // TODO: Currently using only officesmb (virtual partner) for testing feature whereas amcweb have this flow by default.
                // When other partners used in this test are migrated to use the templates then either this condition can be updated
                // to include partner name or remove the entire condition.
                if (string.Equals(partner, "officesmb", StringComparison.OrdinalIgnoreCase))
                {
                    string pssmockResponse = "{\"selectinstance\":{\"template\":\"" + templateName + "\",\"features\":{}}}";
                    if (enableFeature)
                    {
                        pssmockResponse = "{\"selectinstance\":{\"template\":\"" + templateName + "\",\"features\":{\"moveSelectedPIToFirstOption\":{\"applicableMarkets\":[]}}}}";
                    }

                    PXSettings.PartnerSettingsService.ArrangeResponse(pssmockResponse);
                }

                // Act
                TestContext.WriteLine($"Calling url: {url}");
                HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, GetPXServiceUrl(url));
                var response = await PXClient.SendAsync(request);
                string responseJson = await response.Content.ReadAsStringAsync();

                // Assert
                if (piKvp.Key == "Invalid-pidl-filter-%22%7D" || piKvp.Key == "ghostery")
                {
                    Assert.IsTrue(responseJson.Contains("Error deserializing filters query param"));
                    Assert.IsTrue(responseJson.Contains("FiltersIsInvalid"));
                    Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode);
                }
                else
                {
                    Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
                    List<PIDLResource> pidls = ReadPidlResourceFromJson(responseJson);

                    Assert.IsNotNull(pidls, "pidl is expected to be not null");
                    Assert.AreEqual("selectpi", pidls[0].Identity["resource_id"]);

                    var paymentInstruments = pidls[0].GetDisplayHintById("paymentInstrument") as PropertyDisplayHint;
                    var idDataDescription = pidls[0].DataDescription["id"] as PropertyDescription;

                    // TODO: Remove the amcweb from condition once migrated to use the pss feature with templates
                    // If feture enabled or amcweb partner AND pi is valid id available in listpi
                    if ((enableFeature || string.Equals(partner, "amcweb", StringComparison.OrdinalIgnoreCase)) && piKvp.Value)
                    {
                        Assert.AreEqual(piKvp.Key, paymentInstruments.PossibleOptions.First().Key, $"Expected to have the PI:{piKvp.Key} as first option");
                        Assert.AreEqual(piKvp.Key, paymentInstruments.PossibleValues.First().Key, $"Expected to have the PI:{piKvp.Key} as first option");

                        Assert.AreEqual(piKvp.Key, idDataDescription.PossibleValues.First().Key, $"Expected to have the PI:{piKvp.Key} as first option");
                    }
                    else
                    {
                        Assert.AreNotEqual(piKvp.Key, paymentInstruments.PossibleOptions.First().Key, $"Expected to not have the PI:{piKvp.Key} as first option");
                        Assert.AreNotEqual(piKvp.Key, paymentInstruments.PossibleValues.First().Key, $"Expected to not have the PI:{piKvp.Key} as first option");

                        Assert.AreNotEqual(piKvp.Key, idDataDescription.PossibleValues.First().Key, $"Expected to not have the PI:{piKvp.Key} as first option");
                    }
                }

                PXSettings.PartnerSettingsService.ResetToDefaults();
            }
        }

        [DataRow("123456", "1234567")]
        [DataRow("12345", "1234")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ValidateRegEx_PostalCode_Cambodia(string validPostalCode, string invalidPostalCode)
        {
            // Arrange
            string[] resourceTypes = new string[]
            {
                "credit_card,visa", "credit_card,amex", "credit_card,mc", "virtual,invoice_basic", "virtual,invoice_check"
            };

            foreach (string partner in Constants.AllPartners)
            {
                if (string.Equals(partner, Constants.PartnerNames.Wallet))
                {
                    continue;
                }

                foreach (var resourceType in resourceTypes)
                {
                    var familyAndType = resourceType.Split(',');
                    if ((string.Equals(familyAndType[1], "invoice_basic") || string.Equals(familyAndType[1], "invoice_check"))
                        && !string.Equals(partner, Constants.PartnerNames.CommercialStores))
                    {
                        continue;
                    }

                    string url = $"/v7.0/Account01/paymentMethodDescriptions?type={familyAndType[1]}&partner={partner}&operation=add&country=kh&language=en-US&family={familyAndType[0]}";

                    // Act
                    HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, GetPXServiceUrl(url));
                    var response = await PXClient.SendAsync(request);

                    // Assert
                    Assert.IsTrue(response.IsSuccessStatusCode, $"Request failed with status: {response.StatusCode} and url: {url}");

                    List<PIDLResource> pidls = ReadPidlResourceFromJson(await response.Content.ReadAsStringAsync());

                    ValidatePidlPropertyRegex(pidls[0], "postal_code", validPostalCode, true);
                    ValidatePidlPropertyRegex(pidls[0], "postal_code", invalidPostalCode, false);
                }
            }
        }

        [DataRow("northstarweb", "us", "VISA", "Account001-Pi001-Visa", "123")]
        [DataRow("northstarweb", "us", "American Express", "Account001-Pi003-Amex", "1234")]
        [DataRow("webblends", "us", "VISA", "Account001-Pi001-Visa", "123")]
        [DataRow("amcweb", "us", "VISA", "Account001-Pi003-Amex", "1234")]
        [DataRow("oxowebdirect", "us", "MasterCard", "Account001-Pi002-MC", "123")]
        [DataRow("northstarweb", "br", "VISA", "Account001-Pi001-Visa", "123")]
        [DataRow("northstarweb", "se", "VISA", "Account001-Pi001-Visa", "123")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SearchTransactionIsAsExpected(string partner, string country, string cardtype, string pidlId, string cvv)
        {
            string accountId = "Account001";
            PaymentInstrument expectedPI = PimsMockResponseProvider.GetPaymentInstrument(accountId, pidlId);
            var url = $"/v7.0/{accountId}/paymentMethodDescriptions?family=credit_card&partner={partner}&operation=searchTransactions&country={country}&language=en-Us";
            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    PIDLResource pidl = ReadPidlResourceFromJson(responseBody).FirstOrDefault();
                    Assert.IsNotNull(pidl, "Pidl is expected to be not null");
                    Assert.AreEqual(expectedPI.PaymentInstrumentId, pidlId, "Payment Instrument Id is not as expected");
                    Assert.AreEqual(expectedPI.PaymentInstrumentAccountId, accountId, "Payment Instrument Account Id is not as expected");

                    ValidatePidlPropertyRegex(pidl, "cvvToken", cvv, true);
                });
        }

        [DataRow("oxowebdirect", "us", "Account010-Pi001-MC-SearchTransaction", true)]
        [DataRow("northstarweb", "us", "Account010-Pi001-MC-SearchTransaction", true)]
        [DataRow("oxowebdirect", "us", "Account010-Pi002-Visa-SearchTransaction", false)]
        [DataRow("northstarweb", "us", "Account010-Pi002-Visa-SearchTransaction", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SearchTransactionTruncateAndMaskCardHolderName(string partner, string country, string pidlId, bool isCardHolderNameTruncated)
        {
            string accountId = "Account010";
            PaymentInstrument expectedPI = PimsMockResponseProvider.GetPaymentInstrument(accountId, pidlId);
            var url = $"/v7.0/{accountId}/paymentMethodDescriptions?family=credit_card&partner={partner}&operation=searchTransactions&country={country}&language=en-Us";
            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    PIDLResource pidl = ReadPidlResourceFromJson(responseBody).FirstOrDefault();
                    Assert.IsNotNull(pidl, "Pidl is expected to be not null");
                    PropertyDescription id = pidl.GetPropertyDescriptionByPropertyName("id");
                    var possibleValue = id.PossibleValues.Where(x => x.Key.Contains(pidlId)).FirstOrDefault();
                    Assert.AreEqual(possibleValue.Value.Contains(".."), isCardHolderNameTruncated, isCardHolderNameTruncated ? "Card holder name is not truncated." : "Card holder name is truncated.");
                });
        }

        [DataRow("northstarweb", "us", "en-US", "Use an existing payment method")]
        [DataRow("defaulttemplate", "us", "en-US", "Use an existing payment method")]
        [DataRow("northstarweb", "ca", "fr-CA", "Utiliser un mode de paiement existants")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SearchTransactionEmptyOrNoPI(string partner, string country, string language, string expectedDefaultMsg)
        {
            string accountId = "Acc1";

            var url = $"/v7.0/{accountId}/paymentMethodDescriptions?family=credit_card&partner={partner}&operation=searchTransactions&country={country}&language={language}";
            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    PIDLResource pidl = ReadPidlResourceFromJson(responseBody).FirstOrDefault();
                    Assert.IsNotNull(pidl, "Pidl is expected to be not null");
                    var paymentInstrumentSearchTransactionsId = pidl.GetDisplayHintById("paymentInstrumentSearchTransactionsId");
                    Assert.IsTrue(paymentInstrumentSearchTransactionsId.IsDisabled);
                    var selectOptionDescriptions = (paymentInstrumentSearchTransactionsId as PropertyDisplayHint).PossibleOptions.Select(x => x.Value);
                    var defaultMsg = selectOptionDescriptions.Select(x => x.DisplayText).FirstOrDefault();
                    var paymentInstrumentSearchTransactionsCvv = pidl.GetDisplayHintById("paymentInstrumentSearchTransactionsCvv");

                    Assert.AreEqual(expectedDefaultMsg, defaultMsg);
                    Assert.IsTrue(paymentInstrumentSearchTransactionsCvv.IsHidden);
                });
        }

        [DataRow("northstarweb", "us", "MasterCard", "Account001-Pi002-MC", "12345")]
        [DataRow("webblends", "us", "VISA", "Account001-Pi002-MC", "12345")]
        [DataRow("oxowebdirect", "us", "American Express", "Account001-Pi002-MC", "12356")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SearchTransactionIsNotAsExpected(string partner, string country, string cardtype, string pidlId, string cvv)
        {
            string accountId = "Account001";
            PaymentInstrument expectedPI = PimsMockResponseProvider.GetPaymentInstrument(accountId, pidlId);
            var url = $"/v7.0/{accountId}/paymentMethodDescriptions?family=credit_card&partner={partner}&operation=searchTransactions&country={country}&language=en-Us";
            await GetRequest(
                url,
                null,
                null,
                (responseCode, responseBody, responseHeaders) =>
                {
                    Assert.AreEqual(HttpStatusCode.OK, responseCode);
                    PIDLResource pidl = ReadPidlResourceFromJson(responseBody).FirstOrDefault();
                    Assert.AreEqual(expectedPI.PaymentInstrumentId, pidlId, "Payment Instrument Id is not as expected");
                    Assert.AreEqual(expectedPI.PaymentInstrumentAccountId, accountId, "Payment Instrument Account Id is not as expected");
                    ValidatePidlPropertyRegex(pidl, "cvvToken", cvv, false, errorToShowOnAssertFail: $"'{cardtype}' cvv '{cvv}' expected to match with regex");
                });
        }

        [DataRow("Account001", "us", GlobalConstants.Partners.Webblends, true, false)]
        [DataRow("Account001", "us", GlobalConstants.Partners.Webblends, false, false)]
        [DataRow("Account001", "us", GlobalConstants.Partners.Webblends, false, true)]
        [DataRow("Account001", "us", GlobalConstants.Partners.DefaultTemplate, true, false)]
        [DataRow("Account001", "us", GlobalConstants.Partners.DefaultTemplate, false, false)]
        [DataRow("Account001", "us", "test_securepx", true, false)]
        [DataRow("Account001", "us", "test_securepx", true, true)]
        [DataRow("Account001", "us", "onepage", true, false)]
        [DataRow("Account001", "us", "onepage", false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_AddCreditCard_EnableSecureField(string accountId, string country, string partner, bool enableSecureField, bool secureFieldFeatureEanbled)
        {
            // Arrange
            if (enableSecureField)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableSecureFieldAddCreditCard");
                PXFlightHandler.AddToEnabledFlights("PXUsePartnerSettingsService");
                PXFlightHandler.AddToEnabledFlights("PXDisablePSSCache");
            }

            string partnerSettingResponse;
            if (secureFieldFeatureEanbled)
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"defaultTemplate\",\"features\":{\"enableSecureField\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"enableSecureFieldAddCC\":true}]}}}}";
            }
            else
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"defaultTemplate\",\"features\":{\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> ccPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family=credit_card&operation=add",
                    accountId,
                    country,
                    partner));

            // Assert
            VerifyCreditCardPidls(enableSecureField, ccPidls);
        }

        /// <summary>
        /// PSS Partner Verification Test for Credit Card Replace Operation.
        /// </summary>
        /// <returns></returns>
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ReplaceCreditCard_PSS()
        {
            var partnerSettingResponse = PartnerSettingsServiceMockResponseProvider.GetPSSMockResponseById("Account001-PI001-InlineRedirectionDefaultTemplate");
            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            List<PIDLResource> ccPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/Account001/paymentMethodDescriptions?country=us&partner=officesmb&family=credit_card&operation=replace"));

            // Assert
            Assert.IsTrue(ccPidls.Count > 0);
            Assert.IsNotNull(ccPidls[0].DisplayPages.Count == 1, "DisplayPages count is expected to be 1");
        }

        [DataRow("Account001", "us", GlobalConstants.Partners.Webblends, true)]
        [DataRow("Account001", "us", GlobalConstants.Partners.Webblends, false)]
        [DataRow("Account001", "us", GlobalConstants.Partners.DefaultTemplate, true)]
        [DataRow("Account001", "us", GlobalConstants.Partners.DefaultTemplate, false)]
        [DataRow("Account001", "us", "onepage", true)]
        [DataRow("Account001", "us", "onepage", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ReplaceCreditCard_EnableSecureField(string accountId, string country, string partner, bool enableSecureField)
        {
            if (enableSecureField)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableSecureFieldReplaceCreditCard");
            }

            List<PIDLResource> ccPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family=credit_card&operation=replace",
                    accountId,
                    country,
                    partner));

            // Assert
            VerifyCreditCardPidls(enableSecureField, ccPidls);
        }

        private static void VerifyCreditCardPidls(bool flightEnable, List<PIDLResource> ccPidls)
        {
            const string PidlSdkWaitTimeForSecureFieldsInit = "pidlSdkWaitTimeForSecureFieldsInit";
            Assert.IsNotNull(ccPidls, "Pidl is expected to be not null");

            foreach (var pidl in ccPidls)
            {
                var accountToken = (pidl.DataDescription["details"] as List<PIDLResource>)[0].DataDescription["accountToken"] as PropertyDescription;

                if (flightEnable)
                {
                    if (pidl.Identity["type"].ToString() == "amex")
                    {
                        var cardNumberAmex = pidl.GetDisplayHintById("cardNumberAmex") as SecurePropertyDisplayHint;
                        Assert.IsNotNull(cardNumberAmex, "cardNumberAmex is expected to be not null");
                        Assert.IsTrue(cardNumberAmex.DisplayHintType.Contains("secureproperty"));
                    }
                    else
                    {
                        var cardNumber = pidl.GetDisplayHintById("cardNumber") as SecurePropertyDisplayHint;
                        Assert.IsNotNull(cardNumber, "cardNumber is expected to be not null");
                        Assert.IsTrue(cardNumber.DisplayHintType.Contains("secureproperty"));
                    }

                    var cvv = pidl.GetDisplayHintById("cvv") as SecurePropertyDisplayHint;
                    Assert.IsNotNull(cvv, "cvv is expected to be not null");
                    Assert.IsTrue(cvv.DisplayHintType.Contains("secureproperty"));
                    Assert.IsNotNull(pidl.ClientSettings, "Client settings is expected not to be null when it is secure field");
                    Assert.IsTrue(pidl.ClientSettings.ContainsKey(PidlSdkWaitTimeForSecureFieldsInit), "PidlSdkWaitTimeForSecureFieldsInit is expected to be present in ClientSettings");
                    Assert.IsNotNull(accountToken.KeyPropertyResolutionMappings, "KeyPropertyResolutions is expected to be not null");
                    Assert.AreEqual(ccPidls.Count, accountToken.KeyPropertyResolutionMappings.Count, "KeyPropertyResolutions count is expected to be equal to Pidls count");
                }
                else
                {
                    if (pidl.Identity["type"].ToString() == "amex")
                    {
                        var cardNumberAmex = pidl.GetDisplayHintById("cardNumberAmex") as PropertyDisplayHint;
                        Assert.IsNotNull(cardNumberAmex);
                        Assert.IsFalse(cardNumberAmex.DisplayHintType.Contains("secureproperty"));
                    }
                    else
                    {
                        var cardNumber = pidl.GetDisplayHintById("cardNumber") as PropertyDisplayHint;
                        Assert.IsNotNull(cardNumber);
                        Assert.IsFalse(cardNumber.DisplayHintType.Contains("secureproperty"));
                    }

                    var cvv = pidl.GetDisplayHintById("cvv") as PropertyDisplayHint;
                    Assert.IsNotNull(cvv);
                    Assert.IsFalse(cvv.DisplayHintType.Contains("secureproperty"));

                    Assert.IsNull(accountToken.KeyPropertyResolutionMappings);
                }
            }
        }

        [DataRow("Account001", "us", GlobalConstants.Partners.DefaultTemplate, true)]
        [DataRow("Account001", "us", GlobalConstants.Partners.DefaultTemplate, false)]
        [DataRow("Account001", "us", "onepage", true)]
        [DataRow("Account001", "us", "onepage", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_UpdateCreditCard_EnableSecureField(string accountId, string country, string partner, bool enableSecureField)
        {
            if (enableSecureField)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableSecureFieldUpdateCreditCard");
            }

            List<PIDLResource> ccPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&family=credit_card&operation=update&scenario=includecvv",
                    accountId,
                    country,
                    partner));

            // Assert
            Assert.IsNotNull(ccPidls, "Pidl is expected to be not null");

            foreach (var pidl in ccPidls)
            {
                if (enableSecureField)
                {
                    var cvv = pidl.GetDisplayHintById("cvv") as SecurePropertyDisplayHint;
                    Assert.IsNotNull(cvv, "cvv is expected to be not null");
                    Assert.IsTrue(cvv.DisplayHintType.Contains("secureproperty"));
                }
                else
                {
                    var cvv = pidl.GetDisplayHintById("cvv") as PropertyDisplayHint;
                    Assert.IsNotNull(cvv);
                    Assert.IsFalse(cvv.DisplayHintType.Contains("secureproperty"));
                }
            }
        }

        [DataRow(GlobalConstants.Partners.NorthStarWeb, "us", false)]
        [DataRow(GlobalConstants.Partners.NorthStarWeb, "us", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SearchTransaction_EnableSecureField(string partner, string country, bool enableSecureField)
        {
            // Arrange
            string accountId = "Account001";
            var url = $"/v7.0/{accountId}/paymentMethodDescriptions?family=credit_card&partner={partner}&operation=searchTransactions&country={country}&language=en-Us";

            if (enableSecureField)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableSecureFieldSearchTransaction");
            }

            // Act
            var pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                if (enableSecureField)
                {
                    var cvv = pidl.GetDisplayHintById("paymentInstrumentSearchTransactionsCvv") as SecurePropertyDisplayHint;
                    Assert.IsNotNull(cvv, "cvv is expected to be not null");
                    Assert.IsTrue(cvv.DisplayHintType.Contains("secureproperty"));
                }
                else
                {
                    var cvv = pidl.GetDisplayHintById("paymentInstrumentSearchTransactionsCvv") as PropertyDisplayHint;
                    Assert.IsNotNull(cvv);
                    Assert.IsFalse(cvv.DisplayHintType.Contains("secureproperty"));
                }
            }
        }

        /// <summary>
        /// This test is to check the change of the display of the ‘Save’ Button to ‘Next’ in the Credit Card Flow for OnePage using the partner settings service.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="expectedTextOnButton"></param>
        /// <param name="enableSetSaveButtonDisplayContentAsNextFeature"></param>
        /// <param name="featureStatus"></param>
        /// <returns></returns>
        [DataRow(GlobalConstants.Partners.OfficeSMB, "Next", true, "true")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "Save", true, "false")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "Save", false, "false")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SetSaveButtonDisplayContentAsNext_UsingPartnerSettingsService(string partner, string expectedTextOnButton, bool enableSetSaveButtonDisplayContentAsNextFeature, string featureStatus)
        {
            // Arrange
            string url = $"/v7.0/account01/paymentMethodDescriptions?country=us&language=en-US&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb&partner={partner}";

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (enableSetSaveButtonDisplayContentAsNextFeature)
            {
                string partnerSettingResponse = "{\"add\":{\"template\":\"onepage\",\"features\":{\"customizeDisplayContent\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"setSaveButtonDisplayContentAsNext\":" + featureStatus + "}]}}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (PIDLResource pidl in pidls)
            {
                DisplayHint saveButtonDisplayHint = pidl.GetDisplayHintById(GlobalConstants.DisplayHints.SaveButton) as ButtonDisplayHint;
                Assert.IsNotNull(saveButtonDisplayHint, "Display hint, saveButton should not be null");
                Assert.AreEqual(expectedTextOnButton, saveButtonDisplayHint.DisplayText());
                Assert.AreEqual(expectedTextOnButton, saveButtonDisplayHint.DisplayTags["accessibilityName"]);
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        /// <summary>
        /// Validates 'PrivacyStatementHyperLinkDisplayHint' customization under specific conditions.
        /// Tests the change of display type for privacy statement from hyperlink to button.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="selectType">DisplayHintType</param>
        /// <param name="enableSetPrivacyStatementHyperLinkDisplayToButton">Enable hyperlink to button customization</param>
        /// <param name="featureStatus">Feature status for customization</param>
        [DataRow(GlobalConstants.Partners.OfficeSMB, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "us", "button", true, "true")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "us", "hyperlink", true, "false")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", "us", "hyperlink", false, "false")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "direct_debit", "ach", "us", "button", true, "true")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "direct_debit", "ach", "us", "hyperlink", true, "false")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "direct_debit", "ach", "us", "hyperlink", false, "false")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "direct_debit", "sepa", "nl", "button", true, "true")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "direct_debit", "sepa", "nl", "hyperlink", true, "false")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "direct_debit", "sepa", "nl", "hyperlink", false, "false")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "ewallet", "paypal", "us", "button", true, "true")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "ewallet", "paypal", "us", "hyperlink", true, "false")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "ewallet", "paypal", "us", "hyperlink", false, "false")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SetPrivacyStatementHyperLinkDisplayToButtonFeature_UsingPartnerSettingsService(string partner, string family, string type, string country, string selectType, bool enableSetPrivacyStatementHyperLinkDisplayToButton, string featureStatus)
        {
            // Arrange
            string url = $"/v7.0/account01/paymentMethodDescriptions?country={country}&language=en-US&operation=add&family={family}&type={type}&partner={partner}";

            // Array of template partners for potential future additions
            string[] templatePartners = new string[]
            {
                GlobalConstants.TemplatePartners.OnePage,
                GlobalConstants.TemplatePartners.TwoPage,
                GlobalConstants.TemplatePartners.DefaultTemplate,
            };

            var headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };

            foreach (string templatePartner in templatePartners)
            {
                if (enableSetPrivacyStatementHyperLinkDisplayToButton)
                {
                    string partnerSettingResponse = "{\"add\":{\"template\":\"" + templatePartner + "\",\"features\":{\"changeDisplayHintToText\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"setPrivacyStatementHyperLinkDisplayToButton\":" + featureStatus + "}]}}}}";
                    PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                }

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

                // Assert
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                foreach (PIDLResource pidl in pidls)
                {
                    DisplayHint paymentMethod = pidl.GetDisplayHintById(GlobalConstants.DisplayHints.PrivacyStatementHyperLinkDisplayText);
                    Assert.AreEqual(paymentMethod.DisplayHintType, selectType);
                }
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        /// <summary>
        /// This test is to check the change of the display of the ‘Back’ Button to ‘Cancel’ in the Credit Card Flow for OnePage, TwoPage, and DefaultTemplate using the partner settings service.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="expectedTextOnButton"></param>
        /// <param name="enableSetBackButtonDisplayContentAsCancelFeature"></param>
        /// <param name="featureStatus"></param>
        /// <returns></returns>
        [DataRow(GlobalConstants.Partners.OfficeSMB, "Cancel", true, "true")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "Back", true, "false")]
        [DataRow(GlobalConstants.Partners.OfficeSMB, "Back", false, "false")]
        [DataTestMethod]
        public async Task GetPaymentMethod_SetBackButtonDisplayContentAsCancelFeature_UsingPartnerSettingsService(string partner, string expectedTextOnButton, bool enableSetBackButtonDisplayContentAsCancelFeature, string featureStatus)
        {
            // Arrange
            string url = $"/v7.0/account01/paymentMethodDescriptions?country=us&language=en-US&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb&partner={partner}";

            string[] templatePartners = new string[]
            {
                GlobalConstants.TemplatePartners.OnePage,
                GlobalConstants.TemplatePartners.TwoPage,
                GlobalConstants.TemplatePartners.DefaultTemplate,
            };

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            foreach (string templatePartner in templatePartners)
            {
                if (enableSetBackButtonDisplayContentAsCancelFeature)
                {
                    string partnerSettingResponse = "{\"add\":{\"template\":\"" + templatePartner + "\",\"features\":{\"customizeDisplayContent\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"setBackButtonDisplayContentAsCancel\":" + featureStatus + "}]}}}}";
                    PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
                }

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

                // Assert
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                foreach (PIDLResource pidl in pidls)
                {
                    DisplayHint cancelBackButtonDisplayHint = pidl.GetDisplayHintById(GlobalConstants.DisplayHints.CancelBackButton) as ButtonDisplayHint;
                    Assert.IsNotNull(cancelBackButtonDisplayHint, "Display hint, " + GlobalConstants.DisplayHints.CancelBackButton + " should not be null");
                    Assert.AreEqual(expectedTextOnButton, cancelBackButtonDisplayHint.DisplayText());
                    Assert.AreEqual(expectedTextOnButton, cancelBackButtonDisplayHint.DisplayTags["accessibilityName"]);
                }
            }
        }

        [DataRow(Constants.PartnerNames.Amc, true)]
        [DataRow(Constants.PartnerNames.Amc, false)] // Disabling the LuhnFlight but it is still a partner of the Luhn list
        [DataRow(Constants.PartnerNames.AmcWeb, true)]
        [DataRow(Constants.PartnerNames.AmcXbox, true)]
        [DataRow(Constants.PartnerNames.Bing, false)]
        [DataRow(Constants.PartnerNames.Cart, true)]
        [DataRow(Constants.PartnerNames.CommercialStores, true)] // Making the partner to be LuhnPartner through flight which not really a LuhnPartner
        [DataRow(Constants.PartnerNames.CommercialStores, false)]
        [DataRow(Constants.PartnerNames.DefaultTemplate, false)]
        [DataRow(Constants.PartnerNames.OfficeOobe, true)]
        [DataRow(Constants.PartnerNames.OXOWebDirect, true)]
        [DataRow(Constants.PartnerNames.OXODIME, true)]
        [DataRow(Constants.PartnerNames.OXOOobe, true)]
        [DataRow(Constants.PartnerNames.Xbox, true)]
        [DataRow(Constants.PartnerNames.WebPay, true)]
        [DataRow(Constants.PartnerNames.WindowsStore, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_AddCreditCard_AnonymousPidlLuhnValidationEnabledPartner(string partner, bool enableLuhnFlight = false)
        {
            if (enableLuhnFlight)
            {
                PXFlightHandler.AddToEnabledFlights("PXLuhnValidationEnabledPartners");
            }

            // Arrange
            var ccPidls = await GetPidlFromPXService(
                $"/v7.0/paymentMethodDescriptions?type=visa&partner={partner}&operation=add&country=us&language=en-US&family=credit_card&sessionId=null");

            // Assert
            Assert.IsNotNull(ccPidls, "Pidl is expected to be not null");
            foreach (PIDLResource resource in ccPidls)
            {
                PropertyDescription accountToken = resource.GetPropertyDescriptionByPropertyName(Constants.CreditCardPropertyDescriptionName.AccountToken);
                bool isLuhnValidationFound = false;
                foreach (var val in accountToken.Validations)
                {
                    if (val.ValidationType == "function" && val.ValidationFunction == "luhn")
                    {
                        isLuhnValidationFound = true;
                    }
                }

                Assert.AreEqual(enableLuhnFlight || Constants.LuhnValidationEnabledPartners.Contains(partner, StringComparer.OrdinalIgnoreCase), isLuhnValidationFound);
            }
        }

        [DataRow("credit_card", GlobalConstants.Partners.BingTravelAnonymous, "add", "paymentOptionSaveText", true)]
        [DataRow("credit_card", GlobalConstants.Partners.BingTravelAnonymous, "add", "paymentOptionSaveText")]
        [DataRow("credit_card", GlobalConstants.Partners.OfficeSMB, "add", "paymentOptionSaveText")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_AnonymousPidlAdd(string family, string partner, string operation, string displayHindIdToCheckHidden, bool disableInvalidPaymentInstrumentTypeFlight = false)
        {
            // Arrange
            Dictionary<string, string> headers = new Dictionary<string, string>();

            string partnerSettingResponse = string.Empty;
            if (string.Equals(partner, GlobalConstants.Partners.BingTravelAnonymous))
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"onepage\",\"features\":{\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hidepaymentOptionSaveText\":true}]},\"customizeDisplayContent\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"setSaveButtonDisplayContentAsBook\":true}]},\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeCancelButton\":true}]}}}}";
            }
            else if (string.Equals(partner, GlobalConstants.Partners.OfficeSMB))
            {
                partnerSettingResponse = "{\"add\":{\"template\":\"defaultTemplate\",\"features\":{\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hidepaymentOptionSaveText\":true}]},\"customizeDisplayContent\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"setSaveButtonDisplayContentAsBook\":true}]},\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeCancelButton\":true}]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            headers.Add("x-ms-flight", "PXUsePartnerSettingsService,PXDisablePSSCache");

            if (disableInvalidPaymentInstrumentTypeFlight)
            {
                PXFlightHandler.AddToEnabledFlights("PXDisableInvalidPaymentInstrumentType");
            }

            PXSettings.PartnerSettingsService.PreProcess = (partnerSettingsRequest) =>
            {
                Uri requestUri = partnerSettingsRequest.RequestUri;
                Assert.IsTrue(requestUri.PathAndQuery.Contains("/partnersettings/"));
                Assert.IsTrue(requestUri.Query.Contains("settingsType=PaymentExperience"));
                Assert.IsNull(partnerSettingsRequest.Content);
            };

            PXSettings.PartnerSettingsService.PostProcess = async (partnerSettingsResponse) =>
            {
                if (partnerSettingsResponse != null)
                {
                    Assert.AreEqual(partnerSettingsResponse.StatusCode, HttpStatusCode.OK);
                    Assert.IsNotNull(partnerSettingsResponse.Content);
                    string responseContent = await partnerSettingsResponse.Content.ReadAsStringAsync();
                    Assert.AreEqual(responseContent, partnerSettingResponse);
                }
            };

            var ccPidls = await GetPidlFromPXService(
                $"/v7.0/paymentMethodDescriptions?partner={partner}&operation={operation}&country=us&language=en-US&family={family}&allowedPaymentMethods=%5B%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22credit_card.visa%22%5D",
                additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(ccPidls, "Pidl is expected to be not null");
            foreach (var pidl in ccPidls)
            {
                PropertyDisplayHint cancelButton = pidl.GetDisplayHintById("cancelBackButton") as PropertyDisplayHint;
                Assert.IsFalse(cancelButton != null);

                ButtonDisplayHint saveButton = pidl.GetDisplayHintById("saveButton") as ButtonDisplayHint;
                Assert.IsTrue(saveButton.DisplayContent == "Book");

                DisplayHint paymentOptionSaveText = pidl.GetDisplayHintById(displayHindIdToCheckHidden);
                Assert.IsTrue(paymentOptionSaveText.IsHidden);
                CheckServerErrorCode(pidl.PidlResourceStrings.ServerErrorCodes, Constants.PropertyErrorConstants.InvalidPaymentInstrumentType, disableInvalidPaymentInstrumentTypeFlight);
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("credit_card", GlobalConstants.Partners.XboxSettings, "add")]
        [DataRow("credit_card", GlobalConstants.Partners.XboxSettings, "add", false)]
        [DataRow("credit_card", GlobalConstants.Partners.Storify, "add")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_AnonymousPidl_AddCCSecondScreen(string family, string partner, string operation, bool disableInvalidPaymentInstrumentTypeFlight = false)
        {
            // Arrange
            string paymentSessionId = "ZFFFFFFFFFFF78a93cbb-8a57-49d9-84b7-42c5f042dba6";
            string url = $"/v7.0/paymentMethodDescriptions?partner={partner}&operation={operation}&country=us&language=en-US&family={family}&scenario=secondScreenAddPi&allowedPaymentMethods=%5B%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22credit_card.visa%22%5D&sessionId={paymentSessionId}";
            string currentTime = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");

            Dictionary<string, string> headers = new Dictionary<string, string>();

            headers.Add("x-ms-flight", "PxEnableAddCcQrCode");

            if (disableInvalidPaymentInstrumentTypeFlight)
            {
                PXFlightHandler.AddToEnabledFlights("PXDisableInvalidPaymentInstrumentType");
            }

            // second screen QR code experience, should not have already made a piid
            string sessionResponse = "{\"Id\":\"" + paymentSessionId + "\",\"SessionType\":0,\"Data\":\"{\\\"ExposedFlightFeatures\\\":null,\\\"AccountId\\\":\\\"Account001\\\",\\\"Language\\\":\\\"en-us\\\",\\\"payment_session_id\\\":\\\"e99fd8de-8db4-4d7f-9ad0-1857b25503d4\\\",\\\"Partner\\\":\\\"xboxsettings\\\",\\\"Country\\\":\\\"US\\\",\\\"UseCount\\\":0,\\\"Operation\\\":\\\"Add\\\",\\\"Email\\\":null,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"PaymentMethodType\\\":null,\\\"PaymentInstrumentId\\\":null,\\\"Status\\\":3,\\\"ChallengeStatus\\\":\\\"Unknown\\\",\\\"RiskData\\\":{\\\"ipAddress\\\":null,\\\"userInfo\\\":null,\\\"deviceId\\\":null,\\\"userAgent\\\":null,\\\"greenId\\\":null,\\\"deviceType\\\":null},\\\"signature\\\":\\\"placeholder_for_paymentsession_signature_e99fd8de-8db4-4d7f-9ad0-1857b25503d4\\\",\\\"QrCodeCreatedTime\\\":\\\"" + currentTime + "\\\",\\\"FormRenderedTime\\\":\\\"" + currentTime + "\\\"}\",\"EncryptData\":false,\"Result\":null,\"State\":\"INCOMPLETE\",\"TestContext\":null}";

            PXSettings.SessionService.ResponseProvider.SessionStore.Add(paymentSessionId, sessionResponse);

            var ccPidls = await GetPidlFromPXService(
                url,
                additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(ccPidls, "Pidl is expected to be not null");
            foreach (PIDLResource pidl in ccPidls)
            {
                TextDisplayHint consentCheckbox = pidl.GetDisplayHintById("consentMessage") as TextDisplayHint;
                Assert.IsNotNull(consentCheckbox);
                Assert.AreEqual(consentCheckbox.DisplayHintType, "text");
                ButtonDisplayHint saveButton = pidl.GetDisplayHintById("anonymousSaveButton") as ButtonDisplayHint;
                Assert.IsNotNull(saveButton);
                Assert.IsNotNull(saveButton.Action.Context);

                DisplayHintAction saveButtonAction = saveButton.Action as DisplayHintAction;
                Assert.IsNotNull(saveButtonAction.Context);
                Microsoft.Commerce.Payments.PXCommon.PollActionContext context = JsonConvert.DeserializeObject<Microsoft.Commerce.Payments.PXCommon.PollActionContext>(saveButtonAction.Context.ToString());

                string[] parts = context.Href.Split('&');
                Assert.IsTrue(context.Href.Contains("sessionId="));
                CheckServerErrorCode(pidl.PidlResourceStrings.ServerErrorCodes, Constants.PropertyErrorConstants.InvalidPaymentInstrumentType, disableInvalidPaymentInstrumentTypeFlight);
            }

            PXSettings.SessionService.ResponseProvider.SessionStore.Clear();
            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("bingtravel")]
        [DataRow("pssBasedPartner")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ListPI_AddCustomDetails(string partner)
        {
            // Arrange
            Dictionary<string, string> headers = new Dictionary<string, string>();

            string partnerSettingResponse = "{\"selectinstance\": {\"template\": \"listpibuttonlist\",\"features\": {\"addDisplayCustomDetailsToButtonListOption\": {\"applicableMarkets\": []}}}}";

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);
            headers.Add("x-ms-flight", "PXUsePartnerSettingsService,PXDisablePSSCache");

            PXSettings.PartnerSettingsService.PreProcess = (partnerSettingsRequest) =>
            {
                Uri requestUri = partnerSettingsRequest.RequestUri;
                Assert.IsTrue(requestUri.PathAndQuery.Contains("/partnersettings/"));
                Assert.IsTrue(requestUri.Query.Contains("settingsType=PaymentExperience"));
                Assert.IsNull(partnerSettingsRequest.Content);
            };

            PXSettings.PartnerSettingsService.PostProcess = async (partnerSettingsResponse) =>
            {
                if (partnerSettingsResponse != null)
                {
                    Assert.AreEqual(partnerSettingsResponse.StatusCode, HttpStatusCode.OK);
                    Assert.IsNotNull(partnerSettingsResponse.Content);
                    string responseContent = await partnerSettingsResponse.Content.ReadAsStringAsync();
                    Assert.AreEqual(responseContent, partnerSettingResponse);
                }
            };

            var listPiPidl = await GetPidlFromPXService(
                $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=SelectInstance&country=us&language=en-US&currency=USD",
                additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(listPiPidl, "Pidl is expected to be not null");

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        [DataRow("cart", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", HttpStatusCode.OK)]
        [DataRow("test", "credit_card", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", HttpStatusCode.OK)]
        [DataTestMethod]
        public async Task Test_GetPaymentMethodDescriptions_CreditCard_GuestAccount(string partner, string family, string type, HttpStatusCode expectedStatusCode)
        {
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family={family}&type={type}&completePrerequisites=true";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-customer", CustomerHeaderTests.CustomerHeaderTestToken
                }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, expectedStatusCode, additionaHeaders: headers);

            // Assert
            if (expectedStatusCode == HttpStatusCode.OK)
            {
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            }
        }

        /// <summary>
        /// Incase of 1PP guest checkout, the save button text should be "Next" instead of "Save"
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="sendCustomerHeader"></param>
        /// <param name="saveButtonText"></param>
        /// <returns></returns>
        [DataRow("cart", false, "Save")]
        [DataRow("cart", true, "Next")]
        [DataTestMethod]
        public async Task Test_GetPaymentMethodDescriptions_CreditCard_SaveButtonText(string partner, bool sendCustomerHeader, string saveButtonText)
        {
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb&completePrerequisites=true";
            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-customer", sendCustomerHeader ? CustomerHeaderTests.CustomerHeaderTestToken : string.Empty
                }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                var displayHint = pidl.GetDisplayHintById("saveButton");
                Assert.AreEqual(saveButtonText, displayHint.DisplayText());
            }
        }

        /// <summary>
        /// Asserts skipSelectpm feature on and off scenarios if on, then skips the selectpm page if only Credit Card is available
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="country"></param>
        /// <param name="enableFeature"></param>
        /// <param name="isSkipSelectPMExpected"></param>
        /// <returns></returns>
        [DataRow("officesmb", "br", true, true, null, false)]
        [DataRow("officesmb", "br", false, false, null, false)]
        [DataRow("officesmb", "us", true, true, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false)]
        [DataRow("officesmb", "us", true, false, null, false)]
        [DataRow("officesmb", "us", false, false, null, false)]
        [DataRow("officesmb", "us", false, false, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false)]
        [DataRow("officesmb", "in", true, true, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false)]
        [DataRow("officesmb", "in", true, false, null, false)]
        [DataRow("officesmb", "in", false, false, null, false)]
        [DataRow("officesmb", "gb", true, false, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false)]
        [DataRow("officesmb", "fr", true, false, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false)]

        // Testing for partners which are not using PSS feature but enabled SkipSelectPMIfOnlyCC via existing code
        // commercialstores is enabled for any country
        [DataRow("commercialstores", "fr", false, true, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false)]
        [DataRow("commercialstores", "us", false, true, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false)]

        // Testing for partners which are not using PSS feature but enabled SkipSelectPMIfOnlyCC via flighting
        [DataRow("azure", "fr", false, true, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", true)]
        [DataRow("azure", "us", false, true, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", true)]
        [DataRow("azure", "us", false, false, null, true)]
        [DataRow("azure", "fr", false, false, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false)]
        [DataRow("azure", "us", false, false, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false)]
        [DataRow("azure", "us", false, false, null, false)]

        // Below partner are only enabled for br country
        [DataRow("cart", "br", false, true, null, false)]
        [DataRow("cart", "us", false, false, null, false)]
        [DataRow("webblends", "br", false, true, null, false)]
        [DataRow("oxodime", "br", false, true, null, false)]
        [DataRow("oxowebdirect", "br", false, true, null, false)]
        [TestMethod]
        public async Task GetPaymentMethod_Select_PM_PSS_SkipSelectPMIfOnlyCC(string partner, string country, bool enableFeature, bool isSkipSelectPMExpected, string allowedPaymentMethods, bool enablePXEnableSkipGetPMIfCreditCardIsTheOnlyOption)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-us&partner={partner}&operation=select";
            string expectedPSSResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideFirstAndLastNameForCompletePrerequisites\":true}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{}},\"validateinstance\":{\"template\":\"defaultTemplate\"}}";
            List<bool> isSkipSelectPMExpectedWithSlectPMRadioButtonListStatuses = new List<bool> { true, false };
            string featurePartnerProperty = null;

            if (!string.IsNullOrEmpty(allowedPaymentMethods))
            {
                url += $"&allowedPaymentMethods={allowedPaymentMethods}";
            }

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (enablePXEnableSkipGetPMIfCreditCardIsTheOnlyOption)
            {
                headers["x-ms-flight"] = "PXDisablePSSCache,PXEnableSkipGetPMIfCreditCardIsTheOnlyOption";
            }

            foreach (bool isSkipSelectPMExpectedWithSlectPMRadioButtonListStatus in isSkipSelectPMExpectedWithSlectPMRadioButtonListStatuses)
            {
                if (enableFeature)
                {
                    // Check the feature status to change the template partner based on the feature.
                    // The feature compatibility of skipSelectpm is now checked with both partner selectpmradiobuttonlist and selectpmbuttonlist.
                    featurePartnerProperty = isSkipSelectPMExpectedWithSlectPMRadioButtonListStatus ? "\"selectpmradiobuttonlist\"" : "\"selectpmbuttonlist\"";

                    // feature is enabled for countries br, us, in
                    expectedPSSResponse = "{\"add\":{\"template\":\"OnePage\",\"features\":{\"addressValidation\":{\"applicableMarkets\":[\"us\",\"ca\"]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideFirstAndLastNameForCompletePrerequisites\":true}]},\"singleMarketDirective\":{\"applicableMarkets\":[\"fr\",\"gb\"]}}},\"select\":{\"template\":" + featurePartnerProperty + ",\"features\":{\"skipSelectpm\":{\"applicableMarkets\":[\"br\",\"us\",\"in\"]}}},\"validateinstance\":{\"template\":\"defaultTemplate\"}}";
                }

                PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, additionaHeaders: headers);

                // Assert
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                if (isSkipSelectPMExpected)
                {
                    Assert.IsNotNull(pidls[0].ClientAction);
                    Assert.AreEqual(ClientActionType.ReturnContext, pidls[0].ClientAction.ActionType);
                    ActionContext context = JsonConvert.DeserializeObject<ActionContext>(JsonConvert.SerializeObject(pidls[0].ClientAction.Context));
                    Assert.AreEqual("credit_card", context.PaymentMethodFamily);
                    Assert.AreEqual("addResource", context.ResourceActionContext.Action);
                    Assert.AreEqual("paymentInstrument", context.ResourceActionContext.PidlDocInfo.ResourceType);
                    Assert.AreEqual(partner, context.ResourceActionContext.PidlDocInfo.Parameters["partner"]);
                }
                else
                {
                    Assert.IsTrue(pidls[0].DisplayPages.Count >= 1);
                    Assert.IsTrue(string.Equals("paymentMethodSelectPMGroupingPage", pidls[0].DisplayPages.First().DisplayName) || string.Equals("PaymentMethodSelectionPage", pidls[0].DisplayPages.First().DisplayName));
                }
            }
        }

        [DataRow("officesmb", "us", true, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", true, false)]
        [DataRow("officesmb", "us", false, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false, false)]
        [DataRow("commercialstores", "us", true, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false, true)]
        [DataRow("commercialstores", "us", false, "%5B%22credit_card.visa%22%2C%22credit_card.amex%22%2C%22ewallet.stored_value%22%2C%22credit_card.mc%22%5D", false, false)]
        [TestMethod]
        public async Task GetPaymentMethod_Select_PM_PSS_SkipSelectPMIfOnlyCC_EnableIsSelectPMskippedValue(string partner, string country, bool isSkipSelectPMValueEnabled, string allowedPaymentMethods, bool enablePXIsSkipGetPMValueAsPSSFeature, bool enablePXIsSkipGetPMValueAsFlight)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-us&partner={partner}&operation=select";
            string expectedPSSResponse = "{\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"skipSelectpm\":{\"applicableMarkets\":[]}}}}";
            if (!string.IsNullOrEmpty(allowedPaymentMethods))
            {
                url += $"&allowedPaymentMethods={allowedPaymentMethods}";
            }

            var headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-flight", "PXDisablePSSCache"
                }
            };

            if (enablePXIsSkipGetPMValueAsFlight)
            {
                headers["x-ms-flight"] = "PXDisablePSSCache,PXEnableIsSelectPMSkippedValue";
            }

            if (enablePXIsSkipGetPMValueAsPSSFeature)
            {
                expectedPSSResponse = "{\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"skipSelectpm\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"enableIsSelectPMskippedValue\":true}]}}}}";
            }

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            ActionContext context = JsonConvert.DeserializeObject<ActionContext>(JsonConvert.SerializeObject(pidls[0].ClientAction.Context));

            if (isSkipSelectPMValueEnabled)
            {
                Assert.AreEqual(true, context.IsSelectPMSkipped);
            }
            else
            {
                Assert.IsNull(context.IsSelectPMSkipped);
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        /// <summary>
        /// Test is to validate AddPMButtonWithPlusIcon feature using PSS
        /// </summary>
        /// <param name="country"></param>
        [DataRow("us")]
        [DataRow("in")]
        [DataRow("fr")]
        [DataRow("de")]
        [DataRow("nl")]
        [DataTestMethod]
        public async Task GetPaymentMethod_ValidateAddPMButtonWithPlusIcon_UsingPartnerSettings(string country)
        {
            // Arrange
            List<bool> addPMButtonWithPlusIconFeatureStatuses = new List<bool> { true, false };
            Dictionary<string, string> headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&partner=officesmb&operation=selectInstance";

            foreach (bool addPMButtonWithPlusIconFeatureStatus in addPMButtonWithPlusIconFeatureStatuses)
            {
                string featureProperty = addPMButtonWithPlusIconFeatureStatus ? "\"addPMButtonWithPlusIcon\":{\"applicableMarkets\":[]}" : null;
                string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{" + featureProperty + "}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

                // Assert
                Assert.IsNotNull(pidls, "PIDL is expected to be not null");

                PropertyDisplayHint paymentInstrument = pidls[0].GetDisplayHintById(Constants.DisplayHintIds.PaymentInstrument) as PropertyDisplayHint;
                Assert.IsNotNull(paymentInstrument, "PaymentInstrument is expected to be not null");
                Assert.AreEqual(paymentInstrument.PossibleOptions.Count, paymentInstrument.PossibleValues.Count);

                SelectOptionDescription possibleOptions = paymentInstrument.PossibleOptions[Constants.DisplayHintIds.NewPaymentMethodLink];

                if (addPMButtonWithPlusIconFeatureStatus)
                {
                    Assert.AreEqual(paymentInstrument.PossibleValues[Constants.DisplayHintIds.NewPaymentMethodLink], Constants.DisplayHintIds.NewPaymentMethodLink);
                    Assert.IsNotNull(possibleOptions.DisplayContent, "DisplayContent is expected to be not null");

                    DisplayHint newPaymentMethodLinkContainer = possibleOptions.DisplayContent.Members[0];
                    Assert.IsNotNull(newPaymentMethodLinkContainer.Action, "PIDLAction is expected to be not null");
                    Assert.AreEqual(newPaymentMethodLinkContainer.HintId, Constants.DisplayHintIds.NewPaymentMethodLink);
                }
                else
                {
                    Assert.AreEqual(paymentInstrument.PossibleValues[Constants.DisplayHintIds.NewPaymentMethodLink], "Add a new payment method");
                    Assert.IsNull(possibleOptions.DisplayContent, "DisplayContent is expected to be null");
                }

                PXSettings.PartnerSettingsService.Responses.Clear();
            }
        }

        /// <summary>
        /// Test is to validate removeSelectPiNewPaymentMethodLink feature using PSS
        /// </summary>
        /// <param name="country"></param>
        [DataRow("us", "%5B%22ewallet.dummypm%22%5D")]
        [DataRow("in", "%5B%22ewallet.dummypm%22%5D")]
        [DataRow("fr", "%5B%22ewallet.dummypm%22%5D")]
        [DataRow("de", "%5B%22ewallet.dummypm%22%5D")]
        [DataRow("nl", "%5B%22ewallet.dummypm%22%5D")]
        [DataRow("us", "")]
        [DataRow("in", "")]
        [DataRow("fr", "")]
        [DataRow("de", "")]
        [DataRow("nl", "")]
        [DataTestMethod]
        public async Task GetPaymentMethod_ValidateRemoveSelectPiNewPaymentMethodLink_UsingPartnerSettings(string country, string allowedPaymentMethods)
        {
            // Arrange
            List<bool> removeSelectPiNewPaymentMethodLink = new List<bool> { true, false };
            Dictionary<string, string> headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&partner=officesmb&operation=selectInstance&allowedPaymentMethods={allowedPaymentMethods}";

            foreach (bool removeSelectPiNewPaymentMethodLinkStatus in removeSelectPiNewPaymentMethodLink)
            {
                string featureProperty = removeSelectPiNewPaymentMethodLinkStatus ?
                    "\"addPMButtonWithPlusIcon\":{\"applicableMarkets\":[]},\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeSelectPiNewPaymentMethodLink\":true}]}" :
                    "\"addPMButtonWithPlusIcon\":{\"applicableMarkets\":[]}";
                string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{" + featureProperty + "}}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

                // Assert
                Assert.IsNotNull(pidls, "PIDL is expected to be not null");

                PropertyDisplayHint paymentInstrument = pidls[0].GetDisplayHintById(Constants.DisplayHintIds.PaymentInstrument) as PropertyDisplayHint;

                if (string.IsNullOrEmpty(allowedPaymentMethods))
                {
                    // When allowedPaymentMethods is null or empty, PI won't be filtered so the dropdown contianing the PI list will be shown, and the "Add new payment method" button will be added at end of the PI list
                    // "Add new payment method" button inside the dropdown should be removed when removeSelectPiNewPaymentMethodLink is true
                    Assert.IsNotNull(paymentInstrument, "PaymentInstrument is expected to be not null");
                    Assert.AreEqual(!paymentInstrument.PossibleOptions.ContainsKey(Constants.DisplayHintIds.NewPaymentMethodLink), removeSelectPiNewPaymentMethodLinkStatus, "when removeSelectPiNewPaymentMethodLink is enabled, NewPaymentMethodLink should be removed");
                }
                else
                {
                    // When allowedPaymentMethods contains a fake payment method family, no PI will be available to shown in the dropdown, and the "Add new payment method" button will be shown without the dropdown as a stanalone button
                    // "Add new payment method" button should also be removed when removeSelectPiNewPaymentMethodLink is true
                    Assert.IsNull(paymentInstrument, "PaymentInstrument is expected to be not null");
                    ButtonDisplayHint newPaymentMethodLink = pidls[0].GetDisplayHintById(Constants.DisplayHintIds.NewPaymentMethodLink) as ButtonDisplayHint;
                    Assert.AreEqual(newPaymentMethodLink == null, removeSelectPiNewPaymentMethodLinkStatus, "when there is no pi available, the newPaymentMethodLink will be shown as a button, which should also be removed when removeSelectPiNewPaymentMethodLink is enabled.");
                }

                PXSettings.PartnerSettingsService.Responses.Clear();
            }
        }

        [DataRow("cart", "us", true)]
        [DataRow("cart", "us", false)]
        [DataRow("webblends", "br", true)]
        [DataRow("webblends", "br", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_PXEnablePIMSGetPaymentMethodsCache_FlightWorksAsExpected_AddOperation(string partner, string country, bool useFlight)
        {
            string operation = "add";
            string accountId = "Account001";
            string family = "credit_card";

            List<string> flights = new List<string>();

            if (useFlight)
            {
                flights.Add("PXEnablePIMSGetPaymentMethodsCache");
                flights.Add("VNextToPIMS");
            }

            List<PIDLResource> pidls = new List<PIDLResource>();

            try
            {
                for (int i = 0; i < 2; i++)
                {
                    bool isGetPaymentMethodsCalled = false;
                    PXSettings.PimsService.PreProcess = (request) =>
                    {
                        if (request.RequestUri.AbsoluteUri.Contains("/paymentMethods"))
                        {
                            isGetPaymentMethodsCalled = true;
                        }
                    };

                    pidls = await GetPidlFromPXServiceWithFlight(
                        string.Format(
                            "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language=en-us&family={3}&country={4}",
                            accountId,
                            partner,
                            operation,
                            family,
                            country),
                            flights);

                    Assert.IsNotNull(pidls, "PIDLs are expected not to be null");

                    // If flight enabled when second time call going to PIMS accessor get payment method should not be called.
                    Assert.AreEqual(isGetPaymentMethodsCalled, (useFlight && i == 1) ? false : true);
                }
            }
            catch
            {
                Assert.IsTrue(false, string.Format("Failure was detected but not as expected"));
            }

            PXSettings.PartnerSettingsService.ResetToDefaults();
        }

        /// <summary>
        /// Test is to validate the exception bypass handling policy to override the internal server error of PX and return the PIMS error.
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="bypassExpection"></param>
        /// <returns></returns>
        [DataRow("commercialstores", true)]
        [DataRow("commercialstores", false)]
        [DataRow("northstarweb", true)]
        [DataRow("northstarweb", false)]
        [DataRow("azure", true)]
        [DataRow("azure", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_ValidateExceptionBypassOfUnsupportedCountries(string partner, bool bypassExpection)
        {
            // Arrange
            string errorCode = ErrorCodes.InternalError.ToString();
            string errorMessage = ErrorMessages.InternalServerError.ToString();
            HttpStatusCode statusCode = HttpStatusCode.InternalServerError;
            List<string> countries = new List<string>() { "ir", "cu", "sd", "kp", "yu", "xj", "xs", "xja", "xsa", "es-cl", "xse", "tp", "xe" };

            if (bypassExpection)
            {
                statusCode = HttpStatusCode.BadRequest;
                errorCode = ErrorCodes.InvalidRequestData.ToString();
                errorMessage = ErrorMessages.CountryNotSupported.ToString();
            }

            string pimsResponse = "{\"CorrelationId\":\"85783bd8-fe4b-4379-8064-79cdd300e1d5\",\"ErrorCode\":\"" + errorCode + "\",\"Message\":\"" + errorMessage + "\",\"Target\":\"country\"}";
            PXSettings.PimsService.ArrangeResponse(pimsResponse, statusCode);

            foreach (string country in countries)
            {
                string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&country={country}&language=en-US&operation=add&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb";

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService(url, statusCode);

                // Assert
                Assert.IsNotNull(pidls, "Pidl is expected to be not null");
                Assert.AreEqual(pidls.Count, 0);
            }

            PXSettings.PimsService.ResetToDefaults();
        }

        [DataRow("defaulttemplate", "in", "en-us", true, true, "rupay")]
        [DataRow("defaulttemplate", "us", "en-us", true, false, "rupay")]
        [DataRow("defaulttemplate", "in", "en-us", false, false, "rupay")]
        [DataRow("defaulttemplate", "us", "en-us", false, false, "rupay")]
        [DataRow("defaulttemplate", "in", "en-us", true, true, "rupay", true)]
        [DataRow("defaulttemplate", "us", "en-us", true, false, "rupay", true)]
        [DataRow("defaulttemplate", "in", "en-us", false, false, "rupay", true)]
        [DataRow("defaulttemplate", "us", "en-us", false, false, "rupay", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Rupay_Add_VerifyFields(string partner, string country, string language, bool flightPassed, bool shouldRenderRupayPage, string type, bool disableInvalidPaymentInstrumentTypeFlight = false)
        {
            string url = $"/v7.0/Account004/paymentMethodDescriptions?partner={partner}&operation=add&family=credit_card&type={type}&country={country}&language=en-US";

            List<string> exposedFlightFeatures = new List<string>();

            if (flightPassed)
            {
                exposedFlightFeatures.Add("PXEnableRupayForIN");
                exposedFlightFeatures.Add("IndiaRupayEnable");
                exposedFlightFeatures.Add("vnext");
            }

            if (disableInvalidPaymentInstrumentTypeFlight)
            {
                PXFlightHandler.AddToEnabledFlights("PXDisableInvalidPaymentInstrumentType");
            }

            if (shouldRenderRupayPage)
            {
                List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, exposedFlightFeatures);
                Assert.IsNotNull(pidls);

                foreach (PIDLResource pidl in pidls)
                {
                    var page = pidl.DisplayPages[0];
                    Assert.AreEqual(page.HintId, "creditCardRupayAddPage");
                    CheckServerErrorCode(pidl.PidlResourceStrings.ServerErrorCodes, Constants.PropertyErrorConstants.InvalidPaymentInstrumentType, disableInvalidPaymentInstrumentTypeFlight);
                }
            }
            else
            {
                try
                {
                    List<PIDLResource> pidls = await GetPidlFromPXServiceWithFlight(url, exposedFlightFeatures);
                    Assert.IsTrue(false, "Expected to throw exeption and it should not reach here.");
                }
                catch (Exception ex)
                {
                    Assert.AreNotEqual(ex.Message, string.Empty, string.Format("Failure was detected but is expected as Rupay Credit Card is not available for given country/flight combination"));
                }
            }
        }

        [DataRow(GlobalConstants.CountryCodes.Japan, GlobalConstants.Partners.Cart, "paypay", false, "PayPay")]
        [DataRow(GlobalConstants.CountryCodes.Japan, GlobalConstants.Partners.Cart, "paypay", true, "PayPay")]
        [DataRow(GlobalConstants.CountryCodes.HongKong, GlobalConstants.Partners.Cart, "alipayhk", false, "AlipayHK")]
        [DataRow(GlobalConstants.CountryCodes.HongKong, GlobalConstants.Partners.Cart, "alipayhk", true, "AlipayHK")]
        [DataRow(GlobalConstants.CountryCodes.Philippines, GlobalConstants.Partners.Cart, "gcash", false, "GCash")]
        [DataRow(GlobalConstants.CountryCodes.Philippines, GlobalConstants.Partners.Cart, "gcash", true, "GCash")]
        [DataRow(GlobalConstants.CountryCodes.Thailand, GlobalConstants.Partners.Cart, "truemoney", false, "TrueMoney")]
        [DataRow(GlobalConstants.CountryCodes.Thailand, GlobalConstants.Partners.Cart, "truemoney", true, "TrueMoney")]
        [DataRow(GlobalConstants.CountryCodes.Malaysia, GlobalConstants.Partners.Cart, "touchngo", false, "Touch 'n Go")]
        [DataRow(GlobalConstants.CountryCodes.Malaysia, GlobalConstants.Partners.Cart, "touchngo", true, "Touch 'n Go")]
        [DataRow(GlobalConstants.CountryCodes.Japan, GlobalConstants.Partners.NorthstarWeb, "paypay", true, "PayPay")]
        [DataRow(GlobalConstants.CountryCodes.HongKong, GlobalConstants.Partners.NorthstarWeb, "alipayhk", true, "AlipayHK")]
        [DataRow(GlobalConstants.CountryCodes.Philippines, GlobalConstants.Partners.NorthstarWeb, "gcash", true, "GCash")]
        [DataRow(GlobalConstants.CountryCodes.Thailand, GlobalConstants.Partners.NorthstarWeb, "truemoney", true, "TrueMoney")]
        [DataRow(GlobalConstants.CountryCodes.Malaysia, GlobalConstants.Partners.NorthstarWeb, "touchngo", true, "Touch 'n Go")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Select_ANTBatchPI_TypesAreAsExpected(string country, string partner, string type, bool enabledPSS, string expectedDisplayText)
        {
            var flights = "enablePaymentMethodGrouping,vnext" + ",PXEnable" + (expectedDisplayText.Equals("Touch 'n Go") ? "TouchNGo" : expectedDisplayText);
            string requestUrl = string.Format("/v7.0/Account002/paymentMethodDescriptions?country={0}&partner={1}&operation=select&allowedPaymentMethods=%5B%22credit_card%22%2C%22ewallet.{2}%22%5D", country, partner, type);

            if (enabledPSS)
            {
                flights += ",PXUsePartnerSettingsService";

                string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"redirectionPattern\":null,\"resources\":null,\"features\":null},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"default\":{\"template\":\"" + partner + "\",\"redirectionPattern\":null,\"resources\":null,\"features\":null}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);
            }

            Dictionary<string, string> headers = new Dictionary<string, string>
            {
                { "x-ms-flight", flights }
            };

            List<PIDLResource> pidls = await GetPidlFromPXService(requestUrl, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, "paymentMethodSelectPMGroupingPage");
            PropertyDisplayHint paymentMethod = pidls[0].DisplayPages[0].Members[1] as PropertyDisplayHint;
            Assert.AreEqual(expectedDisplayText, paymentMethod.PossibleOptions[$"ewallet_{type}"].DisplayText, "Payment method name expected");
        }

        [DataRow(GlobalConstants.Partners.Azure, false, false, "PaymentMethodSelectionPage", "dropDown")]
        [DataRow(GlobalConstants.Partners.Azure, true, true, "PaymentMethodSelectionPage", "radio")]
        [DataRow(GlobalConstants.Partners.CommercialStores, false, false, "PaymentMethodSelectionPage", "dropDown")]
        [DataRow(GlobalConstants.Partners.CommercialStores, true, false, "paymentMethodSelectPMGroupingPage", "buttonList")]
        [DataRow(GlobalConstants.Partners.MacManage, true, false, "paymentMethodSelectPMGroupingPage", "buttonList")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_Select_AlipayCN_TypesAreAsExpected(string partner, bool enabledPSS, bool selectPMRadioButton, string expectedDisplayName, string expectedSelectType)
        {
            var flights = "enablePaymentMethodGrouping,vnext,PXEnableAlipayCN";
            string requestUrl = string.Format("/v7.0/Account002/paymentMethodDescriptions?country=cn&partner={0}&operation=select&allowedPaymentMethods=%5B%22credit_card%22%2C%22ewallet.alipaycn%22%5D", partner);

            if (enabledPSS)
            {
                flights += ",PXDisablePSSCache,PXUsePartnerSettingsService";
                string selectPMRadioButtonResponse = "{\"select\":{\"template\":\"selectpmradiobuttonlist\",\"features\":null},\"default\":{\"template\":\"" + partner + "\",\"redirectionPattern\":null,\"resources\":null,\"features\":null}}";
                string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"redirectionPattern\":null,\"resources\":null,\"features\":null},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[]}}},\"default\":{\"template\":\"" + partner + "\",\"redirectionPattern\":null,\"resources\":null,\"features\":null}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(selectPMRadioButton ? selectPMRadioButtonResponse : expectedPSSResponse);
            }

            Dictionary<string, string> headers = new Dictionary<string, string>
            {
                { "x-ms-flight", flights }
            };

            List<PIDLResource> pidls = await GetPidlFromPXService(requestUrl, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            Assert.AreEqual(pidls[0].DisplayPages[0].DisplayName, expectedDisplayName);
            PropertyDisplayHint paymentMethod = pidls[0].DisplayPages[0].Members[enabledPSS ? 1 : 0] as PropertyDisplayHint;
            Assert.AreEqual("Alipay", paymentMethod.PossibleOptions[$"ewallet_alipaycn"].DisplayText, "Payment method name expected");

            PropertyDisplayHint paymentMethodDisplayHint = pidls[0].GetDisplayHintById("paymentMethod") as PropertyDisplayHint;
            Assert.IsNotNull(paymentMethodDisplayHint);
            Assert.AreEqual(expectedSelectType, paymentMethodDisplayHint.SelectType);

            PXSettings.PartnerSettingsService.Responses.Clear();
        }

        /// <summary>
        /// Test is to validate Fincastle flow using partner settings
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="scenario"></param>
        /// <returns></returns>
        [DataRow("officesmb", "px.issuerservice.default")]
        [DataRow("officesmb", "px.issuerservice.eligibility.approved")]
        [DataRow("officesmb", "px.issuerservice.eligibility.pending")]
        [DataRow("officesmb", "px.issuerservice.eligibility.ineligible")]
        [DataRow("officesmb", "px.issuerservice.eligibility.error")]
        [DataRow("officesmb", "px.issuerservice.initialize.failure")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_FincastleFlowUsingPartnerSettings(string partner, string scenario)
        {
            // Arrange
            string expectedPSSResponse = "{\"apply\":{\"template\":\"defaulttemplate\"}}";
            string requestUrl = $"/v7.0/Account001/paymentMethodDescriptions?type=mc&referrerId=MSFT-Console-Lpage&partner={partner}&operation=Apply&ocid=mcoffer_inp_omc_xbo_MSFT-Console-Lpage&country=US&language=en-US&family=credit_card&channel=COBRAND_PARTNER_SITE";

            PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);

            Dictionary<string, string> headers = new Dictionary<string, string>()
            {
                {
                    "x-ms-msaprofile", "PUID=985160615739993"
                },
                {
                    "x-ms-test", "{\"scenarios\":" + scenario + "}"
                }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(requestUrl, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            Assert.AreEqual(1, pidls.Count, "The number of Pidls should be equal to one");
            Assert.IsNotNull(pidls[0].DisplayPages, "DisplayPage should not be null");

            PXSettings.PartnerSettingsService.Responses.Clear();
        }

        [DataRow("Account001", "us", "azure", "selectInstance", true, true, true, "selectpi", "paymentInstrument", false, 2)]
        [DataRow("Account001", "de", "azure", "selectInstance", true, true, true, "selectpi", "paymentInstrument", false, 2)]
        [DataRow("Account001", "us", "azure", "selectInstance", true, false, false, "list", "paymentInstrumentListPi", false, 2)]
        [DataRow("Account001", "us", "azure", "selectInstance", true, true, false, "selectpi", "paymentInstrument", false, 2)]
        [DataRow("Account001", "us", "azure", "selectInstance", false, true, true, "selectpi", "paymentInstrument", false, 2)]
        [DataRow("Account001", "us", "azure", "selectInstance", true, true, true, "selectpi", "paymentInstrument", true, 2)]
        [DataRow("Account001", "us", "azure", "selectInstance", false, true, false, "selectpi", "paymentInstrument", false, 2)]
        [DataRow("Account001", "us", "azure", "selectInstance", false, false, false, "list", "paymentInstrumentShowPi", false, 2)]
        [DataRow("Account001", "us", "commercialstores", "selectInstance", true, true, true, "selectpi", "paymentInstrument", false, 1)]
        [DataRow("Account001", "de", "commercialstores", "selectInstance", true, true, true, "selectpi", "paymentInstrument", false, 1)]
        [DataRow("Account001", "us", "commercialstores", "selectInstance", true, true, true, "selectpi", "paymentInstrument", true, 1)]
        [DataRow("Account001", "us", "commercialstores", "selectInstance", true, false, false, "list", "paymentInstrumentListPi", false, 2)]
        [DataRow("Account001", "us", "commercialstores", "selectInstance", false, true, true, "selectpi", "paymentInstrument", false, 1)]
        [DataRow("Account001", "us", "commercialstores", "selectInstance", false, false, false, "list", "paymentInstrumentListPi", false, 2)]
        [DataRow("Account001", "us", "commercialsignup", "selectInstance", true, true, true, "selectpi", "paymentInstrument", false, 1)]
        [DataRow("Account001", "us", "commercialsignup", "selectInstance", true, false, false, "selectpi", "paymentInstrument", false, 1)]
        [DataTestMethod]
        public async Task GetPaymentMethod_SelectInstance_EmpOrgListPI(string accountId, string country, string partner, string operation, bool usePSS, bool enableEmpOrg, bool removeInstance, string expectedResourceId, string piHintId, bool useDefaultSettings, int expectedPageCount)
        {
            var selectPidls = new List<PIDLResource>();
            string flights = string.Empty;
            bool isEmpOrgListPI = false;

            if (usePSS)
            {
                string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"addNewPaymentMethodOptions\":{\"applicableMarkets\":[]},\"includeCardLogos\":{\"applicableMarkets\":[]},\"PXEnableEmpOrgListPI\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":" + enableEmpOrg.ToString().ToLower() + "}]},\"customizeActionContext\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"replaceContextInstanceWithPaymentInstrumentId\":" + removeInstance.ToString().ToLower() + "}]}}}}";
                string defaultPSSResponse = "{\"default\":{\"template\":\"" + partner + "\",\"redirectionPattern\":null,\"resources\":null,\"features\":null}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(useDefaultSettings ? defaultPSSResponse : expectedPSSResponse);

                flights = "PXUsePartnerSettingsService,PXDisablePSSCache" + (useDefaultSettings ? ",PXEnableEmpOrgListPI,PXEnableReplaceContextInstanceWithPaymentInstrumentId" : string.Empty);
            }
            else
            {
                if (enableEmpOrg)
                {
                    flights += ",PXEnableEmpOrgListPI";
                }

                if (removeInstance)
                {
                    flights += ",PXEnableReplaceContextInstanceWithPaymentInstrumentId";
                }
            }

            Dictionary<string, string> headers = new Dictionary<string, string>
            {
                { "x-ms-flight", flights.TrimStart(',') },
                { "x-ms-customer", "eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJyZXF1ZXN0ZXIiOiJ7fSIsInRhcmdldCI6IntcImN1c3RvbWVyVHlwZVwiOlwiYW5vbnltb3VzdXNyXCIsXCJjdXN0b21lcklkXCI6XCI4MDEwNmEwYS00NDQ5LTQ5YzMtOTJmNC1iNWU2ZWRhNDQ3NDNcIixcIm9uQmVoYWxmT2ZcIjpmYWxzZX0iLCJjYWxsZXIiOiJPbXMiLCJhdXRoVHlwZSI6Ilg1MDkiLCJ2ZXJzaW9uIjoiMS4wIiwibmJmIjoxNjkyMzg3MDMwLCJleHAiOjE2OTI0MzAyMzAsImlzcyI6InVybjptaWNyb3NvZnQ6b21zIn0." }
            };

            PXSettings.PimsService.PreProcess = (request) =>
            {
                if (request.RequestUri.AbsoluteUri.Contains("/emporg/paymentInstruments"))
                {
                    isEmpOrgListPI = true;
                }
            };

            selectPidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?country={1}&partner={2}&operation={3}",
                    accountId,
                    country,
                    partner,
                    operation),
                HttpStatusCode.OK,
                null,
                headers);

            // Assert
            Assert.IsNotNull(selectPidls, "Pidl is expected to be not null");

            var identity = selectPidls[0].Identity["resource_id"];
            Assert.AreEqual(expectedResourceId, identity, $"Expected identity {expectedResourceId}");

            var paymentInstrument = selectPidls[0].GetDisplayHintById(piHintId) as PropertyDisplayHint;
            Assert.IsNotNull(paymentInstrument, $"Payment instrument property display hint {piHintId} should not be null");

            if (enableEmpOrg)
            {
                Assert.IsTrue(isEmpOrgListPI, "EmpOrgListPI should be called");
            }
            else
            {
                Assert.IsFalse(isEmpOrgListPI, "EmpOrgListPI should not be called");
            }

            if (expectedResourceId == "selectpi")
            {
                var actionContext = JsonConvert.DeserializeObject<ActionContext>(paymentInstrument.PossibleOptions.ElementAt(0).Value.PidlAction.Context.ToString());
                Assert.IsNotNull(removeInstance ? actionContext.PaymentInstrumentId : actionContext.Instance, $"Instance/Payment instrument Id should not be null - {removeInstance}");

                Assert.IsNull(selectPidls[0].DataSources, $"Data sources for {expectedResourceId} should be null");
                Assert.AreEqual(expectedPageCount, selectPidls[0].DisplayPages[0].Members.Count, "Display pages count should be 2");
            }
            else
            {
                Assert.IsNotNull(paymentInstrument.PossibleOptions["({contextData.id})"], $"Possbile option with this key ({{contextData.id}}) should not be null");

                var dataSource = selectPidls[0].DataSources["paymentInstruments"].Href;
                Assert.IsNotNull(dataSource, $"Data sources for {expectedResourceId} should not be null");
            }

            if (country == "de")
            {
                Assert.AreEqual("clean full test ••3009", paymentInstrument.PossibleOptions["Account001-Pi006-Sepa"].DisplayText, "Display name should shoul dinclude last four digits");
            }

            PXSettings.PimsService.ResetToDefaults();
        }

        /// <summary>
        /// Test is to validate the fieldsToBeDisabled PSS feature
        /// </summary>
        /// <param name="country"></param>
        /// <returns></returns>
        [DataRow("us")]
        [DataRow("in")]
        [DataRow("cl")]
        [TestMethod]
        public async Task GetPaymentMethodDescriptions_RemoveOptionalInlable_UsingPartnerSettingsService(string country)
        {
            // Arrange
            List<bool> featureStatuses = new List<bool>() { false, true };
            List<string> optionalDisplayHintIds = new List<string> { "addressLine2", "addressLine3", "addressState" };
            Dictionary<string, string> headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner=officesmb&operation=add&family=credit_card&type=amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb&country={country}&language=en-US";

            foreach (bool featureStatus in featureStatuses)
            {
                string removeOptionalInLabelPssSettings = featureStatus ? "\"removeOptionalInLabel\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"usePSSForPXFeatureFlighting\":true}]}" : string.Empty;
                string partnerSettingResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{" + removeOptionalInLabelPssSettings + "}}}";

                PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

                // Assert
                Assert.IsNotNull(pidls);

                foreach (PIDLResource pidl in pidls)
                {
                    foreach (string optionalDisplayHintId in optionalDisplayHintIds)
                    {
                        PropertyDisplayHint property = pidl.GetDisplayHintById(optionalDisplayHintId) as PropertyDisplayHint;

                        if (property != null)
                        {
                            if (string.Equals(optionalDisplayHintId, "addressState", StringComparison.OrdinalIgnoreCase)
                                && !string.Equals(country, "cl", StringComparison.OrdinalIgnoreCase))
                            {
                                continue;
                            }
                            else
                            {
                                Assert.IsTrue(featureStatus ? !property.DisplayText().ToString().ToLower().Contains("(optional)") : property.DisplayText().ToString().ToLower().Contains("(optional)"), $"{property.DisplayName} is not set with correctly");
                            }
                        }
                    }
                }

                PXSettings.PartnerSettingsService.Responses.Clear();
            }
        }

        [DataRow("commercialstores", "defaulttemplate", true, true, true)]
        [DataRow("commercialstores", "defaulttemplate", true, false, true)]
        [DataRow("commercialstores", "commercialstores", false, false, true)]
        [DataRow("officeoobe", "defaulttemplate", true, true, true)]
        [DataRow("officeoobe", "defaulttemplate", true, false, false)]
        [DataRow("officeoobe", "officeoobe", false, false, false)]
        [DataRow("MACManage", "listpidropdown", true, true, true)]
        [DataRow("MACManage", "listpidropdown", true, false, false)]
        [TestMethod]
        public async Task ListPi_PaymentMethodDescriptions_overrideCheckDisplayNameToWireTransfer(string partner, string template, bool usePSS, bool useFeature, bool shouldCheckBeRenamedWireTransfer)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=Select&country=us&language=en-US&currency=USD";
            var headers = new Dictionary<string, string>();
            string templateOperations = string.Equals(template, GlobalConstants.TemplatePartners.ListpiDropDown, StringComparison.OrdinalIgnoreCase) ? "selectInstance" : "select";

            if (usePSS)
            {
                if (string.Equals(template, GlobalConstants.TemplatePartners.ListpiDropDown, StringComparison.OrdinalIgnoreCase))
                {
                    // The accountId 'eb8c2364-f51e-4fe2-a757-1e12fd50eaa6' is derived from the paymentInstrument JSON file for the "check" payment method family type.
                    url = $"v7.0/eb8c2364-f51e-4fe2-a757-1e12fd50eaa6/paymentMethodDescriptions?type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb%2Ccheck%2Csepa%2Crupay&partner=MACManage&operation={templateOperations}&language=en-US&filters=%7B%22filterExpiredPayment%22%3Atrue%7D&country=cl&allowedPaymentMethods=%5B%22credit_card%22%2C%22direct_debit%22%2C%22offline_bank_transfer.check%22%5D";
                }
                else
                {
                    headers.Add("x-ms-flight", "PXUsePartnerSettingsService,PXDisablePSSCache");
                }

                string defaultPSSResponse = "{\"" + templateOperations + "\":{\"template\":\"" + template + "\",\"redirectionPattern\":\"inline\"}}";
                string featureResponse = "{\"" + templateOperations + "\":{\"template\":\"" + template + "\",\"redirectionPattern\":\"inline\",\"features\":{\"overrideCheckDisplayNameToWireTransfer\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":null}}}}";

                PXSettings.PartnerSettingsService.ArrangeResponse(useFeature ? featureResponse : defaultPSSResponse);
            }

            if (!string.Equals(template, GlobalConstants.TemplatePartners.ListpiDropDown, StringComparison.OrdinalIgnoreCase))
            {
                var checkPm = PimsMockResponseProvider.GetPaymentMethods("cl", "offline_bank_transfer", "check");
                PXSettings.PimsService.ArrangeResponse(JsonConvert.SerializeObject(checkPm));
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "The List of pidls should NOT be null.");

            var pidl = pidls.First();
            Assert.IsNotNull(pidl, "The first pidl in the list should NOT be null.");

            string paymentMethodOrPaymentInstrument = string.Equals(template, GlobalConstants.TemplatePartners.ListpiDropDown, StringComparison.OrdinalIgnoreCase)
                                                      ? "paymentInstrument" : "paymentMethod";

            // Based on the paymentInstrument JSON file, the ID '21dd9edc-af71-4d62-80ce-37151d475326' is used for the "check" payment method family type, and hence it is being utilized here.
            string possibleValuesKey = string.Equals(template, GlobalConstants.TemplatePartners.ListpiDropDown, StringComparison.OrdinalIgnoreCase)
                                                      ? "21dd9edc-af71-4d62-80ce-37151d475326" : "offline_bank_transfer_check";

            var pmOrpiDisplayHint = pidl.GetDisplayHintById(paymentMethodOrPaymentInstrument) as PropertyDisplayHint;
            Assert.IsNotNull(pmOrpiDisplayHint, "DisplayHint with id 'paymentMethod' should NOT be null.");
            Assert.IsTrue(pmOrpiDisplayHint.PossibleValues.ContainsKey(possibleValuesKey), $"None of the possible values contain the key {possibleValuesKey}.");

            if (shouldCheckBeRenamedWireTransfer)
            {
                Assert.IsTrue(string.Equals(pmOrpiDisplayHint.PossibleValues[possibleValuesKey], "Wire Transfer"));
            }
            else
            {
                Assert.IsFalse(string.Equals(pmOrpiDisplayHint.PossibleValues[possibleValuesKey], "Wire Transfer"));
            }
        }

        /// <summary>
        /// Test is to validate HideAcceptCardMessage feature using PSS service
        /// </summary>
        /// <param name="partner"></param>
        /// <param name="featureStatus"></param>
        /// <returns></returns>
        [DataRow("officesmb", false)]
        [DataRow("officesmb", true)]
        [TestMethod]
        public async Task GetPaymentMethodDescriptions_HideAcceptCardMessage_UsingPartnerSettingsService(string partner, bool featureStatus)
        {
            // Arrange
            Dictionary<string, string> headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };
            string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&country=us&language=en-us&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb&operation=add";
            string partnerSettingResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideAcceptCardMessage\":\"" + featureStatus + "\"}]}}}}";

            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            // accept_card_message should be hiddlen in pidl.
            foreach (PIDLResource pidl in pidls)
            {
                DisplayHint acceptCardMessageDisplayHint = pidl.GetDisplayHintById("accept_card_message");

                if (featureStatus)
                {
                    Assert.IsTrue(acceptCardMessageDisplayHint.IsHidden);
                }
                else
                {
                    Assert.IsTrue(acceptCardMessageDisplayHint.IsHidden == null || acceptCardMessageDisplayHint.IsHidden == false);
                }
            }
        }

        /// <summary>
        /// Test is to validate the enablePlaceholder PSS feature
        /// </summary>
        /// <returns></returns>
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_EnablePlaceholderPssFeature()
        {
            // Arrange
            List<bool> featureStatuses = new List<bool>() { false, true };
            List<string> operations = new List<string>() { "add", "update" };
            Dictionary<string, string> headers = new Dictionary<string, string>() { { "x-ms-flight", "PXDisablePSSCache" } };

            foreach (string operation in operations)
            {
                foreach (bool featureStatus in featureStatuses)
                {
                    string enablePlaceholderPssSettings = featureStatus ? "\"enablePlaceholder\":{\"applicableMarkets\":[]}," : string.Empty;
                    string url = $"/v7.0/Account001/paymentMethodDescriptions?partner=officesmb&operation={operation}&family=credit_card&type=mc%2Cvisa%2Camex%2Cdiscover%2Cjcb&country=us&language=en-US";
                    string partnerSettingResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"features\":{" + enablePlaceholderPssSettings + "\"customizeAddressForm\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"addressType\":\"hapiV1SoldToIndividual\",\"dataSource\":\"hapi\"},{\"addressType\":\"hapiV1BillToIndividual\",\"dataSource\":\"hapi\"}]}}},\"update\":{\"template\":\"defaulttemplate\",\"features\":{" + enablePlaceholderPssSettings + "\"customizeAddressForm\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"addressType\":\"hapiV1SoldToIndividual\",\"dataSource\":\"hapi\"},{\"addressType\":\"hapiV1BillToIndividual\",\"dataSource\":\"hapi\"}]}}}}";
                    PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

                    // Act
                    List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

                    // Assert
                    Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                    foreach (PIDLResource pidl in pidls)
                    {
                        IEnumerable<DisplayHint> displayHints = pidl.DisplayHints();

                        foreach (DisplayHint displayHint in displayHints)
                        {
                            PropertyDisplayHint displayProperty = displayHint as PropertyDisplayHint;

                            if (displayProperty != null)
                            {
                                Assert.AreEqual("true", displayProperty.ShowDisplayName, "ShowDisplayName should be true");

                                if (featureStatus)
                                {
                                    if (displayProperty.PossibleValues == null && displayProperty.SelectType == null)
                                    {
                                        Assert.IsTrue(displayProperty.DisplayExample.Contains(displayProperty.DisplayName));
                                    }
                                }
                                else
                                {
                                    Assert.IsNull(displayProperty.DisplayExample);
                                }
                            }
                        }
                    }

                    PXSettings.PartnerSettingsService.Responses.Clear();
                }
            }
        }

        [DataRow(GlobalConstants.Partners.XboxSettings, true, "US", false, "2.7.1", "credit_card", "visa", true, 3, true)] // original
        [DataRow(GlobalConstants.Partners.Storify, true, "US", false, "2.7.1", "credit_card", "visa", true, 3, true)] // change partner
        [DataRow(GlobalConstants.Partners.XboxSettings, true, "US", false, "2.7.1", "credit_card", "visa,mc,discover,amex", true, 3, true)] // change type
        [DataRow(GlobalConstants.Partners.XboxSettings, true, "US", true, "2.7.1", "credit_card", "visa,mc,discover,amex", true, 3, true)] // change completePrerequisites
        [DataRow(GlobalConstants.Partners.Cart, false, "US", false, "2.7.1", "credit_card", "visa,mc,amex", true, 1, false)] // non console partner
        [DataRow(GlobalConstants.Partners.Storify, false, "US", false, "2.7.1", "credit_card", "visa,mc,amex", true, 3, false)] // flight not required
        [DataRow(GlobalConstants.Partners.XboxSettings, true, "US", false, "2.7.1", "credit_card", "visa", false, 3, false)] // no scenario
        [DataRow(GlobalConstants.Partners.XboxSettings, true, "US", false, "2.6.0", "credit_card", "visa", true, 3, false)] // too low pidlversion
        [DataRow(GlobalConstants.Partners.XboxSettings, true, "US", false, "2.7.0", "credit_card", "visa", true, 3, true)] // pidl major release version (should work with stylehint flight, should not work without)
        [DataRow(GlobalConstants.Partners.XboxSettings, true, "US", false, "2.7.1", "credit_card", "visa", true, 3, true)] // pidl hotfix release version (should work with regardless of stylehint flight)
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_ConsoleQRCodeFlow(string partner, bool qrCodeFlightRequired, string country, bool completePrerequisites, string pidlSdkVersion, string family, string type, bool includeScenario, int expectedPages, bool qrCodeFlowExpected)
        {
            // Arrange
            Dictionary<string, string> headers = new Dictionary<string, string>();
            List<string> webPartners = new List<string>() { "cart" };
            List<string> xboxNativePartners = new List<string>() { "xboxsettings", "storify" };
            string flightString = "PXEnableXboxNativeStyleHints";

            if (qrCodeFlightRequired)
            {
                flightString += ", PxEnableAddCcQrCode";
            }

            headers.Add("x-ms-flight", flightString);
            headers.Add("x-ms-pidlsdk-version", pidlSdkVersion);

            // First console call, generate QR Code
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country={country}&language=en-US&partner={partner}&operation=add&family={family}&type={type}";

            if (includeScenario)
            {
                url = url + "&scenario=addCCQrCode";
            }

            if (completePrerequisites)
            {
                url += "&completePrerequisites=true";
            }

            var ccPidl = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(ccPidl, "Pidl is expected to be not null");
            Assert.AreEqual(ccPidl[0].DisplayPages.Count, expectedPages);

            string pageName = string.Empty;
            string leftGroupName = string.Empty;
            string originalPageName = string.Empty;

            foreach (PIDLResource pidl in ccPidl)
            {
                pidl.Identity.TryGetValue("type", out string checkType);
                switch (checkType)
                {
                    case "visa":
                        pageName = "creditCardVisaAddWithQrCodePage";
                        leftGroupName = "creditCardVisaQrCodeLeftGroup";
                        originalPageName = "creditCardVisaAddPage";
                        break;
                    case "mc":
                        pageName = "creditCardMCAddWithQrCodePage";
                        leftGroupName = "creditCardMCQrCodeLeftGroup";
                        originalPageName = "creditCardMCAddPage";
                        break;
                    case "amex":
                        pageName = "creditCardAmexAddWithQrCodePage";
                        leftGroupName = "creditCardAmexQrCodeLeftGroup";
                        originalPageName = "creditCardAmexAddPage";
                        break;
                    case "discover":
                        pageName = "creditCardDiscoverAddWithQrCodePage";
                        leftGroupName = "creditCardDiscoverQrCodeLeftGroup";
                        originalPageName = "creditCardDiscoverAddPage";
                        break;
                }

                if (qrCodeFlowExpected)
                {
                    PageDisplayHint qrCodePage = pidl.DisplayPages[0] as PageDisplayHint;
                    Assert.AreEqual(qrCodePage.HintId, pageName);

                    // Data Description Checks
                    Assert.IsFalse(pidl.DataDescription.ContainsKey("consentCheckbox"));
                    Assert.IsTrue(pidl.DataDescription.ContainsKey("sessionId"));

                    // Left + Right Group checks
                    GroupDisplayHint rightGroup = pidl.GetDisplayHintById("creditCardQrCodeRightGroup") as GroupDisplayHint;
                    Assert.IsNotNull(rightGroup);

                    GroupDisplayHint leftGroup = pidl.GetDisplayHintById(leftGroupName) as GroupDisplayHint;
                    Assert.IsNotNull(leftGroup);

                    GroupDisplayHint expiryOnly = pidl.GetDisplayHintById("expiryOnlyGroup") as GroupDisplayHint;

                    // Image checks
                    ImageDisplayHint creditCardQrCodeImage = pidl.GetDisplayHintById("addCCQrCodeImage") as ImageDisplayHint;
                    Assert.IsNotNull(creditCardQrCodeImage);
                    Assert.IsNotNull(creditCardQrCodeImage.SourceUrl);
                    Assert.IsTrue(creditCardQrCodeImage.SourceUrl.Contains("data:image"));

                    // Polling checks
                    Assert.IsNotNull(qrCodePage.Action.Context);
                    DisplayHintAction qrCodePageAction = qrCodePage.Action as DisplayHintAction;
                    Assert.IsNotNull(qrCodePageAction.Context);
                    qrCodePageAction.Context.ToString().Contains("qrCodeStatus");

                    Microsoft.Commerce.Payments.PXCommon.PollActionContext context = JsonConvert.DeserializeObject<Microsoft.Commerce.Payments.PXCommon.PollActionContext>(qrCodePageAction.Context.ToString());

                    string[] parts = context.Href.Split('/');
                    Assert.AreEqual(parts[parts.Length - 1], "qrCodeStatus");
                    Assert.IsTrue(parts.Contains("secondScreenSessions"));
                    Assert.IsNotNull(parts[parts.Length - 2]);
                }
                else if (!qrCodeFlowExpected)
                {
                    string currentPageName = pidl.DisplayPages[0].HintId;
                    Assert.AreNotEqual(pageName, currentPageName);
                    Assert.AreEqual(originalPageName, currentPageName);
                }
            }
        }

        [DataRow(GlobalConstants.Partners.XboxSettings, "US", "visa", "credit_card", true, "2", false)]
        [DataRow(GlobalConstants.Partners.XboxSettings, "US", "visa", "credit_card", false, "5", true)]
        [DataRow(GlobalConstants.Partners.XboxSettings, "US", "visa", "credit_card", false, "6", false)]
        [DataRow(GlobalConstants.Partners.XboxSettings, "US", "visa,mc,amex.discover", "credit_card", false, "6", false)]
        [DataRow(GlobalConstants.Partners.Storify, "US", "visa,mc,amex.discover", "credit_card", true, "6", false)]
        [DataRow(GlobalConstants.Partners.Storify, "US", "visa,mc,amex.discover", "credit_card", false, "0", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_SecondScreenQRCodeFlow_ValidateSessionId(string partner, string country, string type, string family, bool isExpired, string useCount, bool isSuccess)
        {
            // Arrange
            Dictionary<string, string> headers = new Dictionary<string, string>();
            string paymentSessionId = "ZFFFFFFFFFFF78a93cbb-8a57-49d9-84b7-42c5f042dba6";
            string time = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");

            if (isExpired)
            {
                time = "2024-06-26T03:27:41.9416662Z";
            }

            string url = $"/v7.0/paymentMethodDescriptions?partner={partner}&operation=add&country=us&scenario=secondScreenAddPi&language=en-US&family={family}&allowedPaymentMethods=%5B%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22credit_card.visa%22%5D&sessionId={paymentSessionId}";

            string sessionResponse = "{\"Id\":\"" + paymentSessionId + "\",\"SessionType\":0,\"Data\":\"{\\\"ExposedFlightFeatures\\\":null,\\\"AccountId\\\":\\\"Account001\\\",\\\"Language\\\":\\\"en-us\\\",\\\"payment_session_id\\\":\\\"e99fd8de-8db4-4d7f-9ad0-1857b25503d4\\\",\\\"Partner\\\":\\\"xboxsettings\\\",\\\"Country\\\":\\\"US\\\",\\\"UseCount\\\":" + useCount + ",\\\"Operation\\\":\\\"Add\\\",\\\"Email\\\":null,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"PaymentMethodType\\\":null,\\\"PaymentInstrumentId\\\":null,\\\"Status\\\":3,\\\"ChallengeStatus\\\":\\\"Unknown\\\",\\\"RiskData\\\":{\\\"ipAddress\\\":null,\\\"userInfo\\\":null,\\\"deviceId\\\":null,\\\"userAgent\\\":null,\\\"greenId\\\":null,\\\"deviceType\\\":null},\\\"signature\\\":\\\"placeholder_for_paymentsession_signature_e99fd8de-8db4-4d7f-9ad0-1857b25503d4\\\",\\\"QrCodeCreatedTime\\\":\\\"" + time + "\\\",\\\"FormRenderedTime\\\":\\\"" + time + "\\\"}\",\"EncryptData\":false,\"Result\":null,\"State\":\"INCOMPLETE\",\"TestContext\":null}";

            PXSettings.SessionService.ResponseProvider.SessionStore.Add(paymentSessionId, sessionResponse);

            HttpResponseMessage result = await SendRequestPXService(url, HttpMethod.Get, new StringContent(JsonConvert.SerializeObject(sessionResponse), Encoding.UTF8, PaymentConstants.HttpMimeTypes.JsonContentType), null);

            // Assert
            if (isSuccess)
            {
                Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
            }
            else
            {
                Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
            }
        }

        [DataRow(GlobalConstants.Partners.Storify, "US", "visa,mc,amex.discover", "credit_card", false, "0", true)]
        [DataRow(GlobalConstants.Partners.XboxSettings, "US", "visa,mc,amex.discover", "credit_card", false, "0", true)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_CreditCard_SecondScreenQRCodeFlow_ValidateSessionId2(string partner, string country, string type, string family, bool isExpired, string useCount, bool isSuccess)
        {
            // Arrange
            Dictionary<string, string> headers = new Dictionary<string, string>();

            headers.Add("x-ms-flight", "PXDisablePSSCache, PXUsePartnerSettingsService");

            PXSettings.PartnerSettingsService.ResetToDefaults();
            string partnerSettingResponse = "{\"addSecondScreen\":{\"template\":\"defaulttemplate\",\"features\":null}}";
            PXSettings.PartnerSettingsService.ArrangeResponse(partnerSettingResponse);

            string paymentSessionId = "ZFFFFFFFFFFF78a93cbb-8a57-49d9-84b7-42c5f042dba6";
            string time = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");

            string url = $"/v7.0/paymentMethodDescriptions?partner={partner}&operation=add&country=us&scenario=secondScreenAddPi&language=en-US&family=credit_card&allowedPaymentMethods=%5B%22credit_card.amex%22%2C%22credit_card.mc%22%2C%22credit_card.visa%22%5D&sessionId={paymentSessionId}";

            string sessionResponse = "{\"Id\":\"" + paymentSessionId + "\",\"SessionType\":0,\"Data\":\"{\\\"ExposedFlightFeatures\\\":null,\\\"AccountId\\\":\\\"Account001\\\",\\\"Language\\\":\\\"en-us\\\",\\\"payment_session_id\\\":\\\"e99fd8de-8db4-4d7f-9ad0-1857b25503d4\\\",\\\"Partner\\\":\\\"xboxsettings\\\",\\\"Country\\\":\\\"US\\\",\\\"UseCount\\\":" + useCount + ",\\\"Operation\\\":\\\"Add\\\",\\\"Email\\\":null,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"PaymentMethodType\\\":null,\\\"PaymentInstrumentId\\\":null,\\\"Status\\\":3,\\\"ChallengeStatus\\\":\\\"Unknown\\\",\\\"RiskData\\\":{\\\"ipAddress\\\":null,\\\"userInfo\\\":null,\\\"deviceId\\\":null,\\\"userAgent\\\":null,\\\"greenId\\\":null,\\\"deviceType\\\":null},\\\"signature\\\":\\\"placeholder_for_paymentsession_signature_e99fd8de-8db4-4d7f-9ad0-1857b25503d4\\\",\\\"QrCodeCreatedTime\\\":\\\"" + time + "\\\",\\\"FormRenderedTime\\\":\\\"" + time + "\\\"}\",\"EncryptData\":false,\"Result\":null,\"State\":\"INCOMPLETE\",\"TestContext\":null}";
            PXSettings.SessionService.ResponseProvider.SessionStore.Add(paymentSessionId, sessionResponse);

            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");
            Assert.AreEqual(4, pidls.Count());
            Assert.AreEqual(1, pidls[0].DisplayPages.Count());
        }

        [DataRow(GlobalConstants.Partners.NorthStarWeb, "us", true)]
        [DataRow(GlobalConstants.Partners.NorthStarWeb, "us", false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SearchTransaction_EncryptAndTokenize(string partner, string country, bool enableEncryptAndTokenize)
        {
            // Arrange
            string accountId = "Account001";
            var url = $"/v7.0/{accountId}/paymentMethodDescriptions?family=credit_card&partner={partner}&operation=searchTransactions&country={country}&language=en-Us";

            if (enableEncryptAndTokenize)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableTokenizationEncryptionOtherOperation");
            }

            // Act
            var pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                if (enableEncryptAndTokenize)
                {
                    Assert.AreEqual("MSREncrypt", pidl.GetPropertyDescriptionByPropertyNameWithFullPath("cvvToken").DataProtection.ProtectionType, "Data protection type should be MSREncrypt");
                    Assert.IsNotNull(pidl.GetPropertyDescriptionByPropertyNameWithFullPath("cvvToken").DataProtection.Parameters["publicKey"], "Public key should not be null");
                }
                else
                {
                    Assert.IsNull(pidl.GetPropertyDescriptionByPropertyNameWithFullPath("cvvToken").DataProtection, "DataProtection should be null");
                }
            }
        }

        [DataRow(GlobalConstants.Partners.NorthStarWeb, "us", true, true, false)]
        [DataRow(GlobalConstants.Partners.DefaultTemplate, "us", true, true, true)]
        [DataRow(GlobalConstants.Partners.NorthStarWeb, "us", false, false, false)]
        [DataRow(GlobalConstants.Partners.NorthStarWeb, "cn", true, true, false)]
        [DataRow(GlobalConstants.Partners.NorthStarWeb, "cn", false, false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SearchTransaction_EncryptAndTokenize_FetchConfig(string partner, string country, bool enableFetchConfig, bool enableScript, bool enableSecureField)
        {
            // Arrange
            string accountId = "Account001";
            var url = $"/v7.0/{accountId}/paymentMethodDescriptions?family=credit_card&partner={partner}&operation=searchTransactions&country={country}&language=en-Us";

            if (enableFetchConfig)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableTokenizationEncryptionFetchConfigOtherOperation");
            }

            if (enableScript)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableTokenizationEncryptionFetchConfigWithScript");
            }

            if (enableSecureField)
            {
                PXFlightHandler.AddToEnabledFlights("PXEnableSecureFieldSearchTransaction");
            }

            // Act
            var pidls = await GetPidlFromPXService(url);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                if (enableFetchConfig && !enableSecureField)
                {
                    var cvvToken = pidl.GetPropertyDescriptionByPropertyNameWithFullPath("cvvToken");

                    Assert.AreEqual("TokenizeMSREncrypt", cvvToken.DataProtection.ProtectionType, "Data protection type should be MSREncrypt");
                    Assert.IsNotNull(cvvToken.DataProtection.Parameters["publicKey"], "Public key should not be null");
                    Assert.IsNotNull(cvvToken.DataProtection.FetchConfig, "Fetch config should not be null");
                    Assert.AreEqual(4, cvvToken.DataProtection.FetchConfig.FetchOrder.Count, "Fetch config retry order count should be 4");

                    if (enableScript)
                    {
                        Assert.AreEqual("encryptAndTokenize.js", cvvToken.DataProtection.Parameters["encryptionScript"], "Function should not be null");
                    }
                    else
                    {
                        Assert.AreEqual("encrypt", cvvToken.DataProtection.Parameters["encryptionFunction"], "Function should not be null");
                    }
                }
                else
                {
                    Assert.IsNull(pidl.GetPropertyDescriptionByPropertyNameWithFullPath("cvvToken").DataProtection, "DataProtection should be null");
                    Assert.AreEqual(enableSecureField ? "secureproperty" : "property", pidl.GetDisplayHintByPropertyName("cvvToken").DisplayHintType, "DisplayHintType for cvvToken should be secure property if secure filed enabled");
                }
            }
        }

        [DataRow("pssBasedPartner", true, true, true)]
        [DataRow("pssBasedPartner", true, false, true)] // default behavior goes to server-side prefill
        [DataRow("webblends", true, true, true)] // is not in client side prefill list
        [DataRow("webblends", true, false, true)] // is not in client side prefill list
        [DataRow("webblends", false, false, true)] // is not in client side prefill list
        [DataRow("ggpdeds", true, false, false)] // is in client side prefill list
        [DataRow("ggpdeds", true, false, false)] // is in client side prefill list
        [DataRow("ggpdeds", false, false, false)] // is in client side prefill list
        [DataTestMethod]
        public async Task SelectPaymentResource_UseServerSidePrefill_NoDataSource_HasPossibleValues_ViaFeature(string partner, bool usePSS, bool useFeature, bool shouldBeServerSidePrefill)
        {
            // Arrange
            string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation=selectinstance";

            var headers = new Dictionary<string, string>();
            headers.Add("x-ms-test", "{\"scenarios\":\"px.pims.listpi.success\", \"contact\": \"test\"}");

            PXSettings.PimsService.ResetToDefaults();

            if (usePSS)
            {
                headers.Add("x-ms-flight", "PXUsePartnerSettingsService");

                string response = "{\"selectinstance\":{\"template\":\"listpidropdown\"}}";
                string featureResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"features\":{\"useServerSidePrefill\":{\"applicableMarkets\":[]}}}}";
                PXSettings.PartnerSettingsService.ResetToDefaults();
                PXSettings.PartnerSettingsService.ArrangeResponse(useFeature ? featureResponse : response);
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            var pidl = pidls[0];

            var dataDescription = pidl.DataDescription as Dictionary<string, object>;
            var id = (dataDescription != null && dataDescription.ContainsKey("id")) ? (dataDescription["id"] as PropertyDescription) : null;
            var possibleValues = id?.PossibleValues;

            if (shouldBeServerSidePrefill)
            {
                Assert.IsNull(pidl.DataSources, "DataSources should be null for server-side prefill.");
                Assert.IsNotNull(possibleValues, "Server-side prefill should have a populated list of possibleValues.");
                Assert.IsTrue(possibleValues.Count > 0, "Server-side prefilllist of possibleValues Count should be > 0.");
            }
            else
            {
                // client-side prefill
                Assert.IsNotNull(pidl.DataSources, "DataSources will not be null for client-side prefill.");
                Assert.IsNull(possibleValues, "Client-side prefill should not have a populated list of possibleValues.");
            }
        }

        [DataRow("us", "add", false)]
        [DataRow("us", "add", true)]
        [DataTestMethod]
        public async Task UpdateCreditCardRegex_AddCreditCard_Battlenet_UsingPartnerSettings(string country, string operation, bool enableSecureField)
        {
            // Arrange
            var discoverRegex = "^3(?:6|8|9[0-9])[0-9]{12}|6(?:011|4[4-9][0-9]|5[0-9]{2})[0-9]{12}|62[4-6][0-9]{13}|628[2-8][0-9]{12}|622(1(2[6-9]|[3-9][0-9])|[2-8][0-9]{2}|9([01][0-9]|2[0-5]))[0-9]{10}$";
            var unionpayRegex = "^62[0-9]{14,17}$";
            string url = $"/v7.0/paymentMethodDescriptions?partner=battlenet&operation={operation}&language=en-us&family=credit_card&country={country}";

            string response = "{\"add\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\",\"resources\":null,\"features\":{\"customizeStructure\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeGroupForExpiryMonthAndYear\":true}]},\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeAddCreditDebitCardHeading\":true,\"removeStarRequiredTextGroup\":true,\"removeMicrosoftPrivacyTextGroup\":true}]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideAcceptCardMessage\":true,\"hideCardLogos\":true,\"hideAddress\":true,\"hidepaymentOptionSaveText\":true}]},\"enableUpdateCreditCardRegex\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"updateRegexesForCards\":[{\"Key\":\"discover\",\"value\":\"^3(?:6|8|9[0-9])[0-9]{12}|6(?:011|4[4-9][0-9]|5[0-9]{2})[0-9]{12}|62[4-6][0-9]{13}|628[2-8][0-9]{12}|622(1(2[6-9]|[3-9][0-9])|[2-8][0-9]{2}|9([01][0-9]|2[0-5]))[0-9]{10}$\"},{\"Key\":\"unionpay_international\",\"Value\":\"^62[0-9]{14,17}$\"}]}]}}}}";
            PXSettings.PartnerSettingsService.ResetToDefaults();
            PXSettings.PartnerSettingsService.ArrangeResponse(response);

            string paymentOrchestratorServiceResponse = "{\"paymentMethods\":[{\"paymentMethodType\":\"visa\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Visa\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"jcb\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"JCB\",\"logo\":\"http://localhost/staticresourceservice/images/v4/Logo_jcb_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/Logo_jcb_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_jcb.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"unionpay_international\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"UnionPay\",\"logo\":\"http://localhost/staticresourceservice/images/v3/logo_unionpay.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v3/logo_unionpay.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v3/logo_unionpay.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"mc\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"MasterCard\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_mc_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_mc_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_mc.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"amex\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Visa\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"discover\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Discover Network\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_mc_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_discover_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_discover.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"}],\"paymentInstruments\":[]}";
            PXSettings.PaymentOrchestratorService.ResetToDefaults();
            PXSettings.PaymentOrchestratorService.ArrangeResponse(paymentOrchestratorServiceResponse);

            var headers = new Dictionary<string, string>();

            string requestContextHeaderValue = $"{{\"tenantId\":\"tid\",\"tenantCustomerId\":\"tcid\",\"requestId\":\"wr_12345\",\"paymentAccountId\":\"accountid\"}}";
            headers.Add("x-ms-request-context", requestContextHeaderValue);

            if (enableSecureField)
            {
                headers.Add("x-ms-flight", "PXEnableSecureFieldAddCreditCard");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);
            var discoverPidl = pidls.Where(p => p.Identity["type"].ToString() == "discover").FirstOrDefault();
            var unionpayPidl = pidls.Where(p => p.Identity["type"].ToString() == "unionpay_international").FirstOrDefault();

            var discoverDataDescription = discoverPidl.GetPropertyDescriptionByPropertyName("accountToken");
            Assert.AreEqual(discoverRegex, discoverDataDescription.Validation.Regex, "Discover pidl validation regex is expected to match the " + discoverRegex);

            foreach (var item in discoverDataDescription.Validations)
            {
                if (string.Equals(item.ValidationType, "regex", StringComparison.OrdinalIgnoreCase))
                {
                    Assert.AreEqual(discoverRegex, item.Regex, "Discover pidl validation of type regex is expected to match the " + discoverRegex);
                }
            }

            var unionpayDataDescription = unionpayPidl.GetPropertyDescriptionByPropertyName("accountToken");
            Assert.AreEqual(unionpayRegex, unionpayDataDescription.Validation.Regex, "Cup International pidl validation regex is expected to match the " + unionpayRegex);

            foreach (var item in unionpayDataDescription.Validations)
            {
                if (string.Equals(item.ValidationType, "regex", StringComparison.OrdinalIgnoreCase))
                {
                    Assert.AreEqual(unionpayRegex, item.Regex, "Cup International pidl validation of type regex is expected to match the " + unionpayRegex);
                }
            }

            if (enableSecureField)
            {
                var discoverRegexEntry = discoverDataDescription.KeyPropertyResolutionMappings.Where(k => k.Contains("6444444444444444")).FirstOrDefault();
                Assert.AreEqual(discoverRegex, discoverRegexEntry[0]);

                var unionpayRegexEntry = unionpayDataDescription.KeyPropertyResolutionMappings.Where(k => k.Contains("6291200000000001")).FirstOrDefault();
                Assert.AreEqual(unionpayRegex, unionpayRegexEntry[0]);
            }
        }

        [DataRow("us", "add", false)]
        [DataRow("us", "add", true)]
        [DataTestMethod]
        public async Task UpdateCreditCardRegex_AddCreditCard_Battlenet_UsingFlighting(string country, string operation, bool enableSecureField)
        {
            // Arrange
            var discoverRegex = "^3(?:6|8|9[0-9])[0-9]{12}|6(?:011|4[4-9][0-9]|5[0-9]{2})[0-9]{12}|62[4-6][0-9]{13}|628[2-8][0-9]{12}|622(1(2[6-9]|[3-9][0-9])|[2-8][0-9]{2}|9([01][0-9]|2[0-5]))[0-9]{10}$";
            string url = $"/v7.0/paymentMethodDescriptions?partner=battlenet&operation={operation}&language=en-us&family=credit_card&country={country}";

            string response = "{\"add\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\",\"resources\":null,\"features\":{\"customizeStructure\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeGroupForExpiryMonthAndYear\":true}]},\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeAddCreditDebitCardHeading\":true,\"removeStarRequiredTextGroup\":true,\"removeMicrosoftPrivacyTextGroup\":true}]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideAcceptCardMessage\":true,\"hideCardLogos\":true,\"hideAddress\":true,\"hidepaymentOptionSaveText\":true}]}}}}";
            PXSettings.PartnerSettingsService.ResetToDefaults();
            PXSettings.PartnerSettingsService.ArrangeResponse(response);

            string paymentOrchestratorServiceResponse = "{\"paymentMethods\":[{\"paymentMethodType\":\"visa\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Visa\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"jcb\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"JCB\",\"logo\":\"http://localhost/staticresourceservice/images/v4/Logo_jcb_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/Logo_jcb_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_jcb.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"unionpay_international\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"UnionPay\",\"logo\":\"http://localhost/staticresourceservice/images/v3/logo_unionpay.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v3/logo_unionpay.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v3/logo_unionpay.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"mc\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"MasterCard\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_mc_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_mc_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_mc.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"amex\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Visa\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"discover\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Discover Network\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_mc_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_discover_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_discover.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"}],\"paymentInstruments\":[]}";
            PXSettings.PaymentOrchestratorService.ResetToDefaults();
            PXSettings.PaymentOrchestratorService.ArrangeResponse(paymentOrchestratorServiceResponse);

            var headers = new Dictionary<string, string>();

            string requestContextHeaderValue = $"{{\"tenantId\":\"tid\",\"tenantCustomerId\":\"tcid\",\"requestId\":\"wr_12345\",\"paymentAccountId\":\"accountid\"}}";
            headers.Add("x-ms-request-context", requestContextHeaderValue);

            if (enableSecureField)
            {
                headers.Add("x-ms-flight", "PXEnableUpdateDiscoverCreditCardRegex,PXEnableSecureFieldAddCreditCard");
            }
            else
            {
                headers.Add("x-ms-flight", "PXEnableUpdateDiscoverCreditCardRegex");
            }

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);
            var discoverPidl = pidls.Where(p => p.Identity["type"].ToString() == "discover").FirstOrDefault();
            var dataDescription = discoverPidl.GetPropertyDescriptionByPropertyName("accountToken");
            Assert.AreEqual(discoverRegex, dataDescription.Validation.Regex, "Discover pidl validation regex is expected to match the " + discoverRegex);

            foreach (var item in dataDescription.Validations)
            {
                if (string.Equals(item.ValidationType, "regex", StringComparison.OrdinalIgnoreCase))
                {
                    Assert.AreEqual(discoverRegex, item.Regex, "Discover pidl validation of type regex is expected to match the " + discoverRegex);
                }
            }

            if (enableSecureField)
            {
                var discoverRegexEntry = dataDescription.KeyPropertyResolutionMappings.Where(k => k.Contains("6444444444444444")).FirstOrDefault();
                Assert.AreEqual(discoverRegex, discoverRegexEntry[0]);
            }
        }

        /// <summary>
        /// Validates that the regex for card number input only accepts 16-digit values (not 13-digit)
        /// when the relevant feature flag or flight is enabled. This test ensures that the update to
        /// the validation logic is correctly applied based on feature or flight configuration.
        /// </summary>
        /// <param name="partner">The partner name under test.</param>
        /// <param name="familyType">The payment method family type.</param>
        /// <param name="isFeatureEnableToUpdateRegexValue">Indicates if the feature flag to update the regex is enabled.</param>
        /// <param name="isFlightEnableToUpdateRegexValue">Indicates if the flight to update the regex is enabled.</param>
        /// <returns>A task representing the asynchronous test operation.</returns>
        [DataRow("cart", "visa", false, false)]
        [DataRow("cart", "visa", false, true)]
        [DataRow("cart", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true)]
        [DataRow("cart", "visa%2Cdiscover", false, true)]
        [DataRow("cart", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false)]
        [DataRow("cart", "visa%2Cdiscover", false, false)]
        [DataRow("webblends", "visa", false, false)]
        [DataRow("webblends", "visa", false, true)]
        [DataRow("webblends", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true)]
        [DataRow("webblends", "visa%2Cdiscover", false, true)]
        [DataRow("webblends", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false)]
        [DataRow("webblends", "visa%2Cdiscover", false, false)]
        [DataRow("macmanage", "visa", false, false)]
        [DataRow("macmanage", "visa", false, true)]
        [DataRow("macmanage", "visa", true, false)]
        [DataRow("macmanage", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, true)]
        [DataRow("macmanage", "visa%2Cdiscover", false, true)]
        [DataRow("macmanage", "mc%2Cvisa%2Camex%2Cdiscover%2Cjcb", false, false)]
        [DataRow("macmanage", "visa%2Cdiscover", false, false)]
        [DataTestMethod]
        public async Task UpdateVisaCreditCardRegex_AddCreditCard_UsingFlighting(string partner, string familyType, bool isFeatureEnableToUpdateRegexValue = false, bool isFlightEnableToUpdateRegexValue = false)
        {
            // Arrange
            string validateRegexValue = isFeatureEnableToUpdateRegexValue || isFlightEnableToUpdateRegexValue ? "^4[0-9]{15}$" : "^4([0-9]{12}|[0-9]{15})$";
            List<string> countries = new List<string> { "us", "no", "gb", "ie", "in" };

            foreach (string country in countries)
            {
                string url = $"/v7.0/Account001/paymentMethodDescriptions?partner={partner}&operation=add&language=en-us&family=credit_card&country={country}";
                string pssResponse = null;

                if (partner == "macmanage")
                {
                    if (isFeatureEnableToUpdateRegexValue)
                    {
                        pssResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\",\"resources\":null,\"features\":{\"enableUpdateCreditCardRegex\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"updateRegexesForCards\":[{\"Key\":\"" + familyType + "\",\"value\":\"" + validateRegexValue + "\"}]}]}}}}";
                    }
                    else
                    {
                        pssResponse = "{\"add\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\",\"resources\":null,\"features\":null}}";
                    }

                    PXSettings.PartnerSettingsService.ResetToDefaults();
                    PXSettings.PartnerSettingsService.ArrangeResponse(pssResponse);
                }

                var headers = new Dictionary<string, string>();

                if (isFlightEnableToUpdateRegexValue)
                {
                    headers.Add("x-ms-flight", "PXEnableUpdateVisaCreditCardRegex");
                }

                // Act
                List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

                // Assert
                Assert.IsNotNull(pidls);
                var visaPidl = pidls.Where(p => p.Identity["type"].ToString() == "visa").FirstOrDefault();
                var discoverPidl = pidls.Where(p => p.Identity["type"].ToString() == "discover").FirstOrDefault();

                Assert.IsNotNull(visaPidl);
                var dataDescription = visaPidl.GetPropertyDescriptionByPropertyName("accountToken");

                Assert.IsNotNull(dataDescription);
                Assert.AreEqual(validateRegexValue, dataDescription.Validation.Regex, $"visa pidl validation regex is expected to match the " + validateRegexValue);

                // Skipping this check for India because the discover card PIMS mock is not included in paymentMethodByCountry.json for that country.
                if (familyType.Contains("discover") && !country.Contains("in"))
                {
                    Assert.IsNotNull(discoverPidl);
                    var discoverDataDescription = discoverPidl.GetPropertyDescriptionByPropertyName("accountToken");
                    Assert.IsNotNull(discoverDataDescription, "Discover pidl should not be null when partner is macmanage");
                    Assert.AreEqual("^6(?:011|4[4-9][0-9]|5[0-9]{2})[0-9]{12}|62[4-6][0-9]{13}|628[2-8][0-9]{12}|622(1(2[6-9]|[3-9][0-9])|[2-8][0-9]{2}|9([01][0-9]|2[0-5]))[0-9]{10}$", discoverDataDescription.Validation.Regex, $"discover pidl validation regex not matching with the expected match {discoverDataDescription.Validation.Regex}");
                }

                if (isFeatureEnableToUpdateRegexValue || isFlightEnableToUpdateRegexValue)
                {
                    // validatating 16 digits card number
                    Assert.IsTrue(Regex.Match("4444333322221111", dataDescription.Validation.Regex).Success, $"accountToken: 4444333322221111 should match with the regex");

                    // validatting 13 digit card number
                    Assert.IsFalse(Regex.Match("4444333322221", dataDescription.Validation.Regex).Success, $"accountToken: 4444333322221 should not match with the regex");
                }
                else
                {
                    // validatating 16 digits card number
                    Assert.IsTrue(Regex.Match("4444333322221111", dataDescription.Validation.Regex).Success, $"accountToken: 4444333322221111 should match with the regex");

                    // validatting 13 digit card number
                    Assert.IsTrue(Regex.Match("4444333322221", dataDescription.Validation.Regex).Success, $"accountToken: 4444333322221 should match with the regex");
                }
            }
        }

        [DataRow("us", "add")]
        [DataRow("us", "add")]
        [DataTestMethod]
        public async Task GetPaymentMethod_AddCreditCard_UsingPartnerSettingsService_DefaultTemplate_Battlenet(string country, string operation)
        {
            // Arrange
            string url = $"/v7.0/paymentMethodDescriptions?partner=battlenet&operation={operation}&language=en-us&family=credit_card&country={country}";

            string response = "{\"add\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\",\"resources\":null,\"features\":{\"customizeStructure\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeGroupForExpiryMonthAndYear\":true}]},\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeAddCreditDebitCardHeading\":true,\"removeStarRequiredTextGroup\":true,\"removeMicrosoftPrivacyTextGroup\":true}]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideAcceptCardMessage\":true,\"hideCardLogos\":true,\"hideAddress\":true,\"hidepaymentOptionSaveText\":true}]}}}}";
            PXSettings.PartnerSettingsService.ResetToDefaults();
            PXSettings.PartnerSettingsService.ArrangeResponse(response);

            var headers = new Dictionary<string, string>();
            headers.Add("x-ms-test", "{\"scenarios\":\"px.pims.cc.add.success\", \"contact\": \"test\"}");

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            ValidatePidls(pidls);
        }

        [DataRow("us", "add", true, true)]
        [DataRow("us", "add", true, false)]
        [DataRow("us", "add", false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethod_AddCreditCard_Battlenet_UsingPaymentOrchestratorService(string country, string operation, bool sendDfpIframe, bool useCommerceRiskDfpIframe)
        {
            // Arrange
            string url = $"/v7.0/paymentMethodDescriptions?partner=battlenet&operation={operation}&language=en-us&family=credit_card&country={country}";

            string response = "{\"add\":{\"template\":\"defaulttemplate\",\"redirectionPattern\":\"inline\",\"resources\":null,\"features\":{\"customizeStructure\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeGroupForExpiryMonthAndYear\":true}]},\"removeElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"removeAddCreditDebitCardHeading\":true,\"removeStarRequiredTextGroup\":true,\"removeMicrosoftPrivacyTextGroup\":true}]},\"hideElement\":{\"applicableMarkets\":[],\"displayCustomizationDetail\":[{\"hideAcceptCardMessage\":true,\"hideCardLogos\":true,\"hideAddress\":true,\"hidepaymentOptionSaveText\":true}]}}}}";
            PXSettings.PartnerSettingsService.ResetToDefaults();
            PXSettings.PartnerSettingsService.ArrangeResponse(response);

            string paymentOrchestratorServiceResponse = "{\"paymentMethods\":[{\"paymentMethodType\":\"visa\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Visa\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"jcb\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"JCB\",\"logo\":\"http://localhost/staticresourceservice/images/v4/Logo_jcb_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/Logo_jcb_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_jcb.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"unionpay_international\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"UnionPay\",\"logo\":\"http://localhost/staticresourceservice/images/v3/logo_unionpay.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v3/logo_unionpay.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v3/logo_unionpay.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"mc\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"MasterCard\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_mc_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_mc_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_mc.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"amex\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Visa\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_visa.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"},{\"paymentMethodType\":\"discover\",\"paymentMethodFamily\":\"credit_card\",\"display\":{\"name\":\"Discover Network\",\"logo\":\"http://localhost/staticresourceservice/images/v4/logo_mc_rect.png\",\"logos\":[{\"mimeType\":\"image/png\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_discover_rect.png\"},{\"mimeType\":\"image/svg+xml\",\"url\":\"http://localhost/staticresourceservice/images/v4/logo_discover.svg\"}]},\"properties\":{\"offlineRecurring\":true,\"userManaged\":true,\"soldToAddressRequired\":true,\"chargeThresholds\":null,\"supportedOperations\":[\"authorize\",\"capture\",\"refund\"],\"taxable\":false,\"providerRemittable\":false,\"moBillingIdentityUrl\":\"\",\"riskyPaymentMethod\":false,\"authWindow\":10080,\"fundsAvailabilityWindow\":0,\"multipleLineItemsSupported\":true,\"splitPaymentSupported\":true,\"purchaseWaitTime\":0,\"redirectRequired\":null,\"reAuthWindows\":[129600]},\"exclusionTags\":null,\"paymentMethodGroup\":\"credit_or_debit_card\",\"groupDisplayName\":\"Credit or debit Card\"}],\"paymentInstruments\":[]}";
            PXSettings.PaymentOrchestratorService.ResetToDefaults();
            PXSettings.PaymentOrchestratorService.ArrangeResponse(paymentOrchestratorServiceResponse);

            var headers = new Dictionary<string, string>();
            if (sendDfpIframe)
            {
                headers.Add("x-ms-flight", "PXPaasAddCCDfpIframe");
            }

            if (useCommerceRiskDfpIframe)
            {
                headers["x-ms-flight"] = "PXPaasAddCCDfpIframe,PXPaasAddCCDfpIframeForCommerceRisk";
            }

            string requestContextHeaderValue = $"{{\"tenantId\":\"tid\",\"tenantCustomerId\":\"tcid\",\"requestId\":\"wr_12345\",\"paymentAccountId\":\"accountid\"}}";
            headers.Add("x-ms-request-context", requestContextHeaderValue);

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

            // Assert
            ValidatePidls(pidls, sendDfpIframe, useCommerceRiskDfpIframe);
        }

        private void ValidatePidls(List<PIDLResource> pidls, bool sendDfpIframe = false, bool useCommerceRiskDfpIframe = false)
        {
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            foreach (var pidl in pidls)
            {
                // Check for elements which should have been removed for the battlenet
                Assert.IsNull(pidl.GetDisplayHintById("add_credit_debit_heading"));
                Assert.IsNull(pidl.GetDisplayHintById("starRequiredTextGroup"));
                Assert.IsNull(pidl.GetDisplayHintById("microsoftPrivacyTextGroup"));

                // Check for elements which should have been hidden for the the battlenet
                Assert.IsTrue(pidl.GetDisplayHintById("accept_card_message").IsHidden);
                Assert.IsTrue(pidl.GetDisplayHintById("paymentOptionSaveText").IsHidden);

                var cardType = pidl.Identity["type"].ToLower();

                if (cardType == "visa")
                {
                    Assert.IsTrue(pidl.GetDisplayHintById("acceptedVisaCardGroup").IsHidden);
                }
                else if (cardType == "mc")
                {
                    Assert.IsTrue(pidl.GetDisplayHintById("acceptedMCCardGroup").IsHidden);
                }
                else if (cardType == "amex")
                {
                    Assert.IsTrue(pidl.GetDisplayHintById("acceptedAmexCardGroup").IsHidden);
                }
                else if (cardType == "discover")
                {
                    Assert.IsTrue(pidl.GetDisplayHintById("acceptedDiscoverCardGroup").IsHidden);
                }
                else if (cardType == "jcb")
                {
                    Assert.IsTrue(pidl.GetDisplayHintById("acceptedJCBCardGroup").IsHidden);
                }
                else if (cardType == "unionpay_international")
                {
                    Assert.IsTrue(pidl.GetDisplayHintById("acceptedCupInternationalCardGroup").IsHidden);
                }

                IFrameDisplayHint dfpIframe = pidl.GetDisplayHintById("dfpIframe") as IFrameDisplayHint;
                if (sendDfpIframe)
                {
                    Assert.IsNotNull(dfpIframe, "DFP iframe should be present");

                    if (!useCommerceRiskDfpIframe)
                    {
                        Assert.AreEqual("<!DOCTYPE html><html><head><script src=\"https://fpt.dfp.microsoft.com/mdt.js?session_id=wr_12345&instanceId=8e23e7ff-e2a0-4b71-bede-2f0e7d1f6674\"></script><script>window.onload=function(){if(window.dfp&&typeof window.dfp.doFpt===\"function\"){window.dfp.doFpt(document);}}</script></head><body></body></html>", dfpIframe.DisplayContent);
                    }
                    else
                    {
                        Assert.AreEqual("<!DOCTYPE html><html><head><script src=\"https://df.cfp.microsoft.com/mdt.js?session_id=wr_12345\"></script><script>window.onload=function(){if(window.dfp&&typeof window.dfp.doFpt===\"function\"){window.dfp.doFpt(document);}}</script></head><body></body></html>", dfpIframe.DisplayContent);
                    }
                }
                else
                {
                    Assert.IsNull(dfpIframe, "DFP iframe should NOT be present");
                }

                Assert.IsTrue(pidl.GetDisplayHintById("addressLine1").IsHidden);
                Assert.IsTrue(pidl.GetDisplayHintById("addressLine2").IsHidden);
                Assert.IsTrue(pidl.GetDisplayHintById("addressCity").IsHidden);
                Assert.IsTrue(pidl.GetDisplayHintById("addressState").IsHidden);
                Assert.IsTrue(pidl.GetDisplayHintById("addressPostalCode").IsHidden);
                Assert.IsTrue(pidl.GetDisplayHintById("addressCountry").IsHidden);
            }
        }

        [DataTestMethod]
        public async Task SelectPaymentResource_Feature_AddCancelButtonToSelectPm()
        {
            var partners = new List<string> { "webblends", "officesmb", "commercialstores", "ggpdeds" };
            var operations = new List<string> { "add", "select" };
            var useFeatureValues = new List<bool> { true, false };

            foreach (string partner in partners)
            {
                foreach (string operation in operations)
                {
                    foreach (bool useFeature in useFeatureValues)
                    {
                        // Arrange
                        string url = $"/v7.0/Account001/paymentMethodDescriptions?country=us&language=en-US&partner={partner}&operation={operation}";

                        var headers = new Dictionary<string, string>
                        {
                            { "x-ms-flight", "PXUsePartnerSettingsService" },
                        };

                        if (string.Equals(operation, "add", StringComparison.OrdinalIgnoreCase))
                        {
                            url += "&type=amex%2Cvisa%2Cmc%2Cdiscover%2Cjcb&family=credit_card";
                            headers.Add("x-ms-test", "{\"scenarios\":\"px.pims.add.success\", \"contact\": \"test\"}");
                        }

                        PXSettings.PimsService.ResetToDefaults();

                        bool isSelectOperation = string.Equals(operation, "select", StringComparison.OrdinalIgnoreCase);

                        string templateName = isSelectOperation ? "selectpmbuttonlist" : "defaulttemplate";
                        string response = "{\"" + operation + "\":{\"template\":\"" + templateName + "\"}}";
                        string featureResponse = "{\"" + operation + "\":{\"template\":\"" + templateName + "\",\"features\":{\"addElement\":{\"applicableMarkets\":[], \"displayCustomizationDetail\": [{\"addCancelButton\": true}]}}}}";

                        PXSettings.PartnerSettingsService.ResetToDefaults();
                        PXSettings.PartnerSettingsService.ArrangeResponse(useFeature ? featureResponse : response);

                        // Act
                        List<PIDLResource> pidls = await GetPidlFromPXService(url, additionaHeaders: headers);

                        // Assert
                        Assert.IsNotNull(pidls, "Pidl is expected to be not null");

                        foreach (PIDLResource pidl in pidls)
                        {
                            var cancelGroup = pidl.GetDisplayHintById("cancelGroup");
                            var cancelButton = pidl.GetDisplayHintById("cancelButton");

                            bool hasCancelDisplayHints = cancelGroup != null && cancelButton != null;
                            if (useFeature)
                            {
                                Assert.IsTrue(hasCancelDisplayHints, "PIDL is expected to have the cancelGroup and cancelButton display hints when the feature is used");

                                Assert.AreEqual(cancelButton.Action.ActionType, "gohome", "cancelButton ActionType should be gohome");

                                Assert.IsTrue(cancelGroup.StyleHints.Contains("padding-vertical-medium"), "cancelGroup StyleHints should contains \"padding-vertical-medium\"");
                                Assert.IsTrue(cancelGroup.StyleHints.Contains("gap-medium"), "cancelGroup StyleHints should contains \"gap-medium\"");
                                Assert.IsTrue(cancelGroup.StyleHints.Contains("width-fill"), "cancelGroup StyleHints should contains \"width-fill\"");
                            }
                            else
                            {
                                Assert.IsFalse(hasCancelDisplayHints, "PIDL is expected to NOT have the cancelGroup and cancelButton display hints when the feature is NOT used.");
                            }
                        }
                    }
                }
            }
        }

        [DataRow("de", "EnableSepaJpmc")]
        [DataRow("de", null)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_AddOperation_ForSepaJPMC(string country, string enabledFlights)
        {
            // Arrange
            var headers = new Dictionary<string, string>();
            headers["x-ms-flight"] = enabledFlights;
            string operation = "add";
            string accountId = "Account001";
            string type = "sepa";
            string family = "direct_debit";
            string expectedException = "Assert.AreEqual failed. Expected:<OK>. Actual:<BadRequest>.";

            List<Tuple<string, string, string>> userAgents = new List<Tuple<string, string, string>>
            {
                { new Tuple<string, string, string>("windows", "{Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/11.11 (KHTML, like Gecko) Chrome/111.111.111.111 Safari/11.11 Edg/111.111.111.111}", "Web") },
                { new Tuple<string, string, string>("iPhone", "{Mozilla/5.0 (iPhone; CPU iPhone OS 17_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.3 Mobile/15E148 Safari/604.1}", "MobileApp") },
                { new Tuple<string, string, string>("Android", "{Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Mobile Safari/537.36}", "MobileApp") }
            };

            string[] partners = new string[]
            {
                Constants.PartnerNames.Azure,
                Constants.PartnerNames.Bing,
                Constants.PartnerNames.Cart,
                Constants.PartnerNames.CommercialStores,
                Constants.PartnerNames.DefaultTemplate,
                Constants.VirtualPartnerNames.Macmanage,
                Constants.PartnerNames.NorthStarWeb,
                Constants.VirtualPartnerNames.OfficeSmb,
                Constants.PartnerNames.OXODIME,
                Constants.PartnerNames.OXOWebDirect,
                Constants.PartnerNames.SetupOfficeSdx,
                Constants.PartnerNames.Webblends,
                Constants.PartnerNames.XboxSubs
            };

            string[] partnerListHasSummarPage = new string[]
            {
                Constants.PartnerNames.Cart,
                Constants.PartnerNames.OXODIME,
                Constants.PartnerNames.OXOWebDirect,
                Constants.PartnerNames.SetupOfficeSdx,
                Constants.PartnerNames.Webblends,
                Constants.PartnerNames.XboxSubs
            };

            foreach (var userAgent in userAgents)
            {
                headers["x-ms-deviceinfo"] = $"userAgent={userAgent.Item2}";

                foreach (var partner in partners)
                {
                    List<PIDLResource> pidls = new List<PIDLResource>();
                    try
                    {
                        pidls = await GetPidlFromPXService(
                                string.Format(
                                "/v7.0/{0}/paymentMethodDescriptions?type={1}&partner={2}&operation={3}&language=en-us&family={4}&country={5}",
                                accountId,
                                type,
                                partner,
                                operation,
                                family,
                                country),
                                flightNames: null,
                                additionaHeaders: headers);

                        Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
                        Assert.IsNotNull(pidls[0].DisplayPages, "PIDLs Displaypages are expected not to be null");

                        var channel = pidls[0].GetPropertyDescriptionByPropertyName("channel");

                        if (userAgent.Item1 == "windows")
                        {
                            Assert.AreEqual(userAgent.Item3, channel.DefaultValue, "Device class is expected to be as per user agent");
                        }
                        else if (userAgent.Item1 == "iPhone" || userAgent.Item1 == "Android")
                        {
                            Assert.AreEqual(userAgent.Item3, channel.DefaultValue, "Device class is expected to be as per user agent");
                        }
                        else
                        {
                            // default value would always be web in case if it is not windows, iphone or android
                            string expectedChannelValue = "Web";
                            Assert.AreEqual(expectedChannelValue, channel.DefaultValue, "Device class is expected to be as per user agent");
                        }

                        if (partnerListHasSummarPage.Contains(partner))
                        {
                            // pidls contains directDebitSepaUpdateNewLine1 in Members of Displaypages[1](Summary Page) as one of the hintid if jpmc flight is on
                            Assert.IsTrue(pidls[0].DisplayPages[1].Members.Any(x => x.HintId == "directDebitSepaUpdateNewLine1"), "PIDLs Displaypages are expected to contain directDebitSepaUpdateNewLine1");

                            Assert.IsFalse(pidls[0].DisplayPages[1].Members.Any(x => x.HintId == "directDebitSepaDocuSignText"), "PIDLs Displaypages are not expected to contain directDebitSepaDocuSignText");

                            // pidls contain new text in Members of Displaypages[0] in contentDisplayHint if jpmc flight is on
                            bool hasContentDisplayHintOnSummaryPage = pidls[0].DisplayPages[1].Members
                                .OfType<ContentDisplayHint>()
                                .Any(x => x.DisplayContent == "You'll be redirected to verify your bank account. After that step, you'll be redirected back to Microsoft. If verification is successful, sign the SEPA Direct Debit Mandate and you're done."
                                && x.HintId == "directDebitSepaUpdateNewLine1");

                            Assert.IsTrue(hasContentDisplayHintOnSummaryPage, "Expected content display hint not found.");
                        }
                        else
                        {
                            // pidls contains directDebitSepaUpdateNewLine1 in Members of Displaypages[0] as one of the hintid if jpmc flight is on
                            Assert.IsTrue(pidls[0].DisplayPages[0].Members.Any(x => x.HintId == "directDebitSepaUpdateNewLine1"), "PIDLs Displaypages are expected to contain directDebitSepaUpdateNewLine1");

                            // pidls contain new text in Members of Displaypages[0] in contentDisplayHint if jpmc flight is on
                            bool hasContentDisplayHint = pidls[0].DisplayPages[0].Members
                                .OfType<ContentDisplayHint>()
                                .Any(x => x.DisplayContent == "You'll be redirected to verify your bank account. After that step, you'll be redirected back to Microsoft. If verification is successful, sign the SEPA Direct Debit Mandate and you're done."
                                && x.HintId == "directDebitSepaUpdateNewLine1");

                            Assert.IsTrue(hasContentDisplayHint, "Expected content display hint not found.");
                        }

                        if ((partner != Constants.PartnerNames.Bing) && (partner != Constants.PartnerNames.CommercialStores))
                        {
                            // pidls contains addDirectDebitSepaNewHeading in Members of Displaypages[0] as one of the hintid if jpmc flight is on
                            Assert.IsTrue(pidls[0].DisplayPages[0].Members.Any(x => x.HintId == "addDirectDebitSepaNewHeading"), "PIDLs Displaypages are expected to contain addDirectDebitSepaNewHeading");

                            // pidls contain new text in Members of Displaypages[0] in contentDisplayHint if jpmc flight is on
                            bool hasContentDisplayHintForHeading = pidls[0].DisplayPages[0].Members
                                .OfType<ContentDisplayHint>()
                                .Any(x => x.DisplayContent == "Set up to pay by SEPA direct debit"
                                && x.HintId == "addDirectDebitSepaNewHeading");

                            Assert.IsTrue(hasContentDisplayHintForHeading, "Expected content display hint not found.");
                        }
                    }
                    catch (Exception ex)
                    {
                        Assert.IsTrue(ex.Message.StartsWith(expectedException), string.Format("Failure was detected but not as expected"));
                    }
                }
            }
        }

        [DataRow("northstarweb", "de", true, true)]
        [DataRow("northstarweb", "de", false, true)]
        [DataRow("cart", "de", true, false)]
        [DataRow("cart", "de", false, false)]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SelectPM_CheckForSepaLogo(string partner, string country, bool shouldUseNewLogo, bool enabledPSS)
        {
            string operation = "select";
            string accountId = "Account001";
            string language = "en-us";
            string flights = "enablePaymentMethodGrouping";
            string allowedPaymentMethods = "%5B%22credit_card%22%2C%22direct_debit.ach%22%2C%22direct_debit.sepa%22%2C%22direct_debit.ideal_billing_agreement%22%2C%22mobile_billing_non_sim%22%2C%22ewallet.paypal%22%2C%22ewallet.alipay_billing_agreement%22%2C%22ewallet.kakaopay%22%2C%22ewallet.venmo%22%2C%22real_time_payments.upi%22%2C%22ewallet.paypay%22%2C%22ewallet.alipayhk%22%2C%22ewallet.gcash%22%2C%22ewallet.truemoney%22%2C%22ewallet.touchngo%22%5D";
            string oldLogoUrl = "https://pmservices.cp.microsoft.com/staticresourceservice/images/v4/logo_sepa.svg";
            string newLogoUrl = "https://pmservices.cp.microsoft.com/staticresourceservice/images/v4/logo_sepa_v2.svg";

            if (enabledPSS)
            {
                flights += ",PXUsePartnerSettingsService";

                string expectedPSSResponse = "{\"selectinstance\":{\"template\":\"listpidropdown\",\"redirectionPattern\":null,\"resources\":null,\"features\":null},\"select\":{\"template\":\"selectpmbuttonlist\",\"features\":{\"paymentMethodGrouping\":{\"applicableMarkets\":[\"de\"]}}},\"default\":{\"template\":\"" + partner + "\",\"redirectionPattern\":null,\"resources\":null,\"features\":null}}";
                PXSettings.PartnerSettingsService.ArrangeResponse(expectedPSSResponse);
            }

            if (shouldUseNewLogo)
            {
                flights += ",EnableNewLogoSepa";
            }

            string url = string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?&partner={1}&operation={2}&language={3}&country={4}&allowedPaymentMethods={5}",
                    accountId,
                    partner,
                    operation,
                    language,
                    country,
                    allowedPaymentMethods);

            Dictionary<string, string> headers = new Dictionary<string, string>
            {
                { "x-ms-flight", flights }
            };

            // Act
            List<PIDLResource> pidls = await GetPidlFromPXService(url, HttpStatusCode.OK, null, additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "Pidl is expected to be not null");

            string pidlString = JsonConvert.SerializeObject(pidls);

            Assert.IsTrue(pidlString.Contains("direct_debit_sepa"));

            List<DisplayHint> listOfDisplayHints = pidls.First().GetAllDisplayHints();

            string sourceUrl = string.Empty;

            foreach (var hint in listOfDisplayHints.OfType<ImageDisplayHint>())
            {
                if (hint.HintId == "optionLogo__direct_debit_sepa")
                {
                    sourceUrl = hint.SourceUrl;
                }
            }

            Assert.IsNotNull(sourceUrl, "sepa logo url is expected");

            if (shouldUseNewLogo)
            {
                Assert.AreEqual(newLogoUrl, sourceUrl);
            }
            else
            {
                Assert.AreEqual(oldLogoUrl, sourceUrl);
            }
            
            PXSettings.PartnerSettingsService.Responses.Clear();
        }

        [DataRow("de", "macmanage")]
        [DataTestMethod]
        public async Task GetPaymentMethodDescriptions_SEPA_NCE_Select(string country, string partner)
        {
            // Arrange
            string operation = "select";
            string accountId = "my-ba";

            Dictionary<string, string> headers = new Dictionary<string, string>
            {
                { "x-ms-flight", "EnableModern" },
                { "x-ms-billingAccountId", "commerceRootId:organizationId" },
            };

            // Act
            List<PIDLResource> pidls = new List<PIDLResource>();
            pidls = await GetPidlFromPXService(
                string.Format(
                    "/v7.0/{0}/paymentMethodDescriptions?partner={1}&operation={2}&language=en-us&country={3}",
                    accountId,
                    partner,
                    operation,
                    country),
                additionaHeaders: headers);

            // Assert
            Assert.IsNotNull(pidls, "PIDLs are expected not to be null");
        }
    }
}
