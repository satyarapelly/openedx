<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters">
        <collectionProp name="UserParameters.names">
          <stringProp name="-792929080">partner</stringProp>
          <stringProp name="-800766238">apiHost</stringProp>
        </collectionProp>
        <collectionProp name="UserParameters.thread_values">
          <collectionProp name="-494320072">
            <stringProp name="-225929061">pulsarx</stringProp>
            <stringProp name="107646477">internal.paymentinstruments.mp.microsoft.com</stringProp>
          </collectionProp>
        </collectionProp>
        <boolProp name="UserParameters.per_iteration">false</boolProp>
      </UserParameters>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Environment Settings Loader" enabled="true">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">import java.text.*;
import java.io.*;
import java.util.*;

class MyFunctions {
	public static void loadValue(String envVarName, boolean isRequired) {
		String val = null;

		val = System.getenv(envVarName);

		if (val == null) {
			val = vars.get(envVarName);			
		     if (val == null) {			
				if (isRequired) {
					log.error(&quot;&apos;&quot; + envVarName + &quot;&apos; was not set in the environment variables&quot;);
					ctx.getEngine().stopTest(true);
				}
				else {
					log.warn(&quot;&apos;&quot; + envVarName + &quot;&apos; was not set&quot;);
				}
		     }
		     else
		     {
		     	log.warn(&quot;Loaded value `&quot; + val + &quot;` from User Param file for `&quot; + envVarName + &quot;` since it was not set in the environment&quot;);
		     }
		}
		else {
			vars.put(envVarName, val);
			log.info(&quot;&apos;&quot; + envVarName + &quot;&apos; was set to the value: &quot; + val);
		}
	}
}

MyFunctions.loadValue(&quot;partner&quot;, true);
MyFunctions.loadValue(&quot;apiHost&quot;, true);</stringProp>
        <stringProp name="scriptLanguage">java</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config">
        <stringProp name="filename">AddPIInput.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">authtoken,ccnumber</stringProp>
        <boolProp name="randomOrder">true</boolProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load AddPI Csv Data" enabled="false">
        <stringProp name="filename">AddPIInput.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">authtoken,ccnumber</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group AddPI">
        <intProp name="ThreadGroup.num_threads">200</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <longProp name="ThreadGroup.duration">18600</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get CCToken Request">
          <stringProp name="HTTPSampler.domain">tokenization.cp.microsoft.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/Tokens/Pan/GetToken</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;data&quot;:&quot;${ccnumber}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
            <stringProp name="JSONPostProcessor.referenceNames">cctoken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">50</stringProp>
        </ConstantTimer>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get CCVToken Request">
            <stringProp name="HTTPSampler.domain">tokenization.cp.microsoft.com</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/Tokens/Cvv/GetToken</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;data&quot;:&quot;101&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ccvtoken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">50</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${authtoken}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-jmeter-test</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-ms-flight</stringProp>
              <stringProp name="Header.value">EnableModernOnlyTipCreditCard</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-ms-test</stringProp>
              <stringProp name="Header.value">{&quot;Scenarios&quot;:null,&quot;scenarios&quot;:&quot;risk-evaluate-force-approve&quot;,&quot;contact&quot;:&quot;pifddevsfte@microsoft.com&quot;,&quot;retention&quot;:&quot;2025-01-171T00:00:00.0000000Z&quot;,&quot;context_props&quot;:{}}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddPIEx Request">
            <stringProp name="HTTPSampler.domain">${apiHost}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v6.0/users/me/paymentInstrumentsex?Country=US&amp;partner=${partner}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;paymentMethodFamily&quot;: &quot;credit_card&quot;,&#xd;
  &quot;paymentMethodType&quot;: &quot;visa&quot;,&#xd;
  &quot;paymentMethodOperation&quot;: &quot;add&quot;,&#xd;
  &quot;paymentMethodCountry&quot;: &quot;us&quot;,&#xd;
  &quot;paymentMethodResource_id&quot;: &quot;credit_card.visa&quot;,&#xd;
  &quot;sessionId&quot;: &quot;08eb59e8-bb55-4f2a-a635-666f80bf4c1a&quot;,&#xd;
  &quot;context&quot;: &quot;purchase&quot;,&#xd;
  &quot;riskData&quot;: {&#xd;
    &quot;dataType&quot;: &quot;payment_method_riskData&quot;,&#xd;
    &quot;dataOperation&quot;: &quot;add&quot;,&#xd;
    &quot;dataCountry&quot;: &quot;us&quot;&#xd;
  },&#xd;
  &quot;details&quot;: {&#xd;
    &quot;dataType&quot;: &quot;credit_card_visa_details&quot;,&#xd;
    &quot;dataOperation&quot;: &quot;add&quot;,&#xd;
    &quot;dataCountry&quot;: &quot;us&quot;,&#xd;
    &quot;accountHolderName&quot;: &quot;MSTest&quot;,&#xd;
    &quot;accountToken&quot;: &quot;${cctoken}&quot;,&#xd;
    &quot;expiryMonth&quot;: &quot;1&quot;,&#xd;
    &quot;expiryYear&quot;: &quot;2030&quot;,&#xd;
    &quot;cvvToken&quot;: &quot;${ccvtoken}&quot;,&#xd;
    &quot;address&quot;: {&#xd;
      &quot;addressType&quot;: &quot;billing&quot;,&#xd;
      &quot;addressOperation&quot;: &quot;add&quot;,&#xd;
      &quot;addressCountry&quot;: &quot;us&quot;,&#xd;
      &quot;address_line1&quot;: &quot;1 Microsoft Way&quot;,&#xd;
      &quot;city&quot;: &quot;Redmond&quot;,&#xd;
      &quot;region&quot;: &quot;wa&quot;,&#xd;
      &quot;postal_code&quot;: &quot;98052-8300&quot;,&#xd;
      &quot;country&quot;: &quot;us&quot;&#xd;
    },&#xd;
    &quot;permission&quot;: {&#xd;
      &quot;dataType&quot;: &quot;permission_details&quot;,&#xd;
      &quot;dataOperation&quot;: &quot;add&quot;,&#xd;
      &quot;dataCountry&quot;: &quot;us&quot;,&#xd;
      &quot;hmac&quot;: {&#xd;
        &quot;algorithm&quot;: &quot;hmacsha256&quot;,&#xd;
        &quot;keyToken&quot;: &quot;tc.piAuthKey.Oc9dQ7mHW3bF6Q2Jux4fzSYtzMrrQkqC25X01fvt3Eg&quot;,&#xd;
        &quot;data&quot;: &quot;Kk1/PRtUBbiQquSFLv+dqj6VTqSK3kpwQV7XOsu3xq0=&quot;&#xd;
      },&#xd;
      &quot;userCredential&quot;: &quot;XYZ&quot;&#xd;
    },&#xd;
    &quot;currentContext&quot;: &quot;{\&quot;propertyValue\&quot;:null,\&quot;propertyName\&quot;:null,\&quot;id\&quot;:\&quot;credit_card.\&quot;,\&quot;instance\&quot;:null,\&quot;paymentInstrumentId\&quot;:null,\&quot;backupId\&quot;:null,\&quot;backupInstance\&quot;:null,\&quot;action\&quot;:\&quot;addResource\&quot;,\&quot;paymentMethodFamily\&quot;:\&quot;credit_card\&quot;,\&quot;paymentMethodType\&quot;:null,\&quot;isSelectPMSkipped\&quot;:null,\&quot;resourceActionContext\&quot;:{\&quot;action\&quot;:\&quot;addResource\&quot;,\&quot;pidlDocInfo\&quot;:{\&quot;anonymousPidl\&quot;:false,\&quot;resourceType\&quot;:\&quot;paymentMethod\&quot;,\&quot;parameters\&quot;:{\&quot;partner\&quot;:\&quot;webblends\&quot;,\&quot;operation\&quot;:\&quot;Add\&quot;,\&quot;country\&quot;:\&quot;US\&quot;,\&quot;language\&quot;:\&quot;en-US\&quot;,\&quot;family\&quot;:\&quot;credit_card\&quot;,\&quot;currency\&quot;:\&quot;USD\&quot;}},\&quot;pidlIdentity\&quot;:null,\&quot;resourceInfo\&quot;:null,\&quot;resourceObjPath\&quot;:null,\&quot;resource\&quot;:null,\&quot;prefillData\&quot;:null},\&quot;partnerHints\&quot;:null,\&quot;prefillData\&quot;:null,\&quot;targetIdentity\&quot;:null}&quot;&#xd;
  },&#xd;
  &quot;pxmac&quot;: &quot;FCD98968D935E2DC1C568EC29BDEEADB183DA6DA5342536B01B0A613E368ABEC&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Throughput Shaping Timer">
              <collectionProp name="load_profile">
                <collectionProp name="141287118">
                  <stringProp name="50">2</stringProp>
                  <stringProp name="53">5</stringProp>
                  <stringProp name="1722">60</stringProp>
                </collectionProp>
                <collectionProp name="1818285271">
                  <stringProp name="53">5</stringProp>
                  <stringProp name="1567">10</stringProp>
                  <stringProp name="60">60</stringProp>
                </collectionProp>
                <collectionProp name="-241843701">
                  <stringProp name="1567">10</stringProp>
                  <stringProp name="1598">20</stringProp>
                  <stringProp name="1722">60</stringProp>
                </collectionProp>
                <collectionProp name="-293655904">
                  <stringProp name="1598">20</stringProp>
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="60">60</stringProp>
                </collectionProp>
                <collectionProp name="173715117">
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="46974255">18600</stringProp>
                </collectionProp>
              </collectionProp>
            </kg.apc.jmeter.timers.VariableThroughputTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddPI Request">
            <stringProp name="HTTPSampler.domain">${apiHost}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v6.0/users/me/paymentInstruments?Country=US&amp;partner=${partner}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;paymentMethodFamily&quot;: &quot;credit_card&quot;,&#xd;
  &quot;paymentMethodType&quot;: &quot;visa&quot;,&#xd;
  &quot;paymentMethodOperation&quot;: &quot;add&quot;,&#xd;
  &quot;paymentMethodCountry&quot;: &quot;us&quot;,&#xd;
  &quot;paymentMethodResource_id&quot;: &quot;credit_card.visa&quot;,&#xd;
  &quot;sessionId&quot;: &quot;08eb59e8-bb55-4f2a-a635-666f80bf4c1a&quot;,&#xd;
  &quot;context&quot;: &quot;purchase&quot;,&#xd;
  &quot;riskData&quot;: {&#xd;
    &quot;dataType&quot;: &quot;payment_method_riskData&quot;,&#xd;
    &quot;dataOperation&quot;: &quot;add&quot;,&#xd;
    &quot;dataCountry&quot;: &quot;us&quot;&#xd;
  },&#xd;
  &quot;details&quot;: {&#xd;
    &quot;dataType&quot;: &quot;credit_card_visa_details&quot;,&#xd;
    &quot;dataOperation&quot;: &quot;add&quot;,&#xd;
    &quot;dataCountry&quot;: &quot;us&quot;,&#xd;
    &quot;accountHolderName&quot;: &quot;MSTest&quot;,&#xd;
    &quot;accountToken&quot;: &quot;${cctoken}&quot;,&#xd;
    &quot;expiryMonth&quot;: &quot;1&quot;,&#xd;
    &quot;expiryYear&quot;: &quot;2030&quot;,&#xd;
    &quot;cvvToken&quot;: &quot;${ccvtoken}&quot;,&#xd;
    &quot;address&quot;: {&#xd;
      &quot;addressType&quot;: &quot;billing&quot;,&#xd;
      &quot;addressOperation&quot;: &quot;add&quot;,&#xd;
      &quot;addressCountry&quot;: &quot;us&quot;,&#xd;
      &quot;address_line1&quot;: &quot;1 Microsoft Way&quot;,&#xd;
      &quot;city&quot;: &quot;Redmond&quot;,&#xd;
      &quot;region&quot;: &quot;wa&quot;,&#xd;
      &quot;postal_code&quot;: &quot;98052-8300&quot;,&#xd;
      &quot;country&quot;: &quot;us&quot;&#xd;
    },&#xd;
    &quot;permission&quot;: {&#xd;
      &quot;dataType&quot;: &quot;permission_details&quot;,&#xd;
      &quot;dataOperation&quot;: &quot;add&quot;,&#xd;
      &quot;dataCountry&quot;: &quot;us&quot;,&#xd;
      &quot;hmac&quot;: {&#xd;
        &quot;algorithm&quot;: &quot;hmacsha256&quot;,&#xd;
        &quot;keyToken&quot;: &quot;tc.piAuthKey.Oc9dQ7mHW3bF6Q2Jux4fzSYtzMrrQkqC25X01fvt3Eg&quot;,&#xd;
        &quot;data&quot;: &quot;Kk1/PRtUBbiQquSFLv+dqj6VTqSK3kpwQV7XOsu3xq0=&quot;&#xd;
      },&#xd;
      &quot;userCredential&quot;: &quot;XYZ&quot;&#xd;
    },&#xd;
    &quot;currentContext&quot;: &quot;{\&quot;propertyValue\&quot;:null,\&quot;propertyName\&quot;:null,\&quot;id\&quot;:\&quot;credit_card.\&quot;,\&quot;instance\&quot;:null,\&quot;paymentInstrumentId\&quot;:null,\&quot;backupId\&quot;:null,\&quot;backupInstance\&quot;:null,\&quot;action\&quot;:\&quot;addResource\&quot;,\&quot;paymentMethodFamily\&quot;:\&quot;credit_card\&quot;,\&quot;paymentMethodType\&quot;:null,\&quot;isSelectPMSkipped\&quot;:null,\&quot;resourceActionContext\&quot;:{\&quot;action\&quot;:\&quot;addResource\&quot;,\&quot;pidlDocInfo\&quot;:{\&quot;anonymousPidl\&quot;:false,\&quot;resourceType\&quot;:\&quot;paymentMethod\&quot;,\&quot;parameters\&quot;:{\&quot;partner\&quot;:\&quot;webblends\&quot;,\&quot;operation\&quot;:\&quot;Add\&quot;,\&quot;country\&quot;:\&quot;US\&quot;,\&quot;language\&quot;:\&quot;en-US\&quot;,\&quot;family\&quot;:\&quot;credit_card\&quot;,\&quot;currency\&quot;:\&quot;USD\&quot;}},\&quot;pidlIdentity\&quot;:null,\&quot;resourceInfo\&quot;:null,\&quot;resourceObjPath\&quot;:null,\&quot;resource\&quot;:null,\&quot;prefillData\&quot;:null},\&quot;partnerHints\&quot;:null,\&quot;prefillData\&quot;:null,\&quot;targetIdentity\&quot;:null}&quot;&#xd;
  },&#xd;
  &quot;pxmac&quot;: &quot;FCD98968D935E2DC1C568EC29BDEEADB183DA6DA5342536B01B0A613E368ABEC&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Throughput Shaping Timer">
              <collectionProp name="load_profile">
                <collectionProp name="141287118">
                  <stringProp name="50">2</stringProp>
                  <stringProp name="53">5</stringProp>
                  <stringProp name="1722">60</stringProp>
                </collectionProp>
                <collectionProp name="1818285271">
                  <stringProp name="53">5</stringProp>
                  <stringProp name="1567">10</stringProp>
                  <stringProp name="60">60</stringProp>
                </collectionProp>
                <collectionProp name="-241843701">
                  <stringProp name="1567">10</stringProp>
                  <stringProp name="1598">20</stringProp>
                  <stringProp name="1722">60</stringProp>
                </collectionProp>
                <collectionProp name="-293655904">
                  <stringProp name="1598">20</stringProp>
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="60">60</stringProp>
                </collectionProp>
                <collectionProp name="-213502664">
                  <stringProp name="1604">26</stringProp>
                  <stringProp name="1629">30</stringProp>
                  <stringProp name="1722">60</stringProp>
                </collectionProp>
                <collectionProp name="177196045">
                  <stringProp name="1635">36</stringProp>
                  <stringProp name="1635">36</stringProp>
                  <stringProp name="46974255">18600</stringProp>
                </collectionProp>
              </collectionProp>
            </kg.apc.jmeter.timers.VariableThroughputTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <intProp name="calcMode">2</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>13500.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">PIFDLoadResults.csv</stringProp>
        <boolProp name="saveHeaders">false</boolProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
