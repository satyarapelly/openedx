@description('The name of the workload using this infrastructure. Usually it is a keyword or name of the main service.')
param workloadName string

@description('The "workloadName" used in the network deployment.')
param networkWorkloadName string

@description('A short keyword to name this particular app service.')
param appServiceKeyword string

param location string = az.resourceGroup().location

@minLength(2)
@maxLength(4)
param shortLocation string

@maxLength(2)
param stamp string

// Lacking a better way, I'm passing each certificate host name as an individual parameter.
param appGwListenerHostNamePXTls string
param appGwListenerHostNamePXStagingTls string

@description('The principal ID of the service principal used by Azure App Service to poll key vault for certificates.')
param webAppRPServicePrincipalId string

param availabilityZones array

var keyVaultName = 'kv-${workloadName}-${shortLocation}-${stamp}' // max 24 chars
var keyVaultSecretIdTemplate = 'https://${keyVaultName}${environment().suffixes.keyvaultDns}/secrets'

var commonName = '${workloadName}-${shortLocation}-${stamp}'
var pxAppServiceName = 'app-${appServiceKeyword}-${commonName}'
var backendAddressPools = [
  {
    name: 'paymentexperience'
    fqdn: '${pxAppServiceName}.azurewebsites.net'
    probePath: '/probe'
  }
  {
    name: 'paymentexperience-staging'
    fqdn: '${pxAppServiceName}-staging.azurewebsites.net'
    probePath: '/probe'
  }
]

// App Gateway ARM template does not have child resources, so we cannot deploy the gateway
// here and add listeners and backend pools later as part of the app deployment. Therefore,
// we deploy the whole gateway here. Even though the backend may not be ready yet.
var listenerConfigurations = [
  {
    // the name of the listener configuration in app gateway. Must be unique.
    name: 'paymentexperience-tls'
    // the host name this listener will listen to
    hostName: appGwListenerHostNamePXTls
    // whether it should have mutual TLS enabled
    // isMtls: false
    // all listener configurations need a different priority
    routingPriority: 10000
    // the name of the sslcertficate reference in app gateway
    // must match the names in the appGatewayCertificates array (below)
    // multiple listeners can use the same cert
    sslCertificateName: '${workloadName}-paymentexperience-tls'
    // the name of the backend pool reference
    backendAddressPoolName: 'paymentexperience'
    // a name for the backend settings reference
    backendSettingsName: 'paymentexperience'
    // whether this listener should listen on the public IP (as opposed to the private ip)
    isPublicIpListener: true
  }
  {
    name: 'paymentexperience-tls-private'
    hostName: appGwListenerHostNamePXTls
    isMtls: false
    routingPriority: 10020
    sslCertificateName: '${workloadName}-paymentexperience-tls'
    backendAddressPoolName: 'paymentexperience'
    backendSettingsName: 'paymentexperience'
    isPublicIpListener: false
  }
  {
    name: 'paymentexperience-staging-tls'
    hostName: appGwListenerHostNamePXStagingTls
    isMtls: false
    routingPriority: 10030
    sslCertificateName: '${workloadName}-paymentexperience-tls'
    backendAddressPoolName: 'paymentexperience-staging'
    backendSettingsName: 'paymentexperience-staging'
    isPublicIpListener: true
  }
]

var backendConfigurations = [
  {
    name: 'paymentexperience'
    backendAddressPoolName: 'paymentexperience'
  }
  {
    name: 'paymentexperience-staging'
    backendAddressPoolName: 'paymentexperience-staging'
  }
]

// Basically this has to match with the certificate names in the ev2 config.
// The name pattern that gets autogenerated here using the workloadName (e.g. '${workloadName}-pims-tls')
// is what specifies the "certName" in that file.
var appGatewayCertificates = [
  {
    // the name of the sslcertficate reference in app gateway
    sslCertificateName: '${workloadName}-paymentexperience-tls'
    // the id of the secret in the key vault, may be the same
    sslCertificateSecretId: '${keyVaultSecretIdTemplate}/${workloadName}-paymentexperience-tls'
  }
]

module gondolinMain 'br:pifddev.azurecr.io/bicep/modules/gondolin/main:v1.1.1' = {
  name: 'main-${workloadName}-${location}-${stamp}'
  params: {
    workloadName: workloadName
    networkWorkloadName: networkWorkloadName
    location: location
    shortLocation: shortLocation
    stamp: stamp
    appGatewayCertificates: appGatewayCertificates
    webAppRPServicePrincipalId: webAppRPServicePrincipalId
    availabilityZones: availabilityZones
    wafPolicyMode: 'Detection'
    provisionAppGateway: true
    appGatewayBackendAddressPools: backendAddressPools
    appGatewayListenerConfigurations: listenerConfigurations
    appGatewayBackendConfigurations: backendConfigurations
  }
}

