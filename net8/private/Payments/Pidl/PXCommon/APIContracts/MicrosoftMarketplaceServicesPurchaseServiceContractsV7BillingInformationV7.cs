// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Commerce.Payments.PXCommon
{
    using Microsoft.Commerce.Payments.Common;
    using Microsoft.Commerce.Payments.Common.Web;
    using Newtonsoft.Json;

    public partial class MicrosoftMarketplaceServicesPurchaseServiceContractsV7BillingInformationV7
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftMarketplaceServicesPurchaseServiceContractsV7BillingInformationV7
        /// class.
        /// </summary>
        public MicrosoftMarketplaceServicesPurchaseServiceContractsV7BillingInformationV7()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftMarketplaceServicesPurchaseServiceContractsV7BillingInformationV7
        /// class.
        /// </summary>
        /// <param name="paymentInstrumentId">Gets or sets the ID of the
        /// payment instrument.</param>
        /// <param name="sessionId">Gets or sets the payment session identifier
        /// - for example used to correlate state
        /// between the redirection service and CP payments. This value MUST be
        /// provided by the
        /// client.</param>
        /// <param name="billingRecordId">Gets or sets the billing record id
        /// for this order.</param>
        /// <param name="billingRecordVersion">Gets or sets the billing record
        /// version used for this order.</param>
        /// <param name="challengeCompletedKind">Gets or sets the risk
        /// challenge kind that was completed. Possible values include: 'None',
        /// 'Cvv', 'Sms', 'ThreeDS', 'ThreeDS2', 'Bypass'</param>
        /// <param name="conversionType">Gets or sets the conversion type if a
        /// token is provided and a conversion is necessary. Possible values
        /// include: 'RetainExisting', 'TakeNew'</param>
        /// <param name="csvTopOffPaymentInstrumentId">Gets or sets the payment
        /// instrument used to top off if the CSV balance is not enough</param>
        /// <param name="paymentInstrumentType">Gets or sets the type of
        /// PaymentInstrument. (Enum : Token). Possible values include: 'None',
        /// 'Token'</param>
        /// <param name="riskSessionId">Gets or sets the risk session id
        /// associated with order.</param>
        /// <param name="secondaryPaymentInstrumentId">Gets or sets the
        /// secondary paymentInstrumentId.
        /// Used as a PI for setting recurrence auto renew for token as PI
        /// attach scenarios</param>
        /// <param name="soldToAddressId">Gets or sets the address ID
        /// associated with the order's recipient.</param>
        /// <param name="taxInfoReference">Gets or sets the tax info reference
        /// information.</param>
        /// <param name="tokenizedPaymentInstrumentData">Gets or sets the
        /// tokenized payment instrument data to be passed opaquely to
        /// billing.</param>
        public MicrosoftMarketplaceServicesPurchaseServiceContractsV7BillingInformationV7(string paymentInstrumentId, string sessionId, string billingRecordId = default(string), int? billingRecordVersion = default(int?), string challengeCompletedKind = default(string), string conversionType = default(string), string csvTopOffPaymentInstrumentId = default(string), MicrosoftMarketplaceServicesPurchaseServiceContractsV7IdentityV7 paymentInstrumentOwner = default(MicrosoftMarketplaceServicesPurchaseServiceContractsV7IdentityV7), string paymentInstrumentType = default(string), string riskSessionId = default(string), string secondaryPaymentInstrumentId = default(string), string soldToAddressId = default(string), System.Guid? taxInfoReference = default(System.Guid?), string tokenizedPaymentInstrumentData = default(string))
        {
            BillingRecordId = billingRecordId;
            BillingRecordVersion = billingRecordVersion;
            ChallengeCompletedKind = challengeCompletedKind;
            ConversionType = conversionType;
            CsvTopOffPaymentInstrumentId = csvTopOffPaymentInstrumentId;
            PaymentInstrumentId = paymentInstrumentId;
            PaymentInstrumentOwner = paymentInstrumentOwner;
            PaymentInstrumentType = paymentInstrumentType;
            RiskSessionId = riskSessionId;
            SecondaryPaymentInstrumentId = secondaryPaymentInstrumentId;
            SessionId = sessionId;
            SoldToAddressId = soldToAddressId;
            TaxInfoReference = taxInfoReference;
            TokenizedPaymentInstrumentData = tokenizedPaymentInstrumentData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the billing record id for this order.
        /// </summary>
        [JsonProperty(PropertyName = "billingRecordId")]
        public string BillingRecordId { get; set; }

        /// <summary>
        /// Gets or sets the billing record version used for this order.
        /// </summary>
        [JsonProperty(PropertyName = "billingRecordVersion")]
        public int? BillingRecordVersion { get; set; }

        /// <summary>
        /// Gets or sets the risk challenge kind that was completed. Possible
        /// values include: 'None', 'Cvv', 'Sms', 'ThreeDS', 'ThreeDS2',
        /// 'Bypass'
        /// </summary>
        [JsonProperty(PropertyName = "challengeCompletedKind")]
        public string ChallengeCompletedKind { get; set; }

        /// <summary>
        /// Gets or sets the conversion type if a token is provided and a
        /// conversion is necessary. Possible values include: 'RetainExisting',
        /// 'TakeNew'
        /// </summary>
        [JsonProperty(PropertyName = "conversionType")]
        public string ConversionType { get; set; }

        /// <summary>
        /// Gets or sets the payment instrument used to top off if the CSV
        /// balance is not enough
        /// </summary>
        [JsonProperty(PropertyName = "csvTopOffPaymentInstrumentId")]
        public string CsvTopOffPaymentInstrumentId { get; set; }

        /// <summary>
        /// Gets or sets the ID of the payment instrument.
        /// </summary>
        [JsonProperty(PropertyName = "paymentInstrumentId")]
        public string PaymentInstrumentId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "paymentInstrumentOwner")]
        public MicrosoftMarketplaceServicesPurchaseServiceContractsV7IdentityV7 PaymentInstrumentOwner { get; set; }

        /// <summary>
        /// Gets or sets the type of PaymentInstrument. (Enum : Token).
        /// Possible values include: 'None', 'Token'
        /// </summary>
        [JsonProperty(PropertyName = "paymentInstrumentType")]
        public string PaymentInstrumentType { get; set; }

        /// <summary>
        /// Gets or sets the risk session id associated with order.
        /// </summary>
        [JsonProperty(PropertyName = "riskSessionId")]
        public string RiskSessionId { get; set; }

        /// <summary>
        /// Gets or sets the secondary paymentInstrumentId.
        /// Used as a PI for setting recurrence auto renew for token as PI
        /// attach scenarios
        /// </summary>
        [JsonProperty(PropertyName = "secondaryPaymentInstrumentId")]
        public string SecondaryPaymentInstrumentId { get; set; }

        /// <summary>
        /// Gets or sets the payment session identifier - for example used to
        /// correlate state
        /// between the redirection service and CP payments. This value MUST be
        /// provided by the
        /// client.
        /// </summary>
        [JsonProperty(PropertyName = "sessionId")]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or sets the address ID associated with the order's recipient.
        /// </summary>
        [JsonProperty(PropertyName = "soldToAddressId")]
        public string SoldToAddressId { get; set; }

        /// <summary>
        /// Gets or sets the tax info reference information.
        /// </summary>
        [JsonProperty(PropertyName = "taxInfoReference")]
        public System.Guid? TaxInfoReference { get; set; }

        /// <summary>
        /// Gets or sets the tokenized payment instrument data to be passed
        /// opaquely to billing.
        /// </summary>
        [JsonProperty(PropertyName = "tokenizedPaymentInstrumentData")]
        public string TokenizedPaymentInstrumentData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PaymentInstrumentId == null)
            {
                throw new ValidationException(ErrorCode.CannotBeNull, "PaymentInstrumentId");
            }
            if (SessionId == null)
            {
                throw new ValidationException(ErrorCode.CannotBeNull, "SessionId");
            }
            if (PaymentInstrumentOwner != null)
            {
                PaymentInstrumentOwner.Validate();
            }
        }
    }
}
