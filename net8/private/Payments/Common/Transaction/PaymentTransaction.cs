// <copyright file="PaymentTransaction.cs" company="Microsoft">Copyright (c) Microsoft 2014. All rights reserved.</copyright>

namespace Microsoft.Commerce.Payments.Common.Transaction
{
    using System;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    /// <summary>
    /// <para>An individual transaction that is manifested against a payment.
    /// For example, an authorize for a payment is represented by a transaction object, while a settle 
    /// for a payment is represented by yet another transaction object.
    /// </para>
    /// <para>
    /// Each such transaction object has a unique identifier. This identifier is generated by the caller/creator
    /// of the transaction.
    /// </para>
    /// </summary>
    public class PaymentTransaction
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTransaction"/> class.
        /// </summary>
        public PaymentTransaction()
        {
            this.PaymentAdditionalData = new Dictionary<string, object>();
            this.JournalAdditionalData = new Dictionary<string, object>();
            this.OrderLineItems = new List<OrderLineItem>();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTransaction"/> class.
        /// </summary>
        /// <param name="transactionId">A unique identifier for the transaction.</param>
        /// <param name="transactionType">Transaction type <see cref="TransactionType"/></param>
        public PaymentTransaction(Guid transactionId, TransactionType transactionType)
            : this()
        {
            this.Id = transactionId;
            this.TransactionType = transactionType;
        }

        /// <summary>
        /// Gets or sets account Id.
        /// </summary>
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or sets a unique identifier for this transaction.
        /// </summary>
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the transaction type. 
        /// </summary>
        public TransactionType TransactionType { get; set; }

        /// <summary>
        /// Gets or sets the date time when this transaction occurred.
        /// </summary>
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or sets the payment instrument used with
        /// </summary>
        public string PaymentInstrumentId { get; set; }

        /// <summary>
        /// Gets or sets transaction that this refers to. 
        /// Example: A refund transaction may refer to a previously settled transaction.
        /// </summary>
        public Guid ReferenceTransactionId { get; set; }

        /// <summary>
        /// Gets or sets the identity of the marketplace that initiates the authorization.   
        /// This can be M$, Azure, Office. We still need to determine the format of the identity. (V2)
        /// </summary>
        public string Partner { get; set; }

        /// <summary>
        /// Gets the merchart store name for business data lookup.
        /// </summary>
        public string MerchantStore
        {
            get
            {
                return string.IsNullOrEmpty(this.DeviceType) ? this.Partner : (string.Compare(this.DeviceType, "windows.xbox", true) == 0 || string.Compare(this.DeviceType, "xbox", true) == 0 ? "Xbox" : this.Partner);
            }
        }

        /// <summary>
        ///  Gets or sets the optional device type, like Xbox. It is used for business data selection like MID, merchant descriptor.
        /// </summary>
        public string DeviceType { get; set; }

        /// <summary>
        /// Gets or sets non-MS seller identity to sell services/goods in specific markets,    
        /// such as China or India.  Examples are “MSNJV”, “BesTV”. (V2)
        /// </summary>
        public string ThirdPartySeller { get; set; }

        /// <summary>   
        /// Gets or sets the four digit code that represents the MS entity. (V2)
        /// </summary>
        public string SellerOfRecord { get; set; }

        /// <summary>
        /// Gets or sets the total amount, if applicable, that pertains to this transaction.
        /// </summary>
        /// <remarks>
        /// The total amount would be a sum of individual order line items amount
        /// </remarks>
        public TransactionAmount Amount { get; set; }

        /// <summary>
        /// Gets or sets the total amount, if applicable, that pertains to this transaction.
        /// This property is never set by the caller, used internally within payments. With
        /// introduction of partial settlements for commercial invoicing scenarios this field
        /// helps to keep track of the original amount that was intended to be collected.
        /// </summary>
        public TransactionAmount InitialTransactionAmount { get; set; }

        /// <summary>
        /// Gets or sets the target amount, if applicable, that pertains to this transaction.
        /// This property is never set by the caller, used internally within payments. The 
        /// purpose of this is to track amount expected after reduce operations.
        /// </summary>
        public decimal TargetAmount { get; set; }

        /// <summary>
        /// Gets or sets the 2 letter ISO code for the Country of payment.
        /// </summary>
        public string Country { get; set; }

        /// <summary>
        /// Gets or sets the country code that where the merchant is sold to.
        /// </summary>
        public string SoldToCountry { get; set; }

        /// <summary>
        /// Gets a set of key value pairs of additional data required to complete the transaction. These are specific
        /// to payment methods and data to pass is inferred by the caller querying the payment instrument for additional
        /// data required.
        /// Example: SourceIPAddress
        /// </summary>
        public Dictionary<string, object> PaymentAdditionalData { get; private set; }

        /// <summary>
        /// Gets the order line items associated with this transaction. 
        /// </summary>
        /// <remarks>
        /// This is not stored as part of the transaction, but is just passed through to the provider layer to pass it onto
        /// providers per protocol requirements
        /// </remarks>
        public IList<OrderLineItem> OrderLineItems { get; private set; } 

        /// <summary>
        /// Gets or sets the status of the transaction.
        /// </summary>
        public TransactionStatus Status { get; set; }

        /// <summary>
        /// Gets or sets a detailed message that expands on the status of the transaction.
        /// </summary>
        public TransactionStatusDetail StatusDetails { get; set; }

        /// <summary>
        /// Gets or sets the reconciliation record associated with this transaction.
        /// </summary>
        public ReconciliationRecord ReconciliationRecord { get; set; }

        /// <summary>
        /// Gets or sets the redirect content return by providers, which could be redirect URL or payment slip. Used for charge only.
        /// </summary>
        public string RedirectContent { get; set; }

        /// <summary>
        /// Gets or sets the MIME type for RedirectContent field, such as text/URL-LIST, text/html, image/jpeg etc.
        /// </summary>
        public string RedirectContentType { get; set; }

        /// <summary>
        /// Gets or sets the success URL to redirect to when transaction is successfully approved. Used for charge only.
        /// </summary>
        public string SuccessUrl { get; set; }

        /// <summary>
        /// Gets or sets the failure URL to redirect to when transaction is denied. Used for charge only.
        /// </summary>
        public string FailureUrl { get; set; }

        /// <summary>
        /// Gets or sets the pending URL to redirect to when transaction is pending. Used for charge only.
        /// </summary>
        public string PendingUrl { get; set; }

        /// <summary>
        /// Gets or sets the merchant id for this transaction.
        /// </summary>
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or sets the GatewayMerchantId for this transaction.
        /// </summary>
        public string GatewayMerchantId { get; set; }
        
        /// <summary>
        /// Gets or sets the provider name for this transaction.
        /// </summary>
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this is a recurring transaction
        /// </summary>
        public bool RecurringTransaction { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this is a dunning retrying transaction
        /// </summary>
        public bool RetryTransaction { get; set; }

        /// <summary>
        /// Gets or sets the MerchantReferenceNumber name for this transaction.
        /// </summary>
        public string MerchantReferenceNumber { get; set; }

        /// <summary>
        /// Gets or sets the suggested issuer classification to payment instrument.
        /// For Korea local credit card scenario, caller need the information to identify the card type. E.g. Samsung, Lotte, Shinhan.
        /// </summary>
        public string IssuerClassification { get; set; }
        
        /// <summary>
        /// Gets or sets the MerchantDescriptor for this transaction.
        /// </summary>
        public string MerchantDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the MerchantSupportInfo for this transaction.
        /// </summary>
        public string MerchantSupportInfo { get; set; }

        /// <summary>
        /// Gets or sets the AuthenticationData, which is needed by downstream like FDC processor
        /// we should not serialize this in the payment store
        /// </summary>
        [JsonIgnore]
        public AuthenticationData AuthenticationData { get; set; }

        public string RiskToken { get; set; }

        /// <summary>
        /// Gets a set of key value pairs of data required by transaction consumers
        /// from Journal Service
        /// Example: PaymentMethodType
        /// </summary>
        public Dictionary<string, object> JournalAdditionalData { get; private set; }

        /// <summary>
        /// Gets or sets the TransactionConfirmation, which should be set by provider while processing the request
        /// </summary>
        public TransactionConfirmationType TransactionConfirmation { get; set; }

        public ExternalReference ExternalReference { get; set; }

        public string SessionId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the transaction is idempotent - i.e. if caller invokes a POST 
        /// request with the same tracking-id as before this property will be set to true. For all others including 
        /// GET requests this will be set to false. Marking JsonIgnore as this property is used only internally and  
        /// should not be passed over to external callers.
        /// </summary>
        [JsonIgnore]
        public bool IsIdempotentTransaction { get; set; }

        public int RowVersion { get; set; }

        public string CallerName { get; set; }

        public TestContext TestContext { get; set; }

        public string GetPaymentTransactionReferenceNumber(PaymentContext paymentContext)
        {
            return string.Format("{0}/{1}", paymentContext.PaymentId, this.Id);
        }

        public PaymentTransaction CloneForCompensation(TransactionType transactionType)
        {
            return new PaymentTransaction
            {
                TransactionType = transactionType,
                ReferenceTransactionId = this.Id,
                Country = this.Country,
                SoldToCountry = this.SoldToCountry,
                Amount = this.Amount,
                PaymentInstrumentId = this.PaymentInstrumentId,
                ProviderName = this.ProviderName,
                Partner = this.Partner,
                DeviceType = this.DeviceType,
                ThirdPartySeller = this.ThirdPartySeller,
                SellerOfRecord = this.SellerOfRecord,
                MerchantId = this.MerchantId,
                IssuerClassification = this.IssuerClassification,
                MerchantDescriptor = this.MerchantDescriptor,
                MerchantSupportInfo = this.MerchantSupportInfo,
                AuthenticationData = this.AuthenticationData,
                CallerName = this.CallerName,
                AccountId = this.AccountId,
            };
        }

        public PaymentTransaction Clone()
        {
            PaymentTransaction newPaymentTransaction = new PaymentTransaction
            {
                Id = this.Id,
                TransactionType = this.TransactionType,
                Timestamp = this.Timestamp,
                PaymentInstrumentId = this.PaymentInstrumentId,
                ReferenceTransactionId = this.ReferenceTransactionId,
                Partner = this.Partner,
                DeviceType = this.DeviceType,
                ThirdPartySeller = this.ThirdPartySeller,
                SellerOfRecord = this.SellerOfRecord,
                Amount = this.Amount != null ? this.Amount.Clone() : null,
                InitialTransactionAmount = this.InitialTransactionAmount != null ? this.InitialTransactionAmount.Clone() : null,
                TargetAmount = this.TargetAmount,
                Country = this.Country,
                SoldToCountry = this.SoldToCountry,
                Status = this.Status,
                RedirectContent = this.RedirectContent,
                RedirectContentType = this.RedirectContentType,
                SuccessUrl = this.SuccessUrl,
                FailureUrl = this.FailureUrl,
                PendingUrl = this.PendingUrl,
                MerchantId = this.MerchantId,
                GatewayMerchantId = this.GatewayMerchantId,
                IssuerClassification = this.IssuerClassification,
                ProviderName = this.ProviderName,
                RecurringTransaction = this.RecurringTransaction,
                RetryTransaction = this.RetryTransaction,
                MerchantReferenceNumber = this.MerchantReferenceNumber,
                MerchantDescriptor = this.MerchantDescriptor,
                MerchantSupportInfo = this.MerchantSupportInfo,
                RiskToken = this.RiskToken,
                TransactionConfirmation = this.TransactionConfirmation,
                SessionId = this.SessionId,
                IsIdempotentTransaction = this.IsIdempotentTransaction,
                RowVersion = this.RowVersion,
                CallerName = this.CallerName,
                StatusDetails = this.StatusDetails != null ? this.StatusDetails.Clone() : null,
                ReconciliationRecord = this.ReconciliationRecord != null ? this.ReconciliationRecord.Clone() : null,
                AuthenticationData = this.AuthenticationData != null ? this.AuthenticationData.Clone() : null,
                ExternalReference = this.ExternalReference != null ? this.ExternalReference.Clone() : null,
                TestContext = this.TestContext,
                AccountId = this.AccountId,
            };

            if (this.OrderLineItems != null)
            {
                foreach (OrderLineItem orderLineItem in this.OrderLineItems)
                {
                    newPaymentTransaction.OrderLineItems.Add(orderLineItem.Clone());
                }
            }

            // It is shallow copy of dictionary values.
            if (this.PaymentAdditionalData != null)
            {
                foreach (var data in this.PaymentAdditionalData)
                {
                    newPaymentTransaction.PaymentAdditionalData.Add(data.Key, data.Value);
                }
            }

            if (this.JournalAdditionalData != null)
            {
                foreach (var data in this.JournalAdditionalData)
                {
                    newPaymentTransaction.JournalAdditionalData.Add(data.Key, data.Value);
                }
            }

            return newPaymentTransaction;
        }

        public bool IsCrossCurrencySettlement()
        {
            object settlementModeObj;
            if (this.PaymentAdditionalData.TryGetValue(PaymentConstants.NamedPorperties.SettlementMode, out settlementModeObj))
            {
                SettlementMode settlementMode;
                if (Enum.TryParse<SettlementMode>(settlementModeObj.ToString(), out settlementMode))
                {
                    return settlementMode == SettlementMode.Foreign;
                }
            }

            return false;
        }
    }
}
