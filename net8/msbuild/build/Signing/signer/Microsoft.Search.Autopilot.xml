<?xml version="1.0"?>
<doc>
    <assembly>
        "microsoft.search.autopilot"
    </assembly>
    <members>
        <member name="M:apsdk.configuration.internal.ConfigurationWrapper.GetConfiguration">
Returns the current configuration.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationWrapper.op_Assign(apsdk.configuration.internal.ConfigurationWrapper!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need an assignment operator.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationWrapper.#ctor(apsdk.configuration.internal.ConfigurationWrapper!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need a copy constructor.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationWrapper.#ctor(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*)">
Constructs the wrapper around IConfiguration for
fallback processing.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationWrapper.#ctor(apsdk.configuration.internal.ConfigurationCollection!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.Configuration.Types)">
Constructs the wrapper.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationWrapper.m_config">
The configuration.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationWrapper.m_configType">
The configuration type.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationWrapper.m_fallback">
The configuration is fallback.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationWrapper.m_autoupdate">
The configuration is auto-update.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationWrapper.m_collection">
The configuration collection.

</member>
        <member name="T:apsdk.configuration.internal.ConfigurationWrapper">
 Configuration wrapper used for configuration access.

 The wrapper is used for configurations that need to be automatically
 updated with new values as the confguration changes.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.FileChangeNotify(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Void*)">
Receives file change notification.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.ConfigurationChanged(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*,apsdk.Ptr&lt;apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst&gt;)">
Receives a notification when the override is changed.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.ReadConfiguration">
Reads the configuration file.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.ProcessOverrideChange">
Process override change.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.ProcessConfigChange(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*)">
Process configuration change.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.SignalListeners(System.Boolean,apsdk.configuration.Configuration.Types)">
Signals a configuration change.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.RemoveListener(System.Void*)">
Removes a configuration change listener.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.SignalListeners(apsdk.configuration.Configuration.Types)">
Signals a configuration change.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.SignalListeners">
Signals a configuration change.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.UnregisterListener(System.Void*)">
Unregisters a configuration change listeners.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.RegisterListener(System.Boolean,System.Void*,apsdk.configuration.IConfigurationListener*,apsdk.configuration.Configuration.Types)">
 Registers a configuration change listener.

 Primary configuration listeners are signalled first.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.RawConfigurationExists">
 Returns true if there is a real raw configuration (fom file or in-memory config)


</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.SetConfiguration(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*)">
 Sets a new configuration.

 The configuration is dissociated from the pathname.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.GetConfiguration(apsdk.configuration.Configuration.Types,System.Boolean)">
            <summary>Returns the configuration depending on the type.</summary>
        </member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.IsEqual(apsdk.configuration.internal.ConfigurationCollection!System.Runtime.CompilerServices.IsConst*)">
 Compares this collection to another.

 Returns false if the collections are not equal.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.IsValid">
Determines if the collection is valid.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.GetPathname">
Returns the configuration pathname.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.GetName">
Returns the configuration name.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.op_Assign(apsdk.configuration.internal.ConfigurationCollection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need an assignment operator.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.#ctor(apsdk.configuration.internal.ConfigurationCollection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need a copy constructor.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Dispose">
The destructor.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Init(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Constructs the configuration collection.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.Ptr&lt;apsdk.configuration.internal.ConfigurationCollection&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerSe">
Constructs the configuration collection.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.CreateInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.Ptr&lt;apsdk.configuration.internal.ConfigurationCollection&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices">
Create Instance of configuration collection.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.CreateInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.Ptr&lt;apsdk.configuration.internal.ConfigurationCollection&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices">
Create Instance of configuration collection.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_inChangeNotify">
Processing change notification.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_leafConfiguration">
The configuration is a leaf.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_listeners">
The listeners.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_filtered">
 The primary filtered configuration.

 This is the primary configuration that should be used by
 all the configuration users.

 This configuration is overridden and filtered.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_unfiltered">
 The primary unfiltered configuration.

 This configuration is overridden but not filtered.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_rawFiltered">
 The raw filtered configuration.

 This configuration is filtered but not overridden.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_rawUnfiltered">
 The raw unfiltered configuration.

 This configuraiton is not filtered and not overridden.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_exists">
True if the configuration exists (was either loaded from a file or set as an in-memory configuration).

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_saveFileTime">
For FILETIME, the :: prefix is needed to disambiguate between FILETIME in minwindef.h and
System::Runtime::InteropServices::FILETIME, when this header file (via ConfigurationWarpper.h)
is included in a C++/CLI program.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_pathname">
The configuration pathname.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_name">
The configuration name.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_encrypted">
The configuration is encrypted.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_overrideHandle">
The override handle.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_override">
The override.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_filter">
The filter.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_overridePrefix">
The override prefix.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.m_empty">
An empty configuration.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.POLLING_INTERVAL">
The polling interval for configuration files in milliseconds.

</member>
        <member name="D:apsdk.configuration.internal.ConfigurationCollection.Listeners">
The collection of listeners.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Listener.DoesTypeMatch(apsdk.configuration.Configuration.Types)">
Determines if the type matches.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Listener.GetType">
Returns the type.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Listener.GetListener">
Returns the listener.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Listener.GetCookie">
Returns the cookie.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Listener.IsPrimary">
Determines if this is a primary listener.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Listener.GetCollection">
Returns the owner.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Listener.op_Assign(apsdk.configuration.internal.ConfigurationCollection.Listener!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need an assignment operator.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Listener.#ctor(apsdk.configuration.internal.ConfigurationCollection.Listener!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need a copy constructor.

</member>
        <member name="M:apsdk.configuration.internal.ConfigurationCollection.Listener.#ctor(apsdk.configuration.internal.ConfigurationCollection*,System.Boolean,System.Void*,apsdk.configuration.IConfigurationListener*,apsdk.configuration.Configuration.Types)">
Constructs the listener descriptor.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.Listener.m_type">
The type of signals to receive.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.Listener.m_listener">
The configuration change listener.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.Listener.m_cookie">
The cookie.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.Listener.m_primary">
The listener is a primary listener.

</member>
        <member name="F:apsdk.configuration.internal.ConfigurationCollection.Listener.m_collection">
The reference pointer to the owner collection.

</member>
        <member name="T:apsdk.configuration.internal.ConfigurationCollection.Listener">
The listener descriptor.

</member>
        <member name="T:apsdk.configuration.internal.ConfigurationCollection">
The configuration collection.

</member>
        <member name="M:apsdk.configuration.ConfigurationFilter.Filter(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IMutableConfiguration*)">
 Filters configuration.

 The destination configuration is cleared before any operations.

 Returns false if no filtering is performed.

</member>
        <member name="M:apsdk.configuration.ConfigurationFilter.Filter(apsdk.configuration.IMutableConfiguration*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Filters configuration.

 Returns a copy of the configuration that is filtered for
 the particular cluster and/or environment. If no filtering
 is performed, the same configuration is returned.

 If the section prefix is not NULL, the configuration
 sections are filtered by the section prefix and the section
 names are collapsed to be without the prefix.

</member>
        <member name="M:apsdk.configuration.ConfigurationFilter.Filter(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Filters configuration.

 Returns a copy of the configuration that is filtered for
 the particular cluster and/or environment. If no filtering
 is performed, the same configuration is returned.

 If the section prefix is not NULL, the configuration
 sections are filtered by the section prefix and the section
 names are collapsed to be without the prefix.

</member>
        <member name="M:apsdk.configuration.ConfigurationFilter.IsNoFiltering">
 Determines if NO filtering is going to be done.

 Returns true if filtering will not be done (i.e. both cluster and
 environment name are empty(.

</member>
        <member name="M:apsdk.configuration.ConfigurationFilter.op_Assign(apsdk.configuration.ConfigurationFilter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need an assignment operator.

</member>
        <member name="M:apsdk.configuration.ConfigurationFilter.#ctor(apsdk.configuration.ConfigurationFilter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need a copy constructor.

</member>
        <member name="M:apsdk.configuration.ConfigurationFilter.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 Constructs the configuration filter.

 If the cluster and environment are both NULL or empty,
 no filtering will be performed.

 If collapse is true, all the parameters that are qualified with
 non-matching cluster and/or environment will be removed using this
 filter.

</member>
        <member name="M:apsdk.configuration.ConfigurationFilter.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
 Constructs the configuration filter.

 If the cluster and environment are both NULL or empty,
 no filtering will be performed.

 If collapse is true, all the parameters that are qualified with
 non-matching cluster and/or environment will be removed using this
 filter.

</member>
        <member name="F:apsdk.configuration.ConfigurationFilter.m_noFilter">
No filtering.

</member>
        <member name="F:apsdk.configuration.ConfigurationFilter.m_collapse">
Collapse to plain values.

</member>
        <member name="F:apsdk.configuration.ConfigurationFilter.m_aggregateEnvironment">
The aggregate environment.
Optional parameter. Empty if no aggregate virtual environment defined

</member>
        <member name="F:apsdk.configuration.ConfigurationFilter.m_environment">
The environment.

</member>
        <member name="F:apsdk.configuration.ConfigurationFilter.m_cluster">
The cluster.

</member>
        <member name="T:apsdk.configuration.ConfigurationFilter">
 The configuration filter.

 The filter is applied to a configuration to filter out parameters
 that are not applicable to a target cluster and/or environment.

 The filter may retain "foreign" parameters that are not applicable
 to the target cluster and/or environment. This may be necessary to
 retain backward compatibility with code that relies on "foreign"
 parameters to be present. The filter must operate in "no collapse"
 mode to preserve "foreign" parameters.

 The filter will override weaker "acceptable" parameters with the
 "stronger" acceptable parameters. For example, if there is a
 parameter that is qualified by target cluster only and there is a
 "stronger" parameter qualified by cluster and environment, the 
 "stronger" parameter value will override the "weaker".
 The following are "strengths" of parameters in decreasing order:
    &lt;cluster&gt;&lt;environment&gt;&lt;name&gt; - "strongest" parameter
    &lt;environment&gt;&lt;name&gt;
    &lt;cluster&gt;&lt;name&gt;
    &lt;name&gt; - "weakest" parameter

</member>
        <member name="M:apsdk.configuration.ConfigurationBufferReader.ReadConfiguration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
 Reads a configuration buffer.

 Returns false if the configuration could not be read.

</member>
        <member name="M:apsdk.configuration.ConfigurationBufferReader.ReadConfiguration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Reads a configuration buffer from a string.

 Returns false if the configuration could not be read.

</member>
        <member name="M:apsdk.configuration.ConfigurationBufferReader.ReadConfiguration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.UInt64)">
 Reads a configuration buffer from a set of strings.

 Returns false if the configuration could not be read.

</member>
        <member name="M:apsdk.configuration.ConfigurationBufferReader.op_Assign(apsdk.configuration.ConfigurationBufferReader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need an assignment operator.

</member>
        <member name="M:apsdk.configuration.ConfigurationBufferReader.#ctor(apsdk.configuration.ConfigurationBufferReader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need a copy constructor.

</member>
        <member name="M:apsdk.configuration.ConfigurationBufferReader.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Constructs the configuration buffer reader.

</member>
        <member name="T:apsdk.configuration.ConfigurationBufferReader">
The configuration buffer reader.

</member>
        <member name="M:Microsoft.Search.Autopilot.FileConfiguration.Initialize(System.String,System.Boolean)">
            <summary>
Called as common method by both constructors because C++/CLI does
not support constructor forwarding.
</summary>
            <param name="filePath">
The path of the file to read.
</param>
            <param name="fileIsEncrypted">
Whether the file has been encrypted.
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.FileConfiguration.CreateNativeFileReader(System.String,System.Boolean)">
            <summary>
Creates a new native ConfigurationFileReader to proxy calls through.
</summary>
            <param name="filePath">
The path of the file to read.
</param>
            <param name="fileIsEncrypted">
Whether the file has been encrypted.
</param>
            <returns>
A reference to the new ConfigurationFileReader created with the specfied
parameters.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.FileConfiguration.#ctor(System.String,System.Boolean)">
            <summary>
Initializes a new instance of <see cref="T:Microsoft.Search.Autopilot.FileConfiguration" />.
</summary>
            <param name="filePath">
The path of the file to read.
</param>
            <param name="fileIsEncrypted">
Whether the file has been encrypted.
</param>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
If the file path could not be read correctly.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.FileConfiguration.#ctor(System.String)">
            <summary>
Initializes a new instance of <see cref="T:Microsoft.Search.Autopilot.FileConfiguration" />.
</summary>
            <param name="filePath">
The path of the file to read.
</param>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
If the file path could not be read correctly.
</exception>
        </member>
        <member name="T:Microsoft.Search.Autopilot.FileConfiguration">
            <summary>
This class serves as the entry point for accessing configuration 
settings stored within a disk based file.
</summary>
            <remarks>
This class corresponds to the ConfigurationFileReader in the native SDK.
</remarks>
        </member>
        <member name="M:apsdk.configuration.ConfigurationReader.Merge(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Merges a section.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.Complete">
Completes parsing.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.ParseParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Parses a property.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.ParseSectionDirective(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Parses a section directive.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.ParseSection(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Parses a section directive.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.ParseLine(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Parses a line.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.GetSourceLine">
Returns the source line.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.GetConfiguration">
Returns the configuration.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.GetSource">
Returns the source.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.op_Assign(apsdk.configuration.ConfigurationReader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need an assignment operator.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.#ctor(apsdk.configuration.ConfigurationReader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need a copy constructor.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.Dispose">
The destructor is virtual.

</member>
        <member name="M:apsdk.configuration.ConfigurationReader.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Constructs the configuration reader.

</member>
        <member name="F:apsdk.configuration.ConfigurationReader.m_sectionMerges">
The section merge directives.

</member>
        <member name="F:apsdk.configuration.ConfigurationReader.m_section">
The current section.

</member>
        <member name="F:apsdk.configuration.ConfigurationReader.m_configuration">
Resulting configuration.

</member>
        <member name="F:apsdk.configuration.ConfigurationReader.m_sourceLine">
The current source line.

</member>
        <member name="F:apsdk.configuration.ConfigurationReader.m_source">
The source of configuration.

</member>
        <member name="D:apsdk.configuration.ConfigurationReader.SectionDirectives">
Directives.

</member>
        <member name="D:apsdk.configuration.ConfigurationReader.Sections">
Sections.

</member>
        <member name="T:apsdk.configuration.ConfigurationReader.NameCmp">
Names are case insensitive.

</member>
        <member name="T:apsdk.configuration.ConfigurationReader">
The configuration reader.

</member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.EnableUnitTestMode">
            <summary>
Puts the library in unit test mode.
</summary>
            <remarks>In unit test mode, the certificates are not validated against any root authority.
In making this allowance, self-signed certificates are permitted.  Do not use this function
in production code.</remarks>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.ApSetUnitTestLookupAcl(System.String)">
            <summary>For testing only.  Sets the global ACL used to disambiguate certificates.</summary>
            <param name="apAcl">The AP ACL to use when looking up any future certificate.
By default, any valid certificate is returned.  This parameter is useful for
specifying a certificate to load in the event that several are available.</param>
            <remarks>ApLookupLocalCert uses the ACL provided only if unit test mode is enabled.
It otherwise ignores the incoming parameter.  Do not use this function in production
code.  The caller (unit test) is responsible for synchronizing calls of this function with
calls to ApLookupLocalCert.</remarks>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.IsValidAppkiCert(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
Checks if given cert is a valid APPKI cert.
</summary>
            <param name="cert">The given certificate to verify.</param>
            <returns>True if valid APPKI cert.</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.ApRegisterSslServerCert(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Int16,System.Net.IPAddress)">
            <summary>
Registers an HTTPS server SSL binding for the given port/IP address using the given certificate.
If the correct binding already exists for given port/IP address, this function will do nothing. 
If there is no existing binding, a new one will be created.
If a binding already exists using a different cert, the existing binding will be replaced with a new one. 
</summary>
            <param name="cert">The given certificate to bind.</param>
            <param name="port">The port on which the binding should be set. Should be specified in host order.</param>
            <param name="ipAddress">The IPv4 address on which the binding should be set. If 'IPAddress.Any', the 
binding will be applicable to all server IP addresses.</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.ApGetCertIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
Extracts identity from the specified cert that can be used for logging purposes.
Throws Win32Exception if error is encountered.
</summary>
            <param name="cert">The given certificate to extract identity from.</param>
            <returns>The identity from the certificate.</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.ApGetCertIdentityStr(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
Extracts identity from the specified cert that can be used for logging purposes.
Throws Win32Exception if error is encountered.
</summary>
            <param name="cert">The given certificate to extract identity from.</param>
            <returns>The identity from the certificate. If there are multiple identities, they will be 
comma separated.</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.ApLookupLocalCert(Microsoft.Search.Autopilot.ApAuthType,Microsoft.Search.Autopilot.ApLookupFlags)">
            <summary>
Looks up a local certificate that can be used for SSL authentication.
Throws Win32Exception if error is encountered during lookup.
</summary>
            <param name="authType">The cert auth type to look for.</param>
            <param name="lookupFlags">Flags to control the lookup logic.</param>
            <returns>The certificate that can be used for authentication.</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.ApLookupLocalCert(Microsoft.Search.Autopilot.ApAuthType)">
            <summary>
Looks up a local certificate that can be used for SSL authentication. Uses standard lookup logic.
Throws Win32Exception if error is encountered during lookup.
</summary>
            <param name="authType">The cert auth type to look for.</param>
            <returns>The certificate that can be used for authentication.</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.ApAuthorizeMachineFunctionIdentity(System.String,System.String)">
            <summary>
Authorizes a machine function identity against an AP ACL.
Call this method in case authenticity of an identity has been already verified.
Throws Win32Exception for authorization failure.
</summary>
            <param name="machineFunction">Machine function in &lt;mf&gt;.&lt;env&gt;.&lt;cluster&gt; format.</param>
            <param name="apAcl">An AP ACL to authorize against. For definitions of AP ACL, please see AP PKI autopilot wiki.
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.ApAuthorizeUserIdentity(System.String,System.String)">
            <summary>
Authorizes a user identity against an AP ACL.
Call this method in case authenticity of an identity has been already verified.
Throws Win32Exception for authorization failure.
</summary>
            <param name="userAlias">User alias without any domain prefix.</param>
            <param name="apAcl">An AP ACL to authorize against. For definitions of AP ACL, please see AP PKI autopilot wiki.
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.ApVerifyCert(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.DateTime)">
            <summary>
Performs certificate verification. Also authorizes the certificate identity against an AP ACL.
Call this method post SSL authentication to verify cert used by the remote side.
Throws Win32Exception for verification failure.
</summary>
            <param name="cert">The given certificate to verify.</param>
            <param name="apAcl">An AP ACL to authorize against. If ACL is '*', the function will only perform cert 
verification, and no authorization checks. For other definitions of AP ACL, please see AP PKI autopilot
wiki.</param>
            <param name="validityTimeUtc">Optional (UTC) time at which certificate should be valid. If 'MinValue',
validity is checked at current time. This parameter is useful for data signing scenarios.</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ApPkiClient.ApVerifyCert(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
Performs certificate verification. Also authorizes the certificate identity against an AP ACL.
Call this method post SSL authentication to verify cert used by the remote side.
Throws Win32Exception for verification failure.
</summary>
            <param name="cert">The given certificate to verify.</param>
            <param name="apAcl">An AP ACL to authorize against. If ACL is '*', the function will only perform cert 
verification, and no authorization checks. For other definitions of AP ACL, please see AP PKI autopilot
wiki.</param>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ApPkiClient">
            <summary>
Managed wrapper around the AP PKI helper functions.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApCertIdentity.MachineFunctionId">
            <summary>
Machine function identity (if identity type is ApCertIdentityType.MachineFunction).
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApCertIdentity.UserId">
            <summary>
User identity (if identity type is ApCertIdentityType.User).
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApCertIdentity.IdType">
            <summary>
Type of identity extracted from a given cert. Depending on the type, one of the members below will have data.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ApCertIdentity">
            <summary>
Identity extracted from an APPKI cert.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApMfCertIdentity.Cluster">
            <summary>
Cluster name.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApMfCertIdentity.VirtualEnvironments">
            <summary>
Virtual environment names.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApMfCertIdentity.PhysicalEnvironment">
            <summary>
Physical environment name.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApMfCertIdentity.MachineFunction">
            <summary>
Machine function name.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApMfCertIdentity.Machine">
            <summary>
Machine name.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ApMfCertIdentity">
            <summary>
Identity extracted from an APPKI machine function cert.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApUserCertIdentity.UserAlias">
            <summary>
User alias.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ApUserCertIdentity">
            <summary>
Identity extracted from an APPKI user cert.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ApCertIdentityType">
            <summary>
Type of identity extracted from an APPKI cert.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApCertIdentityType.MachineFunction">
            <summary>
Corresponds to machine function cert identity.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApCertIdentityType.User">
            <summary>
Corresponds to user cert identity.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ApLookupFlags">
            <summary>
Flags that control the cert lookup logic.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApLookupFlags.MfCertOnly">
            <summary>
Indicates that the lookup must always return the machine function cert from the local machine cert
store irrespective of the account under which the caller is running (service or user account).
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApLookupFlags.Standard">
            <summary>
Indicates that the standard lookup logic should be used. The standard logic returns a machine function
cert from the local machine cert store if caller is running under a service account (LocalSystem,
NetworkService, or LocalService), or a user cert from the user cert store otherwise.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ApAuthType">
            <summary>
Type of cert auth.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApAuthType.Server">
            <summary>
Corresponds to a server auth cert.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ApAuthType.Client">
            <summary>
Corresponds to a client auth cert.
</summary>
        </member>
        <member name="M:apsdk.security.ApSetUnitTestLookupAcl(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>For testing only.  Sets the global ACL used to disambiguate certificates.</summary>
            <param name="acl">The AP ACL to use when looking up any future certificate.
By default, any valid certificate is returned.  This parameter is useful for
specifying a certificate to load in the event that several are available.</param>
            <remarks>ApLookupLocalCert uses the ACL provided only if unit test mode is enabled.
It otherwise ignores the incoming parameter.  Do not use this function in production
code.  The caller (unit test) is responsible for synchronizing calls of this function with
calls to ApLookupLocalCert.</remarks>
        </member>
        <member name="M:apsdk.security.EnableUnitTestMode">
            <summary>
Puts the library in unit test mode.
</summary>
            <remarks>In unit test mode, the certificates are not validated against any root authority.
In making this allowance, self-signed certificates are permitted.  Do not use this function
in production code.</remarks>
        </member>
        <member name="M:apsdk.security.ApAuthorizeMachineFunctionIdentity(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Authorizes a machine function identity against an AP ACL.
Call this method in case authenticity of an identity has been already verified.
</summary>
            <param name="machineFunction">Machine function in &lt;mf&gt;.&lt;env&gt;.&lt;cluster&gt; format.</param>
            <param name="apAcl">An AP ACL to authorize against. For definitions of AP ACL, please see AP PKI autopilot wiki.</param>
            <returns>Win32 error code. ERROR_SUCCESS if verification succeeded.</returns>
        </member>
        <member name="M:apsdk.security.ApAuthorizeUserIdentity(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Authorizes a user identity against an AP ACL.
Call this method in case authenticity of an identity has been already verified.
</summary>
            <param name="userAlias">User alias without any domain prefix.</param>
            <param name="apAcl">An AP ACL to authorize against. For definitions of AP ACL, please see AP PKI autopilot wiki.</param>
            <returns>Win32 error code. ERROR_SUCCESS if verification succeeded.</returns>
        </member>
        <member name="M:apsdk.security.IsValidAppkiCert(_CERT_CONTEXT!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Checks if given cert is a valid APPKI cert.
</summary>
            <param name="cert">The given certificate to verify.</param>
            <returns>True if valid APPKI cert.</returns>
        </member>
        <member name="M:apsdk.security.ApRegisterSslServerCert(_CERT_CONTEXT!System.Runtime.CompilerServices.IsConst*,System.UInt16,System.UInt32)">
            <summary>
Registers an HTTPS server SSL binding for the given port/IP address using the given certificate.
If the correct binding already exists for given port/IP address, this function will do nothing. 
If there is no existing binding, a new one will be created.
If a binding already exists using a different cert, the existing binding will be replaced with a new one. 
</summary>
            <param name="cert">The given certificate to bind.</param>
            <param name="port">The port on which the binding should be set. Should be specified in host order.</param>
            <param name="ipAddress">The IPv4 address on which the binding should be set. If zero (default), the binding
 will be applicable to all server IP addresses. Should be specified in host order.</param>
            <returns>Win32 error code. ERROR_SUCCESS if successful.</returns>
        </member>
        <member name="M:apsdk.security.ApGetCertIdentityStr(_CERT_CONTEXT!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Extracts identity from the specified cert in a string form that can be used for logging purposes.
</summary>
            <param name="cert">The given certificate to extract identity from.</param>
            <param name="identityStr">The identity from the certificate. If there are multiple identities, they will be 
comma separated.</param>
            <returns>Win32 error code. ERROR_SUCCESS if sucessful.</returns>
        </member>
        <member name="M:apsdk.security.ApGetCertIdentity(_CERT_CONTEXT!System.Runtime.CompilerServices.IsConst*,apsdk.security.ApCertIdentity*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Extracts identity from the specified cert in a structured form that can be used for logging purposes.
</summary>
            <param name="cert">The given cert to extract identity from.</param>
            <param name="identity">The identity extracted from the cert.</param>
            <returns>Win32 error code.</returns>
        </member>
        <member name="M:apsdk.security.ApLookupLocalCert(apsdk.security.ApAuthType,_CERT_CONTEXT!System.Runtime.CompilerServices.IsConst**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,apsdk.security.ApLookupFlags)">
            <summary>
Looks up a local certificate that can be used for SSL authentication.
</summary>
            <param name="authType">The cert auth type to look for.</param>
            <param name="cert">The certificate that can be used for authentication. Caller must free the certificate using
CertFreeCertificateContext() method.</param>
            <param name="lookupFlags">Flags to control the lookup logic. Default value corresponds to the standard lookup
logic.</param>
            <returns>Win32 error code. ERROR_SUCCESS if no error was encountered during lookup. CRYPT_E_NOT_FOUND if no 
certificate was found.</returns>
        </member>
        <member name="M:apsdk.security.ApVerifyCert(_CERT_CONTEXT!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,_FILETIME!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Performs certificate verification. Also authorizes the certificate identity against an AP ACL.
Call this method post SSL authentication to verify cert used by the remote side.
</summary>
            <param name="cert">The given certificate to verify.</param>
            <param name="apAcl">An AP ACL to authorize against. If ACL is '*', the function will only perform cert 
verification, and no authorization checks. For other definitions of AP ACL, please see AP PKI autopilot wiki.
</param>
            <param name="validityTimeUtc">Optional (UTC) time at which certificate should be valid. If nullptr (default),
validity is checked at current time. This parameter is useful for data signing scenarios.</param>
            <returns>Win32 error code. ERROR_SUCCESS if verification succeeded.</returns>
        </member>
        <member name="F:apsdk.security.ApCertIdentity.machineFunctionId">
            <summary>
Machine function identity (if identity type is ApCertIdentityType_machineFunction).
</summary>
        </member>
        <member name="F:apsdk.security.ApCertIdentity.userId">
            <summary>
User identity (if identity type is ApCertIdentityType_user).
</summary>
        </member>
        <member name="F:apsdk.security.ApCertIdentity.idType">
            <summary>
Type of identity extracted from a given cert. Depending on the type, one of the members below will have data.
</summary>
        </member>
        <member name="T:apsdk.security.ApCertIdentity">
            <summary>
Identity extracted from an APPKI cert.
</summary>
        </member>
        <member name="F:apsdk.security.ApMfCertIdentity.cluster">
            <summary>
Cluster name.
</summary>
        </member>
        <member name="F:apsdk.security.ApMfCertIdentity.virtualEnvironments">
            <summary>
Virtual environment names.
</summary>
        </member>
        <member name="F:apsdk.security.ApMfCertIdentity.physicalEnvironment">
            <summary>
Physical environment name.
</summary>
        </member>
        <member name="F:apsdk.security.ApMfCertIdentity.machineFunction">
            <summary>
Machine function name.
</summary>
        </member>
        <member name="F:apsdk.security.ApMfCertIdentity.machine">
            <summary>
Machine name.
</summary>
        </member>
        <member name="T:apsdk.security.ApMfCertIdentity">
            <summary>
Identity extracted from an APPKI machine function cert.
</summary>
        </member>
        <member name="F:apsdk.security.ApUserCertIdentity.userAlias">
            <summary>
User alias.
</summary>
        </member>
        <member name="T:apsdk.security.ApUserCertIdentity">
            <summary>
Identity extracted from an APPKI user cert.
</summary>
        </member>
        <member name="M:apsdk.security.str_less.op_FunctionCall(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Compares two strings.
</summary>
            <param name="s1">First string to compare.</param>
            <param name="s2">Second string to compare.</param>
            <returns>True if s1 is less than s2.</returns>
        </member>
        <member name="T:apsdk.security.str_less">
            <summary>
Comparator for case-insensitive STL structures.
</summary>
        </member>
        <member name="T:apsdk.security.ApCertIdentityType">
            <summary>
Type of identity extracted from an APPKI cert.
</summary>
        </member>
        <member name="F:ApCertIdentityType_machineFunction">
            <summary>
Corresponds to machine function cert identity.
</summary>
        </member>
        <member name="F:ApCertIdentityType_user">
            <summary>
Corresponds to user cert identity.
</summary>
        </member>
        <member name="T:apsdk.security.ApLookupFlags">
            <summary>
Flags that control the cert lookup logic.
</summary>
        </member>
        <member name="F:ApLookupFlag_mfCertOnly">
            <summary>
Indicates that the lookup must always return the machine function cert from the local machine cert
store irrespective of the account under which the caller is running (service or user account).
</summary>
        </member>
        <member name="F:ApLookupFlag_standard">
            <summary>
Indicates that the standard lookup logic should be used. The standard logic returns a machine function
cert from the local machine cert store if caller is running under a service account (LocalSystem,
NetworkService, or LocalService), or a user cert from the user cert store otherwise.
</summary>
        </member>
        <member name="T:apsdk.security.ApAuthType">
            <summary>
Type of cert auth.
</summary>
        </member>
        <member name="F:ApAuthType_server">
            <summary>
Corresponds to a server auth cert.
</summary>
        </member>
        <member name="F:ApAuthType_client">
            <summary>
Corresponds to a client auth cert.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ExternalCounter">
            <summary>
Wrapper of ExternalCounters class in APSDK.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt64Counter.GetValue(System.String)">
            <summary>
Call this function to get a value of an instance.
</summary>
            <param name="instanceName">instanceName</param>
            <returns>The value of an instance</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt64Counter.DecrementBy(System.UInt64,System.String)">
            <summary>
Call this function to subtract a value onto the counter
</summary>
            <param name="counterValue">counterValue</param>
            <param name="instanceName">instanceName</param>
            <returns>true for success, false for failure. The failure is usually due to too many instances for this counter</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt64Counter.IncrementBy(System.UInt64,System.String)">
            <summary>
Call this function to add a value onto the counter
</summary>
            <param name="counterValue">counterValue</param>
            <param name="instanceName">instanceName</param>
            <returns>true for success, false for failure. The failure is usually due to too many instances for this counter</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt64Counter.Decrement(System.String)">
            <summary>
Call this to just decrement the counter by one.
This function will update min/max/average and other such values as appropriate.
</summary>
            <param name="instanceName">instanceName</param>
            <returns>true for success, false for failure. The failure is usually due to too many instances for this counter</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt64Counter.Increment(System.String)">
            <summary>
  Call this to just increment the counter by one
 This function will update min/max/average and other such values as appropriate
</summary>
            <param name="instanceName">instance Name</param>
            <returns>true for success, false for failure. The failure is usually due to too many instances for this counter</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt64Counter.#ctor(System.String,System.String,Microsoft.Search.Autopilot.CounterFlag)">
            <summary>
 Constructor
</summary>
            <param name="sectionName">section Name</param>
            <param name="counterName">counter Name</param>
            <param name="flags">counter flags</param>
        </member>
        <member name="T:Microsoft.Search.Autopilot.UInt64Counter">
            <summary>
Wrapper of UInt64Counter class in APSDK.
</summary>
        </member>
        <member name="M:apsdk.SysInfo.IsIndexServerType(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return true if this is among IndexServingTypeNames
</member>
        <member name="T:apsdk.Config">
DEPRECATED
The configuration class.

</member>
        <member name="T:apsdk.ConfigSubscribeInfo">
DEPRECATED
The configuration change notify function.


DEPRECATED
The configuration change notify subscription information.

</member>
        <member name="D:apsdk.ConfigChangeNotifyCookie">
DEPRECATED
The configuration change notify cookie.

</member>
        <member name="M:apsdk.ConfigParser.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.Ptr&lt;apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,apsdk.ConfigParser*)">
Constructs the parser.

</member>
        <member name="T:apsdk.ConfigParser">
DEPRECATED
The configuration parser.

</member>
        <member name="T:apsdk.ConfigFileNames">
DEPRECATED
The configuration file.

</member>
        <member name="T:apsdk.ConfigSectionEnumerator">
 DEPRECATED
 Allows iteration over all the members of a configuration section.

 Note that the Next and NextPair methods return a pointer to internal
 fields.

</member>
        <member name="T:apsdk.ConfigNameValuePair">
 DEPRECATED
 Represents a single name-value pair defined in the config file.

 The user of this deprecated class may elect to manipulate the public
 members directly.

</member>
        <member name="T:apsdk.ConfigItem">
 DEPRECATED
 Represents a single name-value pair defined in the config file.

 This is a very restricted representation since it limits the size of the
 configuration name and value.

 The user of this deprecated class may elect to manipulate the public
 members directly.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.ComposeOverrideSection(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Composes an override section name.

 If the @a applicationName or the @a configurationName is NULL or
 empty, it is not used.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.ComposeOverridePrefix(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Composes an override section prefix.

 If the @a applicationName or the @a configurationName is NULL or
 empty, it is not used.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.BreakOverrideSection(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDer">
 Breaks an override section name into its components parts.

 If only one token is found, it is assigned to the sectionPart
 If two tokens are found, the first is assigned to the configurationPart,
      and the second is assigned to the sectionPart
 If all three tokens are found, they will all be assigned to

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.ComposeParameterName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Composes a parameter name from component names.

 If the @a clusterPart or the @a environmentPart is NULL or
 empty, it is not used.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.BreakParameterName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDeref">
 Separates a parameter name into component names.

 The parameter name is broken down into the cluster, environment,
 and plain parameter name components.

 @return @c false if the original parameter name has a bad format.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.Utf8ToWide(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
 Converts a UTF8 string to WCHAR unicode (UTF16). Cannot fail (Asserts if windows complains)

 If the input string is NULL, produces an empty string (too bad stl strings can't be NULL).

 If the length is not given, it is obtained with strlen.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.WideToUtf8(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
 Converts a WCHAR unicode (UTF16) string to UTF8. Cannot fail (Asserts if windows complains)

 If the input string is NULL, produces an empty string (too bad stl strings can't be NULL).

 If the length is not given, it is obtained with wstrlen.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.GetEnvironmentVar(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Fetches an environment variable (UTF8 encoding).

 If the variable does not exist, uses defaultValue defaultValue it is not NULL, or fails with GetLastError() == ERROR_ENVVAR_NOT_FOUND otherwise. 

 If not supplied, an empty string is used as defaultValue, which is unambiguous since existent environment variables cannot be empty.

 returns false with GetLastError() if the operation fails.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.GetCurrentExeDirectoryA(System.UInt32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
 Works just like GetCurrentDirectory, except gets the directory that the running EXE
 resides in rather than the current working directory.

 See Windows documentation for GetCurrentDirectory

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.NormalizeSlashes(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Converts '/' to '\\' and removes trailing backslashes from pathnames

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.GetDirectoryName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Extracts a directory name from a pathname.

 The provided pathname must contan the directory parts, or "." is returned.

 Returns false if there was an error.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.GetDirectoryName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Extracts a directory name from a pathname.

 The provided pathname must contan the directory parts, or "" and false is returned.

 Returns false if there was an error.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.GetFilename(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Extracts a fle name from a file pathname.

 The provided pathname may or may not contian directory parts.
 Only the file name and file extension are extracted.

 Returns false if there was an error.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.GetFilename(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Extracts a fle name from a file pathname.

 The provided pathname may or may not contian directory parts.
 Only the file name and file extension are extracted.

 Returns false if there was an error.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.FilePathnameExists(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Returns true if the specified fully qualified pathname exists

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.NormalizePathname(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Normalizes a file pathname.

 The provided pathname is normalized (fully qualified).
 All the slashes (/) are converted to backslashes (\).

 Returns false if there was an error.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.NormalizePathname(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Normalizes a file pathname.

 The provided pathname is combined with the directory to provide
 a normalized (fully qualified) file pathname.
 If pathname is already fully qualified, the directory is ignored.
 Unless pathname is already fully qualified and directory is NULL,
 the current directory is used.

 Returns false if there was an error.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.NormalizePathname(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Normalizes a file pathname.

 The provided pathname is normalized (fully qualified).
 All the slashes (/) are converted to backslashes (\).

 Returns false if there was an error.

</member>
        <member name="M:apsdk.configuration.ConfigurationUtil.NormalizePathname(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Normalizes a file pathname.

 The provided pathname is normalized (fully qualified).
 All the slashes (/) are converted to backslashes (\).

 Returns false if there was an error.

</member>
        <member name="T:apsdk.configuration.ConfigurationUtil">
Configuration utility class.

</member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.ValidateConfigurationValueParameters(System.String,System.String)">
            <summary>
Validates a section name and key were specified.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <exception cref="T:System.ArgumentNullException">
Gets thrown if the section name or key are null.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.ValidateSectionNameParameter(System.String)">
            <summary>
Validates a section name was specified.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <exception cref="T:System.ArgumentNullException">
Gets thrown if the section name is null.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetDateTimeValue(System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as a <see cref="T:System.DateTime" />.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetDoubleValue(System.String,System.String,System.Double,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as a double.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetSingleValue(System.String,System.String,System.Single,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as a single.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetUInt64Value(System.String,System.String,System.UInt64,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as an unsigned 64-bit integer.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetUInt32Value(System.String,System.String,System.UInt32,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as an unsigned 32-bit integer.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetUInt16Value(System.String,System.String,System.UInt16,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as an unsigned 16-bit integer.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetInt64Value(System.String,System.String,System.Int64,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as a 64-bit integer.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetInt32Value(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as a 32-bit integer.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetInt16Value(System.String,System.String,System.Int16,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as a 16-bit integer.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetBoolValue(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as a boolean value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetStringValue(System.String,System.String,System.String,System.Boolean)">
            <summary>
Gets the requested value based on the specified section name and key.
</summary>
            <param name="sectionName">
The name of the section to search within.
</param>
            <param name="key">
The name of the key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not located.
</param>
            <param name="throwsIfNotFound">
Whether or not to throw an <see cref="T:Microsoft.Search.Autopilot.APException" /> if the key
cannot be located.
</param>
            <returns>
The requested value as a string.
</returns>
        </member>
        <member name="F:Microsoft.Search.Autopilot.Configuration.configuration">
            <summary>
Holds an auto pointer to the native IConfiguration.  This is the
object that all the calls are proxied through.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.Configuration.reader">
            <summary>
Holds a reference to the underlying native ConfigurationReader.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.Configuration.isDisposed">
            <summary>
Whether or not this method has been disposed yet.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.Configuration.ConfigurationValueNotFoundMessage">
            <summary>
The message that will be sent to the <see cref="T:Microsoft.Search.Autopilot.APException" /> if a key could not
be located.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.Finalize">
            <summary>
Implementing the finalizer to clean up any unmanaged resources.
Using this in combination with the destructor is the same
as implementing the IDispose interface.
</summary>
        </member>
        <member name="P:Microsoft.Search.Autopilot.Configuration.Reader">
            <summary>
Holds the native pointer to the underlying ConfigurationReader
object.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.#ctor">
            <summary>
Initializes a new instance of <see cref="T:Microsoft.Search.Autopilot.Configuration" />.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.#ctor(apsdk.Ptr&lt;apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Creates a new managed configuration based on the specified native
IConfiguration.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.Dispose">
            <summary>
Releases all native resources.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.ToString">
            <summary>
Returns a string representation of the configuration.
</summary>
            <remarks>
Provides a user friendly view of the sections and all
the settings it contains.
</remarks>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetDateTimeValue(System.String,System.String,System.DateTime)">
            <summary>
Gets the value of a key as a DateTime.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a DateTime if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetDateTimeValue(System.String,System.String)">
            <summary>
Gets the value of a key as a DateTime.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a DateTime if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetDoubleValue(System.String,System.String,System.Double)">
            <summary>
Gets the value of a key as a double.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a double if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetDoubleValue(System.String,System.String)">
            <summary>
Gets the value of a key as a double.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a double if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetSingleValue(System.String,System.String,System.Single)">
            <summary>
Gets the value of a key as a single.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a single if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetSingleValue(System.String,System.String)">
            <summary>
Gets the value of a key as a single.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a single if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetUInt64Value(System.String,System.String,System.UInt64)">
            <summary>
Gets the value of a key as an unsigned 64 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as an unsigned 64 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetUInt64Value(System.String,System.String)">
            <summary>
Gets the value of a key as an unsigned 64 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as an unsigned 64 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetUInt32Value(System.String,System.String,System.UInt32)">
            <summary>
Gets the value of a key as an unsigned 32 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as an unsigned 32 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetUInt32Value(System.String,System.String)">
            <summary>
Gets the value of a key as an unsigned 32 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as an unsigned 32 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetUInt16Value(System.String,System.String,System.UInt16)">
            <summary>
Gets the value of a key as an unsigned 16 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as an unsigned 16 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetUInt16Value(System.String,System.String)">
            <summary>
Gets the value of a key as an unsigned 16 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as an unsigned 16 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetInt64Value(System.String,System.String,System.Int64)">
            <summary>
Gets the value of a key as a 64 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a 64 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetInt64Value(System.String,System.String)">
            <summary>
Gets the value of a key as a 64 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a 64 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetInt32Value(System.String,System.String,System.Int32)">
            <summary>
Gets the value of a key as a 32 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a 32 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetInt32Value(System.String,System.String)">
            <summary>
Gets the value of a key as a 32 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a 32 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetInt16Value(System.String,System.String,System.Int16)">
            <summary>
Gets the value of a key as a 16 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a 16 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetInt16Value(System.String,System.String)">
            <summary>
Gets the value of a key as a 16 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a 16 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetBoolValue(System.String,System.String,System.Boolean)">
            <summary>
Gets the value of a key as a bool.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a bool if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetBoolValue(System.String,System.String)">
            <summary>
Gets the value of a key as a bool.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a bool if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetStringValueAndSplit(System.String,System.String,System.String)">
            <summary>
Gets the value of a key as a string and splits it based on the specified separator.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="separator">
The characters that separate each element in the list.
</param>
            <returns>
The value of the key as a split string if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetStringValue(System.String,System.String,System.String)">
            <summary>
Gets the value of a key as a string.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a string if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetStringValue(System.String,System.String)">
            <summary>
Gets the value of a key as a string.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a string if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetSectionKeyCount(System.String)">
            <summary>
Gets the number of keys within the given section.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <returns>
The count of keys within the given section.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.GetSectionKeys(System.String)">
            <summary>
Gets all the keys within the specified section.
</summary>
            <param name="sectionName">
The name of section to search within.
</param>
            <returns>
The keys contained within a string array or a zero element array
if no keys are present.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.KeyExists(System.String,System.String)">
            <summary>
Searches for the given key within the specified section.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
True/False based on if the key exists in the given section.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.Configuration.SectionExists(System.String)">
            <summary>
Searches for the specified section.
</summary>
            <param name="sectionName">
The section name to be checked for existence.
</param>
            <returns>
True/False based on if the section exists.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.Configuration.SectionCount">
            <summary>
Gets the number of sections within the configuration.
</summary>
            <returns>
The count of sections in the configuration.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.Configuration.Sections">
            <summary>
Gets all the sections within the configuration.
</summary>
            <returns>
The section names contained within a string array or a zero element array
if no sections are present.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.Configuration.NativeIConfiguration">
            <summary>
Holds the native pointer to the underlying IConfiguration
object.  This will be used to proxy all the GetXParameter
calls through.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.Configuration">
            <summary>
Provides a way to utilized the Autopilot Configuration SDK from managed code.  This
class serves as the base for any specialized configuration data stores such as the
ConfigurationFileReader.
</summary>
            <remarks>
This class corresponds to the ConfigurationReader in the native SDK.  Additionally,
it wraps up most the calls provided by the IConfiguration class.
</remarks>
        </member>
        <member name="M:apsdk.configuration.ConfigurationMap.FindMutableParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Finds a mutable parameter.

 Returns NULL if the parameter could not be found.

</member>
        <member name="M:apsdk.configuration.ConfigurationMap.FindParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Finds a parameter.

 Returns NULL if the parameter could not be found.

</member>
        <member name="M:apsdk.configuration.ConfigurationMap.GetInternalStringParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
A very dangerous method that is available for backward
compatibility. Please do not use.

</member>
        <member name="M:apsdk.configuration.ConfigurationMap.op_Assign(apsdk.configuration.ConfigurationMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need an assignment operator.

</member>
        <member name="M:apsdk.configuration.ConfigurationMap.#ctor(apsdk.configuration.ConfigurationMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need a copy constructor.

</member>
        <member name="M:apsdk.configuration.ConfigurationMap.#ctor(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Constructs a map from a configuration.

 If section prefix is not NULL, the source sections that
 do not have the prefix will not be used, also the source
 sections that have the prefix will be renamed to contain no
 prefix (i.e. the prefix will be removed from the section name).

</member>
        <member name="M:apsdk.configuration.ConfigurationMap.#ctor">
Constructs the map.

</member>
        <member name="F:apsdk.configuration.ConfigurationMap.m_sections">
The map of sections.

</member>
        <member name="T:apsdk.configuration.ConfigurationMap.Sections">
The sections.

</member>
        <member name="D:apsdk.configuration.ConfigurationMap.SectionList">
The list of sections.

</member>
        <member name="D:apsdk.configuration.ConfigurationMap.SectionMap">
The map of sections.

</member>
        <member name="T:apsdk.configuration.ConfigurationMap.Params">
The parameters.

</member>
        <member name="D:apsdk.configuration.ConfigurationMap.ParamMap">
The map of parameters.

</member>
        <member name="T:apsdk.configuration.ConfigurationMap.NameCmp">
Names are case insensitive.

</member>
        <member name="M:Microsoft.Search.Autopilot.SvcMgrClient.ClearTierGate">
            <summary>
Provide gate clearance signal to LOCAL service manager for a service participating in tiers
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.SvcMgrClient.Send(System.String)">
            <summary>
Send command to Service Manager on a specific machines. Note that some commands may only
target local ServiceManager.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.SvcMgrClient.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
SvcMgrClient Constructor
</summary>
            <param name="machine">Name of the target machine</param>
            <param name="sendTimeout">Send timeout in milliseconds</param>
            <param name="recvTimeout">Receive timeout in milliseconds</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.SvcMgrClient.#ctor(System.String)">
            <summary>
SvcMgrClient Constructor
</summary>
            <param name="machine">Name of the target machine</param>
        </member>
        <member name="T:Microsoft.Search.Autopilot.SvcMgrClient">
            <summary>
Wrapper of native SvcMgrClient. A helper class to send commands to Service Manager
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ISvcMgrClient">
            <summary>
Minimal interface required for clients to send requests to Service Manager
Abstracted to an interface to facilitate mocking/testing without a need to run a real Service Manager
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.SvcMgrResponse">
            <summary>
Response for SvcMgrClient command
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt32Counter.GetValue(System.String)">
            <summary>
Call this function to get a value of an instance.
</summary>
            <param name="instanceName">instanceName</param>
            <returns>The value of an instance</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt32Counter.DecrementBy(System.UInt32,System.String)">
            <summary>
Call this function to subtract a value onto the counter
</summary>
            <param name="counterValue">counterValue</param>
            <param name="instanceName">instanceName</param>
            <returns>true for success, false for failure. The failure is usually due to too many instances for this counter</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt32Counter.IncrementBy(System.UInt32,System.String)">
            <summary>
Call this function to add a value onto the counter
</summary>
            <param name="counterValue">counterValue</param>
            <param name="instanceName">instanceName</param>
            <returns>true for success, false for failure. The failure is usually due to too many instances for this counter</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt32Counter.Decrement(System.String)">
            <summary>
Call this to just decrement the counter by one
</summary>
            <param name="instanceName">instance Name</param>
            <returns>true for success, false for failure. The failure is usually due to too many instances for this counter</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt32Counter.Increment(System.String)">
            <summary>
  Call this to just increment the counter by one
 This function will update min/max/average and other such values as appropriate
</summary>
            <param name="instanceName">instance Name</param>
            <returns>true for success, false for failure. The failure is usually due to too many instances for this counter</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt32Counter.Set(System.UInt32,System.String)">
            <summary>
Call this to set the counter to an unsigned int value
This function will update min/max/average and other such values as appropria
</summary>
            <param name="counterValue">counterValue</param>
            <param name="instanceName">instanceName</param>
            <returns>true for success, false for failure. The failure is usually due to too many instances for this counter</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.UInt32Counter.#ctor(System.String,System.String,Microsoft.Search.Autopilot.CounterFlag)">
            <summary>
 Constructor
</summary>
            <param name="sectionName">section Name</param>
            <param name="counterName">counter Name</param>
            <param name="flags">counter flags</param>
        </member>
        <member name="T:Microsoft.Search.Autopilot.UInt32Counter">
            <summary>
Wrapper of UInt32Counter class in APSDK.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.CounterFlag">
            <summary>
Enumeration that represents the Counter flag type
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.CounterFlag.Number_Percentiles">
            <summary>
If this flag is set, it indicates the counter is a number counter and percentiles will be collected
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.CounterFlag.Rate">
            <summary>
If this flag is set, it indicates the counter is an increasing number, and the snoop tool
will publish the counter's rate (i.e. divide the end value minus start value, by the elapsed time)
Example uses for this would be something like # URLs traversed; e.g. 1500 urls/sec
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.CounterFlag.Number">
            <summary>
 If this flag is set, it indicates the counter is just a number, and the snoop tool will
 publish the counter's running average value (i.e. divide the sum of all counter values by the
 number of changes to the counter)
 Example uses for this would be something like CPU usage; e.g. 65% average cpu
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.CounterFlag.None">
            <summary>
Default counter flag value.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ManagedDMClient.handler">
            <summary>
handler is the delegate used by user for customized response handling
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ManagedDMClient.isDisposed">
            <summary>
shows whether client object has been disposed
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ManagedDMClient.dmClientCallbackHandler">
            <summary>
points to the unmanaged handler class that will receive
callbacks from the native DMClient
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ManagedDMClient.client">
            <summary>
points to the unmanaged DMClient object
</summary>
        </member>
        <member name="P:Microsoft.Search.Autopilot.ManagedDMClient.ResponseHandler">
            <summary>
Gets or sets response handler
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.SendRequestAsync(System.String,System.Byte[],System.Boolean,System.String)">
            <summary>
Sends a synchronous asynchronously
</summary>
            <param name="command">The command to execute.</param>
            <param name="uploadBuffer">The (optional) payload to upload for the command.</param>
            <param name="readOnly">True if the command does not change DM server state (data). False if it does.</param>
            <param name="traceId">A unique identifier that can be assigned to this request, which can be used in
correlating log statements.</param>
            <returns>A Task which will provide the response from DM, once the request is processed.</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.SendRequestAsync(System.String,System.Byte[],System.Boolean)">
            <summary>
Sends a command asynchronously.
</summary>
            <param name="command">The command to execute.</param>
            <param name="uploadBuffer">The (optional) payload to upload for the command.</param>
            <param name="readOnly">True if the command does not change DM server state (data). False if it does.</param>
            <returns>A Task which will provide the response from DM, once the request is processed. If DM returns an error, the 
response object will contain the error code. If the request fails to be sent, the Response object returned
in the Task Result will be NULL.</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.SendRequest(System.String,System.Boolean)">
            <summary>
Send a DM command that has no upload requirement
</summary>
            <param name="command">
String of DM command
</param>
            <param name="readOnly">
True if the command does not change DM server state(data). False if it does not.
</param>
            <returns>
On success request, it will return a response object which carries response string and status code.
If the request fails to be sent or connection is dropped before response coming back, a null object
will be returned.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.SendRequest(System.String,System.String)">
            <summary>
Send a DM command that needs upload a data file
</summary>
            <remarks>
Use this interface only need to upload data file for the command. Otherwise, exception will throw
with null upload file path.
</remarks>
            <param name="command">
String of DM command
</param>
            <param name="uploadFilePath">
The full file path to the upload data file. If you supply a NULL file path, then exception will be thrown.
</param>
            <returns>
On success request, it will return a response object which carries response string and status code.
If the request fails to be sent or connection is dropped before response coming back, a null object
will be returned.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.SendRequest(System.String,System.Byte[],System.Boolean)">
            <summary>
Send DM command to DM server
</summary>
            <param name="command">
String of DM command.
</param>
            <param name="uploadBuffer">
Upload buffer for DM Command if needed
</param>
            <param name="readOnly">
True if the command does not change DM server state (data). False if it does not.
</param>
            <returns>
On success request, it will return a response object which carries response string and status code.
If the request fails to be sent or connection is dropped before response coming back, a null object
will be returned.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.#ctor(System.Collections.Generic.ICollection`1{System.String},System.Int16,System.Int32,System.Int32)">
            <summary>
Initialization with specified nodes and port and with specified timeout value in ms
</summary>
            <param name="nodes">Collection of nodes to use</param>
            <param name="port">Port to use</param>
            <param name="sendTimeout">Waiting time for sending request to finish</param>
            <param name="receiveTimeout">Time to wait for response from DM server.  After time out, client will drop connection, and SendRequest will return false</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
Initialization with specified Name of the cluster and with specified timeout value in ms
</summary>
            <param name="clusterName">Name of the cluster</param>
            <param name="sendTimeout">Waiting time for sending request to finish</param>
            <param name="receiveTimeout">Time to wait for response from DM server.  After time out, client will drop connection, and SendRequest will return false</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.#ctor(System.Int32,System.Int32)">
            <summary>
Initialization with use specified timeout value in ms
</summary>
            <param name="sendTimeout">Waiting time for sending request to finish</param>
            <param name="receiveTimeout">Time to wait for response from DM server.  After time out, client will drop connection, and SendRequest will return false</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.#ctor(System.String)">
            <summary>
Initialization with default setting with specified Name of the cluster
Send timeout and receive timeout is 5 minutes each
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.#ctor">
            <summary>
Initialization with default setting
Send timeout and receive timeout is 5 minutes each
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ManagedDMClient.DMClientTaskContainers.s_id">
            <summary>
The identifier assigned to the previous request.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ManagedDMClient.DMClientTaskContainers.s_pendingTasks">
            <summary>
Maps the request identifier to a pending asynchronous request (the TaskCompletionSource corresponding
to the Task returned to the caller, and the ManagedDMClient instance on which the call was made).
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.DMClientTaskContainers.InvokeUserHandler(System.Object)">
            <summary>
Invokes the user handler to process the completion of an asynchronous DM request.
</summary>
            <param name="state">A Tuple holding the user handler (Action) and the data to pass to it (DMResponse).</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.DMClientTaskContainers.CompletePendingTask(DMClientCallbackContext*,System.Boolean,apsdk.DMResponse*)">
            <summary>
Completes the pending task and removes it from the collection. Completes the Task
given to the caller earlier.
</summary>
            <param name="callbackContext">The context for the request.</param>
            <param name="success">Indicates whether the command execution completed successfully.</param>
            <param name="response">The DM response from the server.</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.DMClientTaskContainers.RemovePendingTask(System.Int64)">
            <summary>
Removes the pending task from the collection. Usually called when an error has occurred,
and no Task will be returned to the caller.
</summary>
            <param name="id">The identifier of the request.</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ManagedDMClient.DMClientTaskContainers.AddPendingTask(System.Threading.Tasks.TaskCompletionSource`1{Microsoft.Search.Autopilot.DMResponse},Microsoft.Search.Autopilot.ManagedDMClient)">
            <summary>
Inserts an entry into the collection mapping the request Id to the managed DMClient and Task.
</summary>
            <param name="taskCompletionSource">The task completion source linked to the Task returned to the caller.</param>
            <param name="dmClient">The managed DMClient instance over which the request was received.</param>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ManagedDMClient.DMClientTaskContainers">
            <summary>
An internal class that serves as a bridge between the native DMClient callback
and the managed DMClient instances and asynchronous Tasks.
It maps the unique request Ids (autogenerated internally per request) to the
associated managed DMClient instance and the Task returned to the caller.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ManagedDMClient">
            <summary>
Wrapper of DMClient class in APSDK
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IDMClient2.SendRequestAsync(System.String,System.Byte[],System.Boolean)">
            <summary>
Sends a synchronous asynchronously
</summary>
            <param name="command">The command to execute.</param>
            <param name="uploadBuffer">The (optional) payload to upload for the command.</param>
            <param name="readOnly">True if the command does not change DM server state (data). False if it does.</param>
            <returns>A Task which will provide the response from DM, once the request is processed.</returns>
        </member>
        <member name="T:Microsoft.Search.Autopilot.IDMClient2">
            <summary>
Minimal interface required for clients to send requests to Device Manager.
Abstracted to an interface to facilitate mocking/testing without a need to run a real DM.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IDMClient.SendRequest(System.String,System.Boolean)">
            <summary>
Send a DM command that has no upload requirement
</summary>
            <param name="command">
String of DM command
</param>
            <param name="readOnly">
True if the command does not change DM server state(data). False if it does not.
</param>
            <returns>
On success request, it will return a response object which carries response string and status code.
If the request fails to be sent or connection is dropped before response coming back, a null object
will be returned.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IDMClient.SendRequest(System.String,System.String)">
            <summary>
Send a DM command that needs upload a data file
</summary>
            <remarks>
Use this interface only need to upload data file for the command. Otherwise, exception will throw
with null upload file path.
</remarks>
            <param name="command">
String of DM command
</param>
            <param name="uploadFilePath">
The full file path to the upload data file. If you supply a NULL file path, then exception will be thrown.
</param>
            <returns>
On success request, it will return a response object which carries response string and status code.
If the request fails to be sent or connection is dropped before response coming back, a null object
will be returned.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IDMClient.SendRequest(System.String,System.Byte[],System.Boolean)">
            <summary>
Send DM command to DM server
</summary>
            <param name="command">
String of DM command.
</param>
            <param name="uploadBuffer">
Upload buffer for DM Command if needed
</param>
            <param name="readOnly">
True if the command does not change DM server state (data). False if it does not.
</param>
            <returns>
On success request, it will return a response object which carries response string and status code.
If the request fails to be sent or connection is dropped before response coming back, a null object
will be returned.
</returns>
        </member>
        <member name="T:Microsoft.Search.Autopilot.IDMClient">
            <summary>
Minimal interface required for clients to send requests to Device Manager
Abstracted to an interface to facilitate mocking/testing without a need to run a real DM
</summary>
        </member>
        <member name="M:DMClientCallbackHandler.DMClientCallback(System.Void*,System.Boolean,apsdk.DMResponse*)">
            <summary>
The callback method that gets invoked by the native DMClient when an
asynchronous request completes processing.
</summary>
            <param name="ctx">
The state that was passed by the caller when invoking the asynchronous
method.
</param>
            <param name="success">
Indicates whether the command processed successfully.
</param>
            <param name="response">
The response of the command execution.
</param>
        </member>
        <member name="T:DMClientCallbackHandler">
            <summary>
The callback handler, whose method will get invoked by the native DMClient
when an asynchronous request completes processing.
</summary>
        </member>
        <member name="F:DMClientCallbackContext.m_delegate">
            <summary>
The delegate wrapping the Managed function that needs to be called from
the DMClient asynchronous callback; stored within a GCRoot object to prevent
the garbage collector from cleaning it up.
</summary>
        </member>
        <member name="F:DMClientCallbackContext.m_traceId">
            <summary>
The trace identifier for the asynchronous request.
</summary>
        </member>
        <member name="F:DMClientCallbackContext.m_response">
            <summary>
The DMResponse object which will be populated by the native DMClient when the asynchronous
call completes.
</summary>
        </member>
        <member name="F:DMClientCallbackContext.m_nativeDelegate">
            <summary>
The delegate wrapping the Managed function, marshalled to an unmanaged pointer.
</summary>
        </member>
        <member name="F:DMClientCallbackContext.m_uploadDataLength">
            <summary>
The length of the upload data.
</summary>
        </member>
        <member name="F:DMClientCallbackContext.m_uploadData">
            <summary>
The data which was uploaded as the payload of a command.
</summary>
        </member>
        <member name="F:DMClientCallbackContext.m_id">
            <summary>
An identifier for a specific request.
</summary>
        </member>
        <member name="M:DMClientCallbackContext.Dispose">
            <summary>
Destructor. Frees up m_uploadData;
</summary>
        </member>
        <member name="M:DMClientCallbackContext.#ctor(System.Int64,CompletePendingTaskDelegate,System.Byte[],std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor.
</summary>
            <param name="id">An identifier for a specific request.</param>
            <param name="managedCallbackDelegate">The delegate wrapping the Managed function that needs to be called from
the DMClient asynchronous callback.</param>
            <param name="uploadBuffer">The data that will be uploaded in the asynchronous request. Can be NULL.</param>
        </member>
        <member name="T:DMClientCallbackContext">
            <summary>
Represents the state that the managed DMClient passes to the asynchronous
Send call to the native DMClient, which is then available in the callback function
when the native client completes processing the request.
</summary>
        </member>
        <member name="D:CompletePendingTaskNativeDelegate">
            <summary>
This function pointer is the native marshalled instance corresponding to CompletePendingTaskDelegate.
</summary>
            <param name="callbackContext">This object contains the necessary data to identify the asynchronous request 
for this response.</param>
            <param name="success">Indicates whether the call completed successfully or not.</param>
            <param name="response">Contains the response of the asynchronous call. This is a pointer to the same object that
was provided by the caller when invoking "Send()" to send the asynchronous request.</param>
        </member>
        <member name="T:CompletePendingTaskDelegate">
            <summary>
This delegate wraps ManagedDMClient::DMClientTaskContainers::CompletePendingTask.
</summary>
            <param name="callbackContext">This object contains the necessary data to identify the asynchronous request 
for this response.</param>
            <param name="success">Indicates whether the call completed successfully or not.</param>
            <param name="response">Contains the response of the asynchronous call. This is a pointer to the same object that
was provided by the caller when invoking "Send()" to send the asynchronous request.</param>
        </member>
        <member name="T:Microsoft.Search.Autopilot.DMResponse">
            <summary>
class that holds the reponse from the DM server
"response" contains the real response contents
"status"   contains the response status code
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.DMServerResponseCode">
            <summary>
Enumeration represents the response code from DM server
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_handler">
            <summary>
The callback for asynchronous processing. Provided by the user when initializing.
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_recvTimeout">
            <summary>
Receive timeout. Provided by the user when initializing. If not provided, the default.
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_sendTimeout">
            <summary>
Send timeout. Provided by the user when initializing. If not provided, the default.
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_cluster">
            <summary>
The DM cluster to connect to. This contains what the user provided when initializing DMClient.
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_dmNodes">
            <summary>
The DM nodes to connect to. This contains only what the user provided when initializing DMClient.
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_serviceType">
            <summary>
Indicates the port number of the service. This contains what the user provided when initializing DMClient (or
the default (which is ServiceType_APManagementProxy) in case the user didn't specify anything).
This is being kept around for legacy reasons (someone using DMClient to connect to a custom ApClientServer service).
TODO: need to get rid of this at some point - but only look into it after APManagementProxy is removed.
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_initialized">
            <summary>
Indicates whether DMClient has been successfully initialized or not.
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_applicationSettings">
            <summary>
The DMClient settings read from the application default configuration file.
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_environmentSettings">
            <summary>
The DMClient settings read from the environment.ini file.
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_clusterSettings">
            <summary>
The DMClient settings read from the cluster shared.ini file.
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_forceUseNetlib">
            <summary>
When set to true, then DMClient will always create DMClientNetLibImpl - i.e., it will always use the ApClientServer
protocol assuming that it needs to communicate with ApManagementProxy. Configuration / defaults / etc are all ignored.
When set to false, the default logic (to determine whether to connect to DMGateway or ApManagementProxy) is used.
Currently, this is set to true always (and set to false only from test code).
This is only temporary, and this will be removed later. This is in-place so that we don't end up in a situation where
a version of DMClient has been checked in, not yet ready for consumption by end-users, but is capable of communicating
to DMGateway; and if we turn on the switch to communicate with DMGateway (via config), then users having this intermediate build of
DMClient will end up connecting to DMGateway (due to the global switch). This is in-place right now because the current
version of DMClient is not yet "ready-to-release", but we're checking it in.
By design, this cannot be controlled via config - it is a property of the current state of the code.
NOTE: We don't expect "m_forceUseDmGateway" and "m_forceUseNetlib" to both be true. But if both are, then "m_forceUseNetlib" takes
precedence (i.e., DMClient will then always use DMClientNetLibImpl).
</summary>
        </member>
        <member name="F:apsdk.DMClient.m_forceUseDmGateway">
            <summary>
When set to true, then DMClient will always create DMClientHttpImpl - i.e., always use the HTTP application protocol
and assume that it needs to communicate with DMGateway. Configuration / defaults / etc are all ignored.
When set to false, the default logic (to determine whether to connect to DMGateway or ApManagementProxy) is used.
This is currently set only from test code. For production use, the decision on whether to use DMGateway or not comes
from configuration (and defaults in the code, in case configuration entries weren't found).
Currently, this is set to false always (and set to true only from test code).
This is only temporary, and this will be removed later.
By design, this cannot be controlled via config - it is a property of the current state of the code.
</summary>
        </member>
        <member name="M:apsdk.DMClient.GetTimeouts(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets the timeouts that should be used in the DMClient Impl instance.
These can come in from the Init() call, or from config.
</summary>
        </member>
        <member name="M:apsdk.DMClient.GetUseDmGateway">
            <summary>
Returns a boolean that indicates whether the DMClient should connect to the DMGateway as opposed
to the ApManagementProxy. 
This is based on settings configured at the cluster level (via shared.ini),
environment level (via environment.ini) as well as the service level (in the default config used to
initialize the AP runtime).
Service config takes precedence over environment config, which takes precedence over cluster config.
Unless, the cluster config has indicated that settings at the service/environment level need to be ignored,
in which case this only depends on the settings configured at cluster level (via shared.ini).
</summary>
            <returns>A boolean indicating if DMClient should connect to DMGateway and not ApManagementProxy.</returns>
        </member>
        <member name="M:apsdk.DMClient.GetInitializedDmClientImpl">
            <summary>
Gets an initialized DMClientImpl-instance, ready for use.
Returns NULL if we failed.
</summary>
        </member>
        <member name="M:apsdk.DMClient.GetDMNodes(std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets the DM nodes to connect to.
</summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:apsdk.DMClient.CreateDmClientImpl">
            <summary>
Creates the appropriate DmClientImpl-derived instance, depending
on the DMClient settings (using the combination of cluster, environment,
and application config).
</summary>
        </member>
        <member name="M:apsdk.DMClient.ResetImpl">
            <summary>
Re-creates the appropriate DmClientImpl-derived instance, depending
on the latest settings in the m*Settings objects and/or the updated list of DM Servers
in autopilot.ini.
</summary>
        </member>
        <member name="M:apsdk.DMClient.PopulateClusterDMListFromINI(std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Loads the list of DM nodes from autopilot.ini.
</summary>
            <param name="dmList">The entries read from autopilot.ini are populated here.</param>
            <returns>A boolean that indicates if we were able to successfully retrieve the list of DM nodes. If the value
is false, the entries in "dmList" should not be trusted.</returns>
        </member>
        <member name="M:apsdk.DMClient.DMClientSettingsChangeCallback(System.Void*)">
            <summary>
This callback is invoked whenever any of the settings objects are modified.
</summary>
            <param name="cookie">The state object that was passed in when this callback was registered.
The object can be anything, and can be used from within the callback to perform the necessary actions.
The DMClient implementation passes in "this" as the state.</param>
        </member>
        <member name="M:apsdk.DMClient.DMListChangeCallback(System.Void*)">
            <summary>
This callback is invoked whenever the autopilot.ini file is modified.
</summary>
            <param name="cookie">The state object that was passed in when this callback was registered.
The object can be anything, and can be used from within the callback to perform the necessary actions.
The DMClient implementation passes in "this" as the state.</param>
        </member>
        <member name="M:apsdk.DMClient.InitInternal(std.vector&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.ServiceType,System.UInt32,System.UInt32,std.shared_ptr&lt;dmclient.DMClientSettings&gt;,std.shared_ptr&lt;dmclient.DMClientSettings&gt;,std.shared_ptr&lt;dmclient.DMClientSettings&gt;,apsdk.DMClient.Handler*)">
            <summary>Initializes the DMClient.</summary>
            <param name="nodes">list of DMs to use, provided by the end-user.</param>
            <param name="cluster">cluster to target, provided by the end-user.</param>
            <param name="svc">Service type: Port reserved for the specific service (see: ServiceType.h).</param>
            <param name="sendTimeout">Timeout in ms to send a command.</param>
            <param name="recvTimeout">Timeout in ms to recv a command.</param>
            <param name="handler">Pointer to a DMClient::Handler object.</param>
            <param name="clusterSettings">The DMClient settings retrieved from the cluster configuration (shared.ini).</param>
            <param name="environmentSettings">The DMClient settings retrieved from the environment configuration (environment.ini).</param>
            <param name="applicationSettings">The DMClient settings retrieved from the application (default config).</param>
            <returns>true if the initialization was successful, false otherwise.</returns>
            <remarks>Must be called before sending any command.</remarks>
        </member>
        <member name="M:apsdk.DMClient.InitInternal(std.vector&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.ServiceType,System.UInt32,System.UInt32,apsdk.DMClient.Handler*)">
            <summary>Initializes the DMClient.</summary>
            <param name="nodes">list of DMs to use, provided by the end-user.</param>
            <param name="cluster">cluster to target, provided by the end-user.</param>
            <param name="svc">Service type: Port reserved for the specific service (see: ServiceType.h).</param>
            <param name="sendTimeout">Timeout in ms to send a command.</param>
            <param name="recvTimeout">Timeout in ms to recv a command.</param>
            <param name="handler">Pointer to a DMClient::Handler object.</param>
            <returns>true if the initialization was successful, false otherwise.</returns>
            <remarks>Must be called before sending any command.</remarks>
        </member>
        <member name="M:apsdk.DMClient.Send(apsdk.DMRequest*,apsdk.DMResponse*,System.Void*)">
            <summary>
    Sends a command to the DM
</summary>
            <param name="req">Request encapsulating the command to be sent plus any additional payload</param>
            <param name="resp">response from the DM</param>
            <param name="ctx">command context</param>
            <returns>
    true if the command was successfully sent and the client API was able to process the response  
</returns>
        </member>
        <member name="M:apsdk.DMClient.Send(System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.CsMemoryBuffer*,apsdk.DMResponse*,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>Sends a command to the DM.</summary>
            <param name="readOnly">if true, it enables fast read.</param>
            <param name="cmd">command to be sent.</param>
            <param name="upload">additional data to be sent with the command.</param>
            <param name="resp">response from the DM.</param>
            <param name="ctx">command context.</param>
            <param name="traceId">A unique string that can be associated with the request, which helps in correlating logs.</param>
            <returns>
    true if the command was successfully sent and the client API was able to process the response.
</returns>
        </member>
        <member name="M:apsdk.DMClient.Send(System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.CsMemoryBuffer*,apsdk.DMResponse*,System.Void*)">
            <summary>
    Sends a command to the DM
</summary>
            <param name="readOnly">if true, it enables fast read</param>
            <param name="cmd">command to be sent</param>
            <param name="upload">additional data to be sent with the command</param>
            <param name="resp">response from the DM</param>
            <param name="ctx">command context</param>
            <returns>
    true if the command was successfully sent and the client API was able to process the response  
</returns>
        </member>
        <member name="M:apsdk.DMClient.Send(System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apsdk.DMResponse*,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>Sends a command to the DM.</summary>
            <param name="readOnly">if true, it enables fast read.</param>
            <param name="cmd">command to be sent.</param>
            <param name="upload">additional data to be sent with the command.</param>
            <param name="len">size of the additonal data to be sent.</param>
            <param name="resp">response from the DM.</param>
            <param name="ctx">command context.</param>
            <param name="traceId">A unique string that can be associated with the request, which helps in correlating logs.</param>
            <returns>
    true if the command was successfully sent and the client API was able to process the response  
</returns>
        </member>
        <member name="M:apsdk.DMClient.Send(System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apsdk.DMResponse*,System.Void*)">
            <summary>
    Sends a command to the DM
</summary>
            <param name="readOnly">if true, it enables fast read</param>
            <param name="cmd">command to be sent</param>
            <param name="upload">additional data to be sent with the command</param>
            <param name="len">size of the additonal data to be sent</param>
            <param name="resp">response from the DM</param>
            <param name="ctx">command context</param>
            <returns>
    true if the command was successfully sent and the client API was able to process the response  
</returns>
        </member>
        <member name="M:apsdk.DMClient.Send(System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.DMResponse*,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>Sends a command to the DM.</summary>
            <param name="readOnly">if true, it enables fast read.</param>
            <param name="cmd">command to be sent.</param>
            <param name="resp">response from the DM.</param>
            <param name="ctx">command context.</param>
            <param name="traceId">A unique string that can be associated with the request, which helps in correlating logs.</param>
            <returns>true if the command was successfully sent and the client API was able to process the response.</returns>
        </member>
        <member name="M:apsdk.DMClient.Send(System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.DMResponse*,System.Void*)">
            <summary>
    Sends a command to the DM
</summary>
            <param name="readOnly">if true, it enables fast read</param>
            <param name="cmd">command to be sent</param>
            <param name="resp">response from the DM</param>
            <param name="ctx">command context</param>
            <returns>
    true if the command was successfully sent and the client API was able to process the response  
</returns>
        </member>
        <member name="M:apsdk.DMClient.Send(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.CsMemoryBuffer*,apsdk.DMResponse*)">
            <summary>
    Sends a command to the DM
</summary>
            <param name="cmd">command to be sent</param>
            <param name="upload">additional data to be sent with the command</param>
            <param name="resp">response from the DM</param>
            <returns>
    true if the command was successfully sent and the client API was able to process the response  
</returns>
        </member>
        <member name="M:apsdk.DMClient.Send(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,apsdk.DMResponse*)">
            <summary>
    Sends a command to the DM
</summary>
            <param name="cmd">command to be sent</param>
            <param name="upload">additional data to be sent with the command</param>
            <param name="len">size of the additonal data to be sent</param>
            <param name="resp">response from the DM</param>
            <returns>
    true if the command was successfully sent and the client API was able to process the response  
</returns>
        </member>
        <member name="M:apsdk.DMClient.Send(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.DMResponse*)">
            <summary>
    Sends a command to the DM
</summary>
            <param name="cmd">command to be sent</param>
            <param name="resp">response from the DM</param>
            <returns>
    true if the command was successfully sent and the client API was able to process the response  
</returns>
        </member>
        <member name="M:apsdk.DMClient.ResetServers(std.vector&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Allows for dynamic server update
</summary>
            <param name="nodes">List of additional DMs</param>
        </member>
        <member name="M:apsdk.DMClient.SetKeepAlive(System.Boolean)">
            <summary>
Keep alive the connection to the server
</summary>
            <param name="flag">if set to true, the idle connections to the server are not closed</param>
        </member>
        <member name="M:apsdk.DMClient.SetMaxMessageLength(System.UInt32)">
            <summary>
 Sets the maximum length for a message in bytes
</summary>
            <param name="maxMessageLen">max message length</param>
        </member>
        <member name="M:apsdk.DMClient.Init(std.vector&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,apsdk.ServiceType,System.UInt32,System.UInt32,apsdk.DMClient.Handler*)">
            <summary>
       Initializes the DMClient
</summary>
            <param name="nodes">list of DMs to use</param>
            <param name="svc">Service type: Port reserved for the specific service (see: ServiceType.h) </param>
            <param name="sendTimeout">Timeout in ms to send a command</param>
            <param name="recvTimeout">Timeout in ms to recv a command</param>
            <param name="handler">Pointer to a DMClient::Handler object</param>
            <returns>
       true if the intialization was successful, false otherwise
</returns>
            <remarks>
       Must be called before sending any command
</remarks>
        </member>
        <member name="M:apsdk.DMClient.Init(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,apsdk.DMClient.Handler*)">
            <summary>
       Initializes the DMClient 
</summary>
            <param name="cluster">Name of the cluster, e.g. Sn2, not FQDN, DM IP adresses will be resolved using service locator</param>
            <param name="sendTimeout">Timeout in ms to send a command</param>
            <param name="recvTimeout">Timeout in ms to recv a command</param>
            <param name="handler">Pointer to a DMClient::Handler object</param>
            <returns>
       true if the intialization was successful, false otherwise
</returns>
            <remarks>
       Must be called before sending any command
</remarks>
        </member>
        <member name="M:apsdk.DMClient.Init(System.UInt32,System.UInt32,apsdk.DMClient.Handler*)">
            <summary>
       Initializes the DMClient
</summary>
            <param name="sendTimeout">Timeout in ms to send a command</param>
            <param name="recvTimeout">Timeout in ms to recv a command</param>
            <param name="handler">Pointer to a DMClient::Handler object</param>
            <returns>
       true if the intialization was successful, false otherwise
</returns>
            <remarks>
       Must be called before sending any command
</remarks>
        </member>
        <member name="M:apsdk.DMClient.Init">
            <summary>
       Initializes the DMClient with default parameters: sendTimeout == c_SendTimeout, recvTimeout == c_RecvTimeout
</summary>
            <returns>
       true if the intialization was successful, false otherwise
</returns>
            <remarks>
       Must be called before sending any command
</remarks>
        </member>
        <member name="M:apsdk.DMClient.Handler.DMClientCallback(System.Void*,System.Boolean,apsdk.DMResponse*)">
            <summary>
Called to process a response for a command
</summary>
            <param name="ctx">Response context</param>
            <param name="success">true if this was handled correctly, false otherwise</param>
            <param name="resp">Pointer to a DMResponse object</param>
        </member>
        <member name="M:apsdk.DMClient.Handler.Dispose">
            <summary>
virtual destructor
</summary>
        </member>
        <member name="T:apsdk.DMClient.Handler">
            <summary>
  Abstract class, can be derived by a caller to implement custom actions when a response for a command is received
</summary>
        </member>
        <member name="M:apsdk.DMResponse.Status">
            <summary>
Returns the status code for the response (see StatusCode enums for possible values)
</summary>
        </member>
        <member name="T:apsdk.DMResponse.StatusCode">
            <summary>
       StatusCode 
</summary>
            <remarks>
       Possible results from the command execution
</remarks>
        </member>
        <member name="T:apsdk.DMResponse">
            <summary>
       DMResponse 
</summary>
            <remarks>
       Wraps a result from the DMServer once a command has been issued using the DMClient API
       Client applications will get back a DMResponse for a command that's been sent
</remarks>
        </member>
        <member name="F:apsdk.DMRequest.m_traceId">
            <summary>
A trace identifier that can be associated with each request.
This can be used for end-to-end tracing (across the client application,
the DMGateway, and the DM/MPM/AM back-end), for easier diagnostics.
If this is not specified, then when the DMClient sends the request
to DMGateway, a GUID will be generated and used (NOTE: m_traceId won't
be updated with that generated GUID though - since a user could potentially
re-use the same DMRequest object multiple times, and we don't want to re-use
the same generated GUID across all those calls).
</summary>
        </member>
        <member name="T:apsdk.DMRequest">
            <summary>
       DMRequest 
</summary>
            <remarks>
       Wraps a request to the DMServer once a command has been issued using the DMClient API
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.SetWriteBufferParams(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
  Set Write buffer parameters.
</summary>
            <param name="bufferSize">Size of the write buffer</param>
            <param name="bufferCount">Number of write buffers</param>
            <remarks />
        </member>
        <member name="M:apsdk.APFileSync.SetAppID(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
  Set AppID - the tag which is included to each FSClient query
  FSServer may have different configuration for different AppID
</summary>
            <param name="appID">Application ID</param>
            <remarks>
  Never use random values for App ID - use constant string instead
  FSServer may allocate some resources for each uniq AppID, so dont overload it with big amount of different AppIDs
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.SetFileDeleteFunc(=FUNC:System.Boolean(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)">
            <summary>
  Set FileDeleteFunc callback
</summary>
            <param name="func">File Delete callback</param>
            <param name="cookie">Parameter passing to callback</param>
            <remarks>
  see FileDeleteFunc description
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.SetRowFilterFunc(=FUNC:System.Boolean(apsdk.ManifestRow!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)">
            <summary>
  Set RowFilterFunc callback
</summary>
            <param name="func">Filter callback</param>
            <param name="cookie">Parameter passing to callback</param>
            <remarks>
  see RowFilterFunc description
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.SetFullVerificationMode(System.Boolean)">
            <summary>
  Turning On\Off Full Verification Mode  
</summary>
            <param name="value">on or off</param>
            <remarks>
                <para>In Full Verification mode FileSync will re-calculate Full CRC for each existing file and verify it against manifest.
  Use this mode with care - in this mode disk usage is extreamly high. By default this mode is turned off</para>
            </remarks>
        </member>
        <member name="M:apsdk.APFileSync.SetResumeMode(System.Boolean)">
            <summary>
  Swithing FileSync to "resume" mode
</summary>
            <param name="value">turn "resume" mode on or off</param>
            <remarks>
                <para>In "resume" mode filesync in case of failures will keeps temporary files and will attempts to continue download of each file from 
  last current position. This alows to copy big files on slow networks with higher success rate. By default mode is turned off</para>
            </remarks>
        </member>
        <member name="M:apsdk.APFileSync.SetMaxBadwidth(System.UInt32)">
            <summary>
  This limits badwidth which is used by FileSync
</summary>
            <param name="bytesPerSecond">How many bytes filesync can receive per second</param>
            <remarks>
                <para>0 - do not restrict bandwidth, actual value adjusting by FSClient::c_MinAllowedBandwidth</para>
                <para>Restrictions apply only for files, not apply for manifests</para>
                <para>Restrictions apply only for HTTP mode, not apply for SMB</para>
                <para>Set noSMB to TRUE during initialization to disable SMB mode</para>
                <para>Important Note: SetMaxBadwidth works per download thread. If you using multi-thread mode and need to limit 
     bandwidth, please use SetBandwidthControllCallback instead of SetMaxBadwidth</para>
            </remarks>
        </member>
        <member name="M:apsdk.APFileSync.SetPeerMapping(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
  This defines local-to-remote path mapping used by Peer2Peer
</summary>
            <param name="localPath">Local Path</param>
            <param name="remotePath">remote Path</param>
            <remarks>
  By default mapping is "D:\\" -&gt; "DriveD\\", where "DriveD" is FSServer virtual root for D:
  There is no need to override default settings
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.SetFileSyncCallback(apsdk.APFileSync.FileSyncCallback*)">
            <summary>
  Set CallBack on file downloading
</summary>
            <param name="callback">Callback</param>
        </member>
        <member name="M:apsdk.APFileSync.GetErrorMessage">
            <summary>
  Returns error message buffer.
</summary>
            <remarks>
  Messages can be trunceted - buffer size is limited to c_MaxErrorMessageLen 
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.GetManifests">
            <summary>
  Returns the manifest merger object. Manifest Merger has all the manifests that has been added
</summary>
        </member>
        <member name="M:apsdk.APFileSync.SetDeleteFileTimeLimit(System.Int32)">
            <summary>
  Sets the time limit for deletion 
</summary>
            <param name="timeInSeconds">Time In Seconds</param>
        </member>
        <member name="M:apsdk.APFileSync.DeleteFilesNotInManifest">
            <summary>
  Delete all the files in the specified root directory which are not mentioned in the manifest.
</summary>
        </member>
        <member name="M:apsdk.APFileSync.SyncFiles(System.UInt64*,System.Boolean|System.Runtime.CompilerServices.IsVolatile!System.Runtime.CompilerServices.IsConst*,apsdk.APFileSync.Statistics*)">
            <summary>
  Sync absent or corrupt files from one of the servers specified in the manifest.
</summary>
            <param name="pnFilesCopied">get back the count of files that were synced</param>
            <param name="pStopFlag">pointer to stop flag. If value referenced by this pointer becomes true, SyncFiles terminates</param>
            <remarks>
  Returns true if all the expected files were copied. False otherwise.
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.Mirror(System.Boolean,System.UInt64*)">
            <summary>
  Mirror the source onto the destination.
</summary>
            <param name="alwaysDelete">alwaysDelete</param>
            <param name="pnFilesCopied">get back the count of files that were copied</param>
            <remarks>
  All the files on the destination which are not on the source must be deleted.
</remarks>
            <returns />
        </member>
        <member name="M:apsdk.APFileSync.SetPeerMachineList(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Int32)">
            <summary>
  Set the default list of "fast" servers which possibly have already 
  downloaded this file (or downloading it now from one of slower DS servers).
</summary>
            <param name="serverlist">array of servers names</param>
            <param name="serverlistSize">servers count</param>
            <remarks>
  If serverlistSize == 0, then filesync figures out the list
  of servers in same pod and uses them as the default list of servers.
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.AddDefaultServer(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
  Adds server to default server list
</summary>
            <param name="server">server name or IP</param>
            <remarks>
  returns false if there are already too many servers in the list
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.SetDefaultServerList(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Int32)">
            <summary>
  Set the default list of servers to copy the file from
</summary>
            <param name="serverlist">array of servers names</param>
            <param name="serverlistSize">servers count</param>
            <remarks>
  this is used in case no servers were specified for the file.
  If serverlistSize == 0, then filesync figures out the list
  of DS Servers and uses them as the default list of servers.
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.AddManifestUsingConfig(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
  Copies the manifest that is specified in the config locally and adds it to the manifest list. 
</summary>
            <param name="pszConfig">configuration file name</param>
            <param name="checkManifestDate">checkManifestDate</param>
            <param name="nohttp">do not try to copy manifest over http (FS Server)</param>
            <param name="nosmb">do not try to copy manifest over SMB</param>
            <remarks>
  If SetDefaultServerList() has already been called, then the serverlist 
  from SetDefaultServerList() is used instead of the one specified in pszConfig
</remarks>
            <returns />
        </member>
        <member name="M:apsdk.APFileSync.AddManifest(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
            <summary>
  Add a single manifest from an in-memory buffer.
</summary>
            <param name="bufferStart">buffer</param>
            <param name="bufferSize">buffer size</param>
            <returns>
  Returns true if the manifest was added successfuly.
</returns>
        </member>
        <member name="M:apsdk.APFileSync.AddManifest(System.Void*!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
  Add a single manifest given it's handle.
</summary>
            <param name="manifest">handle of the manifest</param>
            <param name="fileName">File name of the manifest</param>
            <returns>
  Returns true if the manifest was added successfuly.
</returns>
        </member>
        <member name="M:apsdk.APFileSync.AddManifest(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
  Add a single manifest file.
</summary>
            <param name="fileName">File name of the manifest</param>
            <returns>
  Returns true if the manifest was added successfuly.
</returns>
        </member>
        <member name="M:apsdk.APFileSync.AddManifests(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.Int32)">
            <summary>
  Add all the manifests specified on the command line
</summary>
            <param name="manifests">List of manifests</param>
            <param name="count">Manifests count</param>
            <returns>
  Returns true if all the manifests were added successfully.
</returns>
            <remarks>
     Even if one manifest had errors, the rest will not be added.
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.DeInit">
            <summary>
  De-Initialize the instance
</summary>
            <remarks>
     Release any allocated memory. Reset the thread priority.
</remarks>
        </member>
        <member name="M:apsdk.APFileSync.SetTimeouts(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
  Set timeouts for this instance of FileSync
</summary>
            <param name="receiveTimeout">Receive Timeout</param>
            <param name="sendTimeout">Send Timeout</param>
            <param name="connectTimeout">Connect Timeout</param>
            <returns>
  Returns true if the timeouts were set correctly
</returns>
        </member>
        <member name="M:apsdk.APFileSync.Init(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
  Initialize the filesync instance for most typical usage
</summary>
            <param name="root">the location where the files should be copied to.</param>
        </member>
        <member name="M:apsdk.APFileSync.Init(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
  Initialize the filesync instance
</summary>
            <param name="root">the location where the files should be copied to.</param>
            <param name="sourceRoot">the location where the files should be copied from.</param>
            <param name="verify">re-open and calculate the Full CRC of the file and compare it with
                     the manifest after copying and writing it to the disk.</param>
            <param name="tempManifest">the path of the temp manifest file generated by filesync.</param>
            <param name="noHttp">do not try to copy the files over http (FS Server)</param>
            <param name="noSMB">do not try to copy the files over SMB</param>
            <param name="ignoreCRC">ignoreCRC</param>
            <returns>
  result of initialization
</returns>
            <remarks>
                <para>
       noHttp and noSMB both default to false. This means that filesync will try to copy the files over http and if that fails,
    it will then try to copy it over SMB. Setting both noHttp and noSMB to true will cause Init to fail.
     </para>
                <para>
       This function also sets the priority of the current thread to below normal, this is so as to minimize any impact it has on
    reset if the caller calls DeInit() or when the current instance gets destroyed.
     </para>
            </remarks>
        </member>
        <member name="M:apsdk.APFileSync.Dispose">
            <summary>
  Destructor
</summary>
        </member>
        <member name="M:apsdk.APFileSync.#ctor">
            <summary>
  Constructor
</summary>
        </member>
        <member name="D:apsdk.APFileSync.FileDeleteFunc">
            <summary>
    User-defined callback which calls before file deleting.
</summary>
            <returns>
    Returns true if FileSync can delete this file, false if callback decided to keep this file
</returns>
            <remarks>
    if this callback is defined, it affects next functions: Mirror and DeleteFilesNotInManifest
</remarks>
        </member>
        <member name="D:apsdk.APFileSync.RowFilterFunc">
            <summary>
       User-defined callback which allows to filter manifest
</summary>
            <remarks>
                <para>
       if this callback is defined, it affects next functions:
  </para>
                <para>
       SyncFiles: syncs only files for which this callback returns TRUE
  </para>
                <para>
       DeleteFilesNotInManifest: deletes also files for which callback returns FALSE
  </para>
                <para />
            </remarks>
        </member>
        <member name="T:apsdk.APFileSync.FileSyncCallback">
            <summary>
       FileSyncCallback 
</summary>
            <remarks>
       this callback is used in file processing loop
       StartFile is called before any actions for each file.
       if user-defined StartFile returns non-NULL value (session) then 
       user-defined FinishFile is called after file is processed
</remarks>
        </member>
        <member name="M:apsdk.ApCommServer.Start(apsdk.ApCommRequestProcessor*,apsdk.ServiceType,System.Boolean,System.UInt16*)">
            <summary>
Initializes the service and starts listening for requests from remote clients.
</summary>
            <param name="processor">The object on which the ProcessRequest() method
will be invoked for every client request.</param>
            <param name="appService">The service (port) which needs to be started.</param>
            <param name="findFreePort">Whether the implementation will attempt to find
an unused port to listen on. If the specified port is in use, the system will 
attempt to find the next unused port and listen on that. The port chosen will
be returned in the "listenPort" output parameter.
If ServiceType is Service_None (i.e. port zero), then the implementation will
always attempt to start listening on a free port.</param>
            <param name="listenPort">Updated with the port number on which the service
is listening. This value is updated only if findFreePort has been set to true,
or appServer was set to Service_None.
This value is accurate only if the service started successfully (i.e., this
method returned true).</param>
            <returns>A boolean indicating if the service was started successfully or not.</returns>
        </member>
        <member name="F:Microsoft.Search.Autopilot.APConfiguration.registeredConfigurationListeners">
            <summary>
Holds the configuration changed handlers that have been registered.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.AddListenerEntry(Microsoft.Search.Autopilot.ConfigurationChangedHandler,System.IntPtr)">
            <summary />
            <param name="handler" />
            <param name="registration" />
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.EnsureConfigurationInitialized">
            <summary>
Determines if APConfiguration has been initialized.  If not an exception is thrown.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.InvokeConfigurationChangedHandler(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.IntPtr)">
            <summary>
Invokes the handler when a configuration changes.
</summary>
            <param name="name">
The name of the configuration that changed.
</param>
            <param name="handler">
The handler to call back to.
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.InvokeConfigurationChangedHandlers(System.String,Microsoft.Search.Autopilot.ConfigurationType)">
            <summary>
Invokes the configuration changed event for the specified configuration
even though it has not been modified.
</summary>
            <param name="configurationName">
The name of the configuration.
</param>
            <param name="configurationType">
The type of the configuration.
</param>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the changed event could not be fired.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.InvokeConfigurationChangedHandlers(Microsoft.Search.Autopilot.ConfigurationType)">
            <summary>
Invokes the configuration changed event for the specified configuration type
even though it has not been modified.
</summary>
            <param name="configurationType">
The type of the configuration.
</param>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the changed event could not be invoked.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.InvokeConfigurationChangedHandlers(System.String)">
            <summary>
Invokes the configuration changed event for the specified configuration
even though it has not been modified.
</summary>
            <param name="configurationName">
The name of the configuration.
</param>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the changed event could not be invoked.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.InvokeConfigurationChangedHandlers">
            <summary>
Invokes the configuration changed event for the default configuration
even though it has not been modified.
</summary>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the changed event could not be invoked.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.RemoveConfigurationChangedHandler(Microsoft.Search.Autopilot.ConfigurationChangedHandler)">
            <summary>
Removes a configuration changed handler.
</summary>
            <param name="changeHandler">
The change handler used to register for the configuration changed event.
</param>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the handle cannot be removed.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.AddConfigurationChangedHandler(System.String,Microsoft.Search.Autopilot.ConfigurationType,Microsoft.Search.Autopilot.ConfigurationChangedHandler)">
            <summary>
Adds a configuration change handler for the specified configuration.
</summary>
            <param name="configurationName">
The name of the configuration to register for.
</param>
            <param name="configurationType">
The type of configuration to register for.
</param>
            <param name="changeHandler">
The handler to register.
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.AddConfigurationChangedHandler(Microsoft.Search.Autopilot.ConfigurationType,Microsoft.Search.Autopilot.ConfigurationChangedHandler)">
            <summary>
Adds a configuration change handler for the specified configuration type.
</summary>
            <param name="configurationType">
The type of configuration to register for.
</param>
            <param name="changeHandler">
The handler to register.
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.AddConfigurationChangedHandler(System.String,Microsoft.Search.Autopilot.ConfigurationChangedHandler)">
            <summary>
Adds a configuration change handler for the specified configuration.
</summary>
            <param name="configurationName">
The name of the configuration to register for.
</param>
            <param name="changeHandler">
The handler to register.
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.AddConfigurationChangedHandler(Microsoft.Search.Autopilot.ConfigurationChangedHandler)">
            <summary>
Adds a configuration change handler for the default
configuration (config.ini).
</summary>
            <param name="changeHandler">
The handler to register.
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.ComposeParameterKey(System.String,System.String,System.String)">
            <summary>
Constructs a key from its element parts.
</summary>
            <param name="clusterPart">
The cluster part.
</param>
            <param name="environmentPart">
The environment part.
</param>
            <param name="keyPart">
The key part.
</param>
            <returns>
The constructed key.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.TokenizeParameterKey(System.String)">
            <summary>
Breaks a key into its element parts.
</summary>
            <param name="key">
The key to tokenize.
</param>
            <returns>
A 3 element array containing cluster, environment, and key respectively.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.GetConfiguration(System.String,Microsoft.Search.Autopilot.ConfigurationType)">
            <summary>
Gets the default configuration.
</summary>
            <param name="configurationName">
The name of the configuration to retrieve.
</param>
            <param name="type">
The type of the configuration to retrieve.
</param>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the configuration is not available.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.GetConfiguration(System.String)">
            <summary>
Gets the default configuration.
</summary>
            <param name="configurationName">
The name of the configuration to retrieve.
</param>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the configuration is not available.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.GetConfiguration">
            <summary>
Gets the default configuration.
</summary>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the configuration is not available.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.GetConfigurationDirectory(Microsoft.Search.Autopilot.ConfigurationType)">
            <summary>
Returns the fully qualified directory for a given configuration type.
</summary>
            <remarks>
One of the ConifugrationType::XXXPath flag must be used to specify the
type of the configuration directory to be returned.

Note that this function does not make use of the search path for the
given configuration type; it always uses the "default" directory
for the config type. For this reason it is better to use
MakeConfigPathname when the configuration name is known.

Note that depending on the bootstrap configuration some of the
configuration types may not be available. For example, if the
cluster name is not set in the bootstrap configuration, the
cluster and environment configuration directories are not available.

Note that some environments do not have the cluster name set.
(Applications must function correctly even under these conditions
to be backward compatible.)
</remarks>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the configuration directory cannot be retrieved.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.ReadBufferConfiguration(System.String,Microsoft.Search.Autopilot.ConfigurationType)">
            <summary>
Opens and parses the specified configuration string.
</summary>
            <param name="configurationString">
The string of configuration settings.
</param>
            <param name="configurationType">
The type of the configuration to retrieve. The supported values of configurationType 
are Raw or (Fallback | NoFiltering). 
</param>
            <returns>
An <see cref="T:Microsoft.Search.Autopilot.IConfiguration" /> used to read the configuration file's settings.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.ReadBufferConfiguration(System.String)">
            <summary>
Opens and parses the specified configuration string.
</summary>
            <param name="configurationString">
The string of configuration settings.
</param>
            <returns>
An <see cref="T:Microsoft.Search.Autopilot.IConfiguration" /> used to read the configuration file's settings.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.ReadFileConfiguration(System.String,System.Boolean)">
            <summary>
Opens and parses the specified configuration file.
</summary>
            <param name="filePath">
The path of the configuration file to open.
</param>
            <param name="fileIsEncrypted">
Whether or not the configuration file is encrypted.
</param>
            <returns>
An <see cref="T:Microsoft.Search.Autopilot.IConfiguration" /> used to read the configuration file's settings.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.ReadFileConfiguration(System.String)">
            <summary>
Opens and parses the specified configuration file.
</summary>
            <param name="filePath">
The path of the configuration file to open.
</param>
            <returns>
An <see cref="T:Microsoft.Search.Autopilot.IConfiguration" /> used to read the configuration file's settings.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.Initialize(System.String,System.String,Microsoft.Search.Autopilot.IConfiguration,System.String,Microsoft.Search.Autopilot.IConfiguration,System.Collections.Generic.IEnumerable`1{System.String})">
            <summary>
Initializes the service's configuration.
</summary>
            <remarks>
Initialization of the configuration SDK is typically done
through <see cref="T:Microsoft.Search.Autopilot.APRuntime" />.
</remarks>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.Initialize(System.String,System.String,Microsoft.Search.Autopilot.IConfiguration,System.String,Microsoft.Search.Autopilot.IConfiguration)">
            <summary>
Initializes the service's configuration.
</summary>
            <remarks>
Initialization of the configuration SDK is typically done
through <see cref="T:Microsoft.Search.Autopilot.APRuntime" />.
</remarks>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.Initialize(System.String,System.String,Microsoft.Search.Autopilot.IConfiguration,System.String)">
            <summary>
Initializes the service's configuration.
</summary>
            <remarks>
Initialization of the configuration SDK is typically done
through <see cref="T:Microsoft.Search.Autopilot.APRuntime" />.
</remarks>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.Initialize(System.String,System.String,Microsoft.Search.Autopilot.IConfiguration)">
            <summary>
Initializes the service's configuration.
</summary>
            <remarks>
Initialization of the configuration SDK is typically done
through <see cref="T:Microsoft.Search.Autopilot.APRuntime" />.
</remarks>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfiguration.Initialize(System.String,System.String)">
            <summary>
Initializes the service's configuration.
</summary>
            <remarks>
Initialization of the configuration SDK is typically done
through <see cref="T:Microsoft.Search.Autopilot.APRuntime" />.
</remarks>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APConfiguration.OverridePaths">
            <summary>
Gets the override paths.
</summary>
            <returns>
The override paths or an empty list if they could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APConfiguration.IsInitialized">
            <summary>
Gets if the configuration has been initilaized.
</summary>
            <returns>
Whether or not the configuration has been initialized.
</returns>
        </member>
        <member name="T:Microsoft.Search.Autopilot.APConfiguration">
            <summary>
Serves as the central class for interacting with the Configuration SDK.
</summary>
            <remarks>
This class corresponds to the Configuration class in the native SDK.  Additionally,
it provides some additional functionality specific to the managed implementation.
</remarks>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ConfigurationType">
            <summary>
The differnt types of configuration available.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.Default">
            <summary>
The default configuration type.
</summary>
            <remarks>
By default, the configuration is filtered for the current
cluster and environment and uses override configurations (BRS)
as specified in the bootstrap configuration.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.PathMask">
            <summary>
The configuration path mask.
</summary>
            <remarks>
This mask may be applied to the configuration type to
isolate just the Path type.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.AllClusterStatePath">
            <summary>
This flag is ignored if the configuration path is
fully qualified (not relative).
</summary>
            <remarks>
The path to AllClusterState directory
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.ClusterStateRootPath">
            <summary>
This flag is ignored if the configuration path is
fully qualified (not relative).
This path is the root of all the environments within the cluster
i.e. all the environment directories as well as the cluster shared directory 
are rooted in this directory.
</summary>
            <remarks>
The path to ClusterState\&lt;clustername&gt; directory
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.AutopilotServicePath">
            <summary>
This flag is ignored if the configuration path is
fully qualified (not relative).
</summary>
            <remarks>
The path for the \%AutopilotService% directory
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.ClusterRootPath">
            <summary>
The configuration is cluster-wide.
</summary>
            <remarks>
This flag is ignored if the configuration path is
fully qualified (not relative).

The configuration is resolved against the cluster-wide
configuration location. This configuration is the root of all
the environments within the cluster i.e. all the environment
directories as well as the cluster shared directory are rooted
in this directory.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.DataPath">
            <summary>
The configuration is in the data location.
</summary>
            <remarks>
This flag is ignored if the configuration path is
fully qualified (not relative).

The configuration is resolved against the data
location. The data location is specified in the bootstrap
configuration.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.BootstrapPath">
            <summary>
The configuration is in the bootstrap location (either
the bootstrap search path or the bootstrap directory).
</summary>
            <remarks>
This flag is ignored if the configuration path is
fully qualified (not relative).

The configuration is resolved against the bootstrap
location(s). For example, the bootstrap location may be
the parent directory of the application.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.GlobalPath">
            <summary>
The configuration is global.
</summary>
            <remarks>
This flag is ignored if the configuration path is
fully qualified (not relative).

The configuration is resolved against the global configuration
location(s). This configuration is shared by all the clusters.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.ClusterPath">
            <summary>
The configuration is cluster-wide.
</summary>
            <remarks>
The configuration is cluster-wide.

This flag is ignored if the configuration path is
fully qualified (not relative).

The configuration is resolved against the cluster-wide
configuration location(s). This configuration is shared by all
the environments within the cluster.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.EnvironmentPath">
            <summary>
The configuration is environment-wide.
</summary>
            <remarks>
This flag is ignored if the configuration path is
fully qualified (not relative).

The configuration is resolved against the environment
configuration location(s). This configuration is shared by all
the applications running within the environment.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.ApplicationPath">
            <summary>
The configuration is application specific.
</summary>
            <remarks>
This configuration is located in or relative to the
application directory or search path.

This flag is ignored if the configuration path is
fully qualified (not relative).

Other configuration types may be used to access
configurations that are not located in the application
specific directory.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.Encrypted">
            <summary>
The configuration is encrypted.
</summary>
            <remarks>
The configuration is in an an encrypted file.
If this flag is not specified, the configuration is
assumed to be in a plain file.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.UnderlyingOverride">
            <summary>
The configuration's override.
</summary>
            <remarks>
If an application needs to access the override applied
to a specific configuration, the application needs to
request the override using the configuration's name and
this flag.

The override obtained using this flag will contain only
the sections applicable to the configuration with the
section names already resolved (i.e. if the override
section name is [app$config$section], the returned
section name will be [section]).

The only reason to use this flag is to do some special
override processing.

The application would get the configuraiton using the
NoOverride flag to get the configuration without
the applied override. Then the application would get
the override using this UnderlyingOverride flag
to get the configuration's override. Then the application
would do some special transformations to change the
normal override behavior.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.Fallback">
            <summary>
The configuration is to be read in a fallback mode.
</summary>
            <remarks>
If this flag is used, the configuration returned by
GetConfiguration() will have it's parameter names
resolved in a fallback mode. Any call to get a configuration
parameter will attempt to get the most qualified parameter
first, and, failing that, get the next most qualified parameter.

This flag is useful for non-filtered configurations
(see NoFiltering) when qualified parameter names
are used by the calling application.

For example, if the application requsts to get a parameter
using a name like cluster#environment$name, this flag will
cause the configuration to do the following until it finds
the parameter:
       look up cluster#environment$name
       look up environment$name
       look up cluster#name
       look up name

For example, for cluster#name parameter:
       look up cluster#name
       look up name

For example, for environment$name parameter:
       look up environment$name
       look up name

For example, for name parameter:
       look up name

The actual separator characters used to separate the cluster
and environment names are CLUSTER_SEPARATOR and
ENVIRONMENT_SEPARATOR.

NOTE: This flag should only be used by mangement applications
that work with multiple clusters and/or environments at the
same time.

NOTE: Do not use this flag unnecessarily as there will be
a performance drain due to multiple lookups.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.AutomaticallyUpdate">
            <summary>
The configuration is to be automatically updated.
</summary>
            <remarks>
If this flag is used, the configuration returned by
GetConfiguration() will be automatically updated with
new values if the values change. The caveat is that the
access to the configuration will be synchronized and
may cause some performance drain (due to the use of
a critical section for every call).

Configuration change listeners are always notified after
the configuration values are updated for configurations
that were obtained using this flag.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.Raw">
            <summary>
The configuration is raw meaning no filtering, overrides,
or macro expansion will be used.
</summary>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.NoMacroExpansion">
            <summary>
The configuration is not to be automatically macro-expanded.
</summary>
            <remarks>
If this flag is used, the configuration returned by
GetConfiguration() will not have embedded macros expanded by
GetParameter, etc.

If the flag is omitted, the underling configuration will be wrapped
with a thin wrapper that expands macro invocations each time
a parameter is fetched.

If a macro's result value changes independently of changes to the
configuration, configuration change notification will not automatically occur, but the
next time change notification happens, the new values will be identified
as having changed.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.NoFiltering">
            <summary>
The configuration is not filtered for the current
cluster and environment.
</summary>
            <remarks>
Applications should never use this flag for normal
configurations since it disables filtering by cluster
and environment. If filtering is disabled, applications
will have to explicitly attempt to use various combinations
of cluster and environment to qualify parameter names.

Some applications that work across multiple environments
may use this flag but provide only the cluster name to
the configuration; this will enable filtering by cluster
and the application can do the filtering by environment.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.ConfigurationType.NoOverrides">
            <summary>
The configuration does not use overrides (BRS).
</summary>
            <remarks>
Applications should never use this flag for normal
configurations since it disables overrides for that
configuration.

Applications should use this override if they take
care of the overrides for special processing such
as reading the override first and applying special
transforms to the configuration file.
</remarks>
        </member>
        <member name="P:Microsoft.Search.Autopilot.IConfiguration.NativeIConfiguration">
            <summary>
Holds the native pointer to the underlying IConfiguration
object.  This will be used to proxy all the GetXParameter
calls through.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.IConfiguration">
            <summary>
Serves as a common interface for interacting with a configuration.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.ToString">
            <summary>
Retrieves a string representation of the specified configuration.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetDateTimeValue(System.String,System.String,System.DateTime)">
            <summary>
Gets the value of a key as a DateTime.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a DateTime if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetDateTimeValue(System.String,System.String)">
            <summary>
Gets the value of a key as a DateTime.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a DateTime if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetDoubleValue(System.String,System.String,System.Double)">
            <summary>
Gets the value of a key as a double.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a double if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetDoubleValue(System.String,System.String)">
            <summary>
Gets the value of a key as a double.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a double if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetSingleValue(System.String,System.String,System.Single)">
            <summary>
Gets the value of a key as a single.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a single if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetSingleValue(System.String,System.String)">
            <summary>
Gets the value of a key as a single.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a single if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetUInt64Value(System.String,System.String,System.UInt64)">
            <summary>
Gets the value of a key as an unsigned 64 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as an unsigned 64 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetUInt64Value(System.String,System.String)">
            <summary>
Gets the value of a key as an unsigned 64 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as an unsigned 64 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetUInt32Value(System.String,System.String,System.UInt32)">
            <summary>
Gets the value of a key as an unsigned 32 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as an unsigned 32 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetUInt32Value(System.String,System.String)">
            <summary>
Gets the value of a key as an unsigned 32 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as an unsigned 32 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetUInt16Value(System.String,System.String,System.UInt16)">
            <summary>
Gets the value of a key as an unsigned 16 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as an unsigned 16 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetUInt16Value(System.String,System.String)">
            <summary>
Gets the value of a key as an unsigned 16 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as an unsigned 16 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetInt64Value(System.String,System.String,System.Int64)">
            <summary>
Gets the value of a key as a 64 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a 64 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetInt64Value(System.String,System.String)">
            <summary>
Gets the value of a key as a 64 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a 64 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetInt32Value(System.String,System.String,System.Int32)">
            <summary>
Gets the value of a key as a 32 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a 32 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetInt32Value(System.String,System.String)">
            <summary>
Gets the value of a key as a 32 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key" />
            <returns>
The value of the key as a 32 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetInt16Value(System.String,System.String,System.Int16)">
            <summary>
Gets the value of a key as a 16 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a 16 bit integer if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetInt16Value(System.String,System.String)">
            <summary>
Gets the value of a key as a 16 bit integer.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a 16 bit integer if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetBoolValue(System.String,System.String,System.Boolean)">
            <summary>
Gets the value of a key as a bool.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a bool if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetBoolValue(System.String,System.String)">
            <summary>
Gets the value of a key as a bool.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a bool if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetStringValueAndSplit(System.String,System.String,System.String)">
            <summary>
Gets the value of a key as a string and splits it based on the specified separator.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="separator">
The characters that separate each element in the list.
</param>
            <returns>
The value of the key as a split string if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetStringValue(System.String,System.String,System.String)">
            <summary>
Gets the value of a key as a string.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <param name="defaultValue">
The default value to return if the key is not found.
</param>
            <returns>
The value of the key as a string if the key is found, otherwise the specified default value.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetStringValue(System.String,System.String)">
            <summary>
Gets the value of a key as a string.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
The value of the key as a string if the key is found.
</returns>
            <exception cref="T:Microsoft.Search.Autopilot.APException">
Thrown if the key cannot be found.
</exception>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetSectionKeyCount(System.String)">
            <summary>
Gets the number of keys within the given section.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <returns>
The count of keys within the given section.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.GetSectionKeys(System.String)">
            <summary>
Gets all the keys within the specified section.
</summary>
            <param name="sectionName">
The name of section to search within.
</param>
            <returns>
The keys contained within a string array or a zero element array
if no keys are present.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.KeyExists(System.String,System.String)">
            <summary>
Searches for the given key within the specified section.
</summary>
            <param name="sectionName">
The section to search within.
</param>
            <param name="key">
The key to search for.
</param>
            <returns>
True/False based on if the key exists in the given section.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.IPublicConfiguration.SectionExists(System.String)">
            <summary>
Searches for the specified section.
</summary>
            <param name="sectionName">
The section name to be checked for existence.
</param>
            <returns>
True/False based on if the section exists.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.IPublicConfiguration.SectionCount">
            <summary>
Gets the number of sections within the configuration.
</summary>
            <returns>
The count of sections in the configuration.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.IPublicConfiguration.Sections">
            <summary>
Gets all the sections within the configuration.
</summary>
            <returns>
The section names contained within a string array or a zero element array
if no sections are present.
</returns>
        </member>
        <member name="T:Microsoft.Search.Autopilot.IPublicConfiguration">
            <summary>
Serves as a common interface for interacting with a configuration that can be faked out for test purposes.
IConfiguration (below) has properties of hidden types.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.NativeIConfigurationWrapper.GetNativeIConfiguration">
            <summary>
Gets the native IConfiguration wrapped by this instance.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.NativeIConfigurationWrapper.op_MemberSelection">
            <summary>
Forwards arrow notation syntax to native IConfiguration.
</summary>
            <summary>
Forwards arrow notation syntax to native IConfiguration.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.NativeIConfigurationWrapper.#ctor(apsdk.Ptr&lt;apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Initializes a new instance of the <see cref="T:Microsoft.Search.Autopilot.NativeIConfigurationWrapper" /> class.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.NativeIConfigurationWrapper">
            <summary>
Used to wrap the native IConfiguration.  
</summary>
            <remarks>
This class is necessary because the native SDK returns a reference
counted wrapped IConfiguration.  Managed classes can
only have pointer fields to native classes and holding a 
pointer directly to the referenced counted instance does
not keep it from destroying itself.  For this reason this
native class holds the configuration at class level scope
and that managed code can hold a pointer to this class.
</remarks>
        </member>
        <member name="F:Microsoft.Search.Autopilot.APConfigurationListener.funcPtr">
            <summary>
The callback method that subscribed
to this change event.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfigurationListener.ConfigurationChanged(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*,apsdk.Ptr&lt;apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Method called when the configuration it is subscribed to
changes.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APConfigurationListener.#ctor(Microsoft.Search.Autopilot.ConfigurationChangedHandler)">
            <summary>
Initializes a new instance of <see cref="T:Microsoft.Search.Autopilot.APConfigurationListener" />.
</summary>
            <param name="handler">
The handler that registered for this listener.
</param>
        </member>
        <member name="T:Microsoft.Search.Autopilot.APConfigurationListener">
            <summary>
A native implementation of the IConfigurationListener interface
that we use to proxy configuration changed events back and forth 
between the native and managed SDK.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ConfigurationChangedHandler">
            <summary>
The handler used when registering for a configuration changed event.
</summary>
        </member>
        <member name="P:Microsoft.Search.Autopilot.ConfigurationChangedEventArgs.Name">
            <summary>
Gets the configuration's name that was modified.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.ConfigurationChangedEventArgs.#ctor(System.String)">
            <summary>
Initializes a new instance of <see cref="T:Microsoft.Search.Autopilot.ConfigurationChangedEventArgs" />.
</summary>
            <param name="name">
The name of the configuration that was modified.
</param>
        </member>
        <member name="T:Microsoft.Search.Autopilot.ConfigurationChangedEventArgs">
            <summary>
The event arguments that are provided when a configuration changes.
</summary>
        </member>
        <member name="M:apsdk.APDateTime.ToString2(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64)">
            <summary>
Converts the APDateTime to a string representation, in the format yyyy-mm-dd hh:mm:ss.sss
</summary>
            <param name="buf">The storage location for the output string.</param>
            <param name="len">The size of the storage location for the output string.</param>
        </member>
        <member name="M:apsdk.APDateTime.ToString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64)">
            <summary>
Converts the APDateTime to a string representation, in the format mm/dd/yyyy hh:mm:ss
</summary>
            <param name="buf">The storage location for the output string.</param>
            <param name="len">The size of the storage location for the output string.</param>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.PodListFilePath">
            <summary>
Gets the pod list path.
</summary>
            <returns>
The pod list path or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.MachineListFilePath">
            <summary>
Gets the machine list path.
</summary>
            <returns>
The machine list path or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.PhysicalIpAddress">
            <summary>
Gets the physical IP address.
</summary>
            <returns>
The physical IP address or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.PhysicalMachineName">
            <summary>
Gets the physical machine name.
</summary>
            <returns>
The physical machine name or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.RawMachineName">
            <summary>
Gets the raw machine name.
</summary>
            <returns>
The raw machine name or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.MachineName">
            <summary>
Gets the machine name.
</summary>
            <returns>
The machine name or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.MachineFunction">
            <summary>
Gets the machine function.
</summary>
            <returns>
The machine function name or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.NetworkDataDirectoryNoInstanceOrServerName">
            <summary>
Gets the network data directory without the server or instance name.
</summary>
            <returns>
The network data directory or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.NetworkDataDirectoryNoServerName">
            <summary>
Gets the network data directory without the server name.
</summary>
            <returns>
The network data directory or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.LocalUNCDataDirectory">
            <summary>
Gets the local UNC data directory.
</summary>
            <returns>
The local UNC data directory without the current instance or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.CurrentInstanceLocalUNCDataDirectory">
            <summary>
Gets the current instance's local UNC data directory.
</summary>
            <returns>
The current instance's local UNC data directory or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.DataDirectory">
            <summary>
Gets the data directory.
</summary>
            <returns>
The data directory without the current instance or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.CurrentInstanceDataDirectory">
            <summary>
Gets the current instance's data directory.
</summary>
            <returns>
The current instance's data directory or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.DefaultConfigurationDirectory">
            <summary>
Gets the default configuration directory.
</summary>
            <returns>
The default configuration directory or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.DefaultConfigurationPath">
            <summary>
Gets the default configuration path.
</summary>
            <returns>
The default configuration path or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.ExecutableDirectory">
            <summary>
Gets the executable's directory.
</summary>
            <returns>
The executable's directory or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.InitialWorkingDirectory">
            <summary>
Gets the initial working directory.
</summary>
            <returns>
The initial working directory or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.CockpitUrlPrefix">
            <summary>
Gets the CockpitUrl
</summary>
            <returns>
The CockpitUrl
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.EnvironmentName">
            <summary>
Gets the environment name.
</summary>
            <returns>
The environment name or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.ClusterName">
            <summary>
Gets the cluster name.
</summary>
            <returns>
The cluster name or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.ApplicationName">
            <summary>
Gets the application name.
</summary>
            <returns>
The current application name or String.Empty if it could
not be retrieved.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.AddGuidToCounterFilename(System.Boolean)">
            <summary>
Add a GUID to the counters file name. Must be called before Initialize
</summary>
            <param name="val">
True = add it; False = don't
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.SetSupportProcessWideCounters(System.Boolean)">
            <summary>
Set support for process wide counters. Must call before CommonInit()
</summary>
            <param name="val">
True = use them; False = don't
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.SetUseEfficientExtCtrAllocation(System.Boolean)">
            <summary>
Use more efficient ext counter implementation, with catches. Can be called any time (see other comments in counters.cpp)
</summary>
            <param name="val">
True = use it; False = don't
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.SetUseOptimizedCounterInstanceLookup(System.Boolean)">
            <summary>
Use more efficient counter instance lookup implementation.  Must be called before Initialize
</summary>
            <param name="val">
True = use it; False = don't
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.SetUseOptimizedCounterAllocation(System.Boolean)">
            <summary>
Use more efficient counter allocation implementation.  Must be called before Initialize
</summary>
            <param name="val">
True = use it; False = don't
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.SetMaxCountersFileSize(System.Int32)">
            <summary>
Set the size of the counters file. Must be called before Initialize
</summary>
            <param name="val">
Size of file
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.SetCounterFile(System.String)">
            <summary>
Set the counters file name
</summary>
            <param name="counterFilename">
Filename for counters
</param>
        </member>
        <member name="P:Microsoft.Search.Autopilot.APRuntime.IsInitialized">
            <summary>
Gets if the configuration has been initilaized.
</summary>
            <returns>
Whether or not the configuration has been initialized.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.Uninitialize">
            <summary>
Uninitializes the functionality started after initialization was performed.
</summary>
            <remarks>
This method needs to only be called in the situation where the application needs to unload
an app domain containing the APSDK and it is the only app domain which utilizes it within the process.
If the application does not match this behavior, this method does not need to be called as the majority
of the time cleanup occurs on process shutdown as expected.
In the special cases where this is necessary, the cleanup logic will wait on threads within DLLMain which 
will not get signaled even though they exit as expected.  This will cause the wait to timeout and additional 
functionality to be run after some cleanup has occurred resulting in undefined behavior (often access violations).
Waiting on threads in DLLMain is generally discouraged as it can also lead to DLL loader lock based deadlocks.
</remarks>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.Initialize(System.String,Microsoft.Search.Autopilot.IConfiguration,Microsoft.Search.Autopilot.IConfiguration)">
            <summary>
Initializes the various components of the autopilot system.
</summary>
            <param name="configurationFileName">The configuration file to use for initialization.</param>
            <param name="inMemoryAutoPilot">In-memory autopilot.ini.</param>
            <param name="inMemoryDefaultConfig">In-memory default configuration.</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.Initialize(System.String)">
            <summary>
Initializes the various components of the autopilot system.
</summary>
            <param name="configurationFileName">
The configuration file to use for initialization.
</param>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.Initialize">
            <summary>
Initializes the various components of the autopilot system.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APRuntime.EnsureConfigurationInitialized">
            <summary>
Determines if Runtime has been initialized.  If not an exception is thrown.
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.APRuntime">
            <summary>
Serves as the main driver for the autopilot system.
</summary>
        </member>
        <member name="M:Microsoft.Search.Autopilot.APException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Initializes a new instance of <see cref="T:Microsoft.Search.Autopilot.APException" /> with serialized data.
</summary>
            <param name="info">
The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception
being thrown.
</param>
            <param name="context">
The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or
destination.
</param>
        </member>
        <member name="T:Microsoft.Search.Autopilot.APException">
            <summary>
Serves as the standard exception thrown by the managed SDK.
</summary>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
Indicates that marked element should be localized or not.
</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
</summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
Indicates that the marked method unconditionally terminates control flow execution.
For example, it could unconditionally throw exception
</summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
Indicates that method doesn't contain observable side effects.
The same as <see cref="!:System.Diagnostics.Contracts.PureAttribute" /></summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
Indicates that the value of marked element could never be <c>null</c></summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
For example, <see cref="T:System.ArgumentNullException" /> has such parameter.
</summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
If the parameter is delegate, indicates that delegate is executed while the method is executed.
If the parameter is enumerable, indicates that it is enumerated while the method is executed.
</summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
There is only exception to compare with <c>null</c>, it is permitted
</summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
</summary>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
When applied to target attribute, specifies a requirement for any type which is marked with 
target attribute to implement or inherit specific type or types
</summary>
            <example>
                <code>
[BaseTypeRequired(typeof(IComponent)] // Specify requirement
public class ComponentAttribute : Attribute 
{}

[Component] // ComponentAttribute requires implementing IComponent interface
public class MyComponent : IComponent
{}
</code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
Indicates the condition parameter of the assertion method. 
The method itself should be marked by <see cref="!:AssertionMethodAttribute" /> attribute.
The mandatory argument of the attribute is the assertion type.
</summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
Indicates that marked method builds string by format pattern and (optional) arguments. 
Parameter, which contains format string, should be given in constructor.
The format string should be in <see cref="!:string.Format(IFormatProvider,string,object[])" /> -like form
</summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
so this symbol will not be marked as unused (as well as by other usage inspections)
</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
Indicates that the marked parameter should be evaluated to not null value
</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
Indicates that the marked parameter should be evaluated to null value
</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
Indicates that the marked parameter should be evaluated to false
</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
Indicates that the marked parameter should be evaluated to true
</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
Entity marked with attribute and all its members considered used
</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
Members of entity marked with attribute are considered used
</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
Indicates implicit instantiation of a type with fixed constructor signature.
That means any unused constructor parameters won't be reported as such.
</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
Indicates implicit instantiation of a type
</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
Indicates implicit assignment to a member
</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
Only entity marked with attribute considered used
</summary>
        </member>
        <member name="T:Microsoft.Search.Autopilot.LogLevel">
            <summary>
Enumeration that represents the log levels for logging purpose
</summary>
        </member>
        <member name="M:apsdk.configuration.Configuration.ValidateInitializeStarted">
 Validates initialization started. Initializes a default configuration manager if initialization has not yet begun

 This method will assert if initialization was not performed
 or failed.

 Returns true if initialization was performed OK.

</member>
        <member name="M:apsdk.configuration.Configuration.ValidateInitialized">
 Validates initialization. Initializes a default configuration manager if initialization has not yet happened

 This method will assert if initialization was not performed
 or failed.

 Returns true if initialization was performed OK.

</member>
        <member name="M:apsdk.configuration.Configuration.ExpandMacros(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*)">
   Replaces zero or more occurrences of simple intrinsic macro strings of the form {!macroname args} or {%macroname} within a string.

   See ExpandMacro for a list of supported macros.
   The default implementation calls ExpandMacro repeatedly (through InternalExpandMacroInPlace) to replace invocations within the string.

 Returns false if there was an error expanding the macros.

</member>
        <member name="M:apsdk.configuration.Configuration.ExpandMacro(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*)">
   Fetches the value of a single macro invocation.

   macroName contains the name of the macro, either "!macroname" or "%envvarname".
   If argsString is NULL, there are no arguments to the macro. Otherwise, it points to a whitespace-trimmed string containing the macro arguments.

   Returns false if the expansion failed.


</member>
        <member name="M:apsdk.configuration.Configuration.GenerateDefaultBootstrapConfig(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Generates a default bootstrap configuration.

 This method may be called before the Initialize()is called.

 This is useful to pre-create a default bootstrap configuration when
 one is not available for some reason. The default bootstrap
 will set up some values that are useful during the initialization.

 The returned configuration is mutable and may be extended with
 other values.

 If the data directory is NULL, the application directory is used
 as the data directory.

 If the network data directory is NULL, a probably icorrect data
 directory name is made up.

 If the environment or cluster name is NULL, the corresponding
 entries are not made in the bootstrap configuration.

 Some parameters that are required in the bootstrap configuration
 are added.

 Returns NULL if the configuration could not be allocated.

</member>
        <member name="M:apsdk.configuration.Configuration.GenerateDefaultConfig">
 Generates a default configuration.

 This method may be called before the Initialize()is called.

 This is useful to pre-create a default configuration when one
 is not available for some reason. The default configuration
 will set up some values that are useful during the initialization.

 The returned configuration is mutable and may be extended with
 other values.

 The configuration returned by this method is independent of the
 Initialize() and will always return the same configuration.

 Returns NULL if the configuration could not be allocated.

</member>
        <member name="M:apsdk.configuration.Configuration.GetPort(System.UInt16*,System.UInt16,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 look up the port number of instance port# basePort running on the specified machine.
 Instance numbering in the machine name is taken into account.
 The desired port is filled in to pPortOut.
 If machine is NULL, the value for the local instance is returned.

 Returns false on failure.

</member>
        <member name="M:apsdk.configuration.Configuration.GetAddressAndPort(in_addr*,System.UInt16*,System.UInt16,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 look up the IP address and port number of instance port #basePort running on the specified machine.
 Instance numbering in the machine name is taken into account.
 The desired address and port are filled in to pAddrOut and pPortOut.
 Either pAddrOut or pPortOut may be NULL to omit determination of that value.
 If machine is NULL, values for the local instance are returned.

 Returns false on failure.

</member>
        <member name="M:apsdk.configuration.Configuration.GetUncDataDir(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Fetches a UNC path within a specific machine's data dir, taking instancing into account.

 If machine is NULL, uses the current machine.
 If subpath is NULL or empty, simply constructs a path to the data directory itself.

 Returns false with GetLastError() if the path could not be constructed.


</member>
        <member name="M:apsdk.configuration.Configuration.GetUncPathNoInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Strips off any instancing alteration from the machine name and constructs a UNC path to the machine without regard to the instance
 number. Use this method when you want to get to a well-known base share on a server.

 This method is generally not very useful for multi-instance, since all instances on a particular machine will resolve
 to the same path.

 If machine is NULL, uses the current machine.
 If shareNameAndSubpath is NULL or empty, simply constructs "\\rawmachinename".

 Returns false with GetLastError() if the path could not be constructed.


</member>
        <member name="M:apsdk.configuration.Configuration.IsUsingNewInstanceNumbers">
Returns true if new-style instance numbering is being used.

</member>
        <member name="M:apsdk.configuration.Configuration.GetPodlistFile">
Returns the fully qualified podlist file

</member>
        <member name="M:apsdk.configuration.Configuration.GetMachinelistFile">
Returns the fully qualified machinelist file

</member>
        <member name="M:apsdk.configuration.Configuration.GetRawMachineName">
Returns the real machine name, not modified by multi-instance.

</member>
        <member name="M:apsdk.configuration.Configuration.GetMachineName">
Returns the Multi-Instance machine name. In single-instance mode, this is the computer name. In multi-instance
mode it is virtualized.

</member>
        <member name="M:apsdk.configuration.Configuration.GetInstanceSubdirName">
Returns the Multi-Instance subdir name.

</member>
        <member name="M:apsdk.configuration.Configuration.GetInstanceRoot">
Returns the Multi-Instance root.

</member>
        <member name="M:apsdk.configuration.Configuration.GetInstanceId">
Returns the multi-instance instance ID.

</member>
        <member name="M:apsdk.configuration.Configuration.GetInstanceNum">
If running multi-instance, returns the instance #.

</member>
        <member name="M:apsdk.configuration.Configuration.GetExeDir">
Returns the directory in which the currently running EXE resides.

</member>
        <member name="M:apsdk.configuration.Configuration.GetInitialWorkingDir">
Returns the directory in which Configuration was launched.

</member>
        <member name="M:apsdk.configuration.Configuration.GetNetworkDataDirNoInstanceNoServerName">
Returns the network data dir without the \\servername\ prefix (not modified for the current instance).

</member>
        <member name="M:apsdk.configuration.Configuration.GetNetworkDataDirNoServerName">
Returns the network data dir without the \\servername\ prefix (modified for the current instance # if necessary).

</member>
        <member name="M:apsdk.configuration.Configuration.GetLocalUncDataDirNoInstance">
Returns the UNC path to the local data directory (not modified for the current instance #).
Advanced! Most applications should use GetLocalUncDataDir().

</member>
        <member name="M:apsdk.configuration.Configuration.GetLocalUncDataDir">
Returns the UNC path to the local data directory (modified for the current instance # if necessary).

</member>
        <member name="M:apsdk.configuration.Configuration.GetDataDirNoInstance">
Returns the fully qualified data directory (not modified for the current instance #).
Advanced! Most applications should use GetDataDir().

</member>
        <member name="M:apsdk.configuration.Configuration.GetDataDir">
Returns the fully qualified data directory (modified for the current instance # if necessary).

</member>
        <member name="M:apsdk.configuration.Configuration.ComposeParameterName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Composes a parameter name from component names.

 If the @a clusterPart or the @a environmentPart is NULL or
 empty, it is not used.

</member>
        <member name="M:apsdk.configuration.Configuration.BreakParameterName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferen">
 Separates a parameter name into component names.

 The parameter name is broken down into the cluster, environment,
 and plain parameter name components.

 @return @c false if the original parameter name has a bad format.

</member>
        <member name="M:apsdk.configuration.Configuration.UnregisterListener(System.Void*)">
 Unregisters a configuration change listener.

 The Initialize() is required to be called before this method.

 Returns false if the method fails.

</member>
        <member name="M:apsdk.configuration.Configuration.RegisterListener(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*,apsdk.configuration.IConfigurationListener*,apsdk.configuration.Configuration.Types)">
 Registers a configuration change listener.

 The Initialize() is required to be called before this method.

 The name and cookie pointers are preserved and are used to
 signal the newly registered listener when configuration contents
 change. The name pointer may be NULL for a default configuration;
 if not NULL, the name pointer must point to a string. The cookie
 pointer does not need to be valid.

 Returns the listener handle that may be used to unregister the
 listener. Returns NULL if the listener could not be registered.

</member>
        <member name="M:apsdk.configuration.Configuration.SignalListeners(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.Configuration.Types)">
 Signals a configuration change.

 The Initialize() is required to be called before this method.

 This method is used to signal all the configuration listeners
 registered for this name. This method may be used by the
 application to signal a change even if the configuration has
 not changed.

 If the configuration name is NULL, the default configuration
 listeners will be signalled.

 The configuration type is used to resolve the configuration
 name.

 Returns false if the method fails.

</member>
        <member name="M:apsdk.configuration.Configuration.SetConfiguration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.Configuration.Types)">
 Sets an "in-memory" configuration.

 The Initialize() is required to be called before this method.

 If the configuration name is NULL, the default configuration
 is replaced by this configuration.

 If the configuraiton is NULL, the configuration is cleared.
 If the configuration is not NULL, a copy of the configuration
 is made; any updates to the original configuration subsequent
 to this call will not be reflected in the stored copy.

 The configuration being set is assumed to be raw and without macro expansion;
 macros, overrides, and filtering are applied to it once it is set.

 The configuration type is used only to resolve the configuration
 name. This method may be used to replace the values of an
 already loaded configuration; this happens when the fully
 qualified configuration name that's being set matches an
 already loaded configuration.

 Configuration notification listeners registered for
 this name are called as needed. Note that the configuraiton
 listeners will not be called if the newly set configuration
 has the same contents as the old configuration.

 Returns false if the method fails.

</member>
        <member name="M:apsdk.configuration.Configuration.RemoveConfiguration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.Configuration.Types)">
Erases configuration by a configuration name.

</member>
        <member name="M:apsdk.configuration.Configuration.GetFlattenedConfiguration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Gets the configuration based on the flattened file. If the
flattened file of this configuration does not exist, it will
fall back to the original configuration.

</member>
        <member name="M:apsdk.configuration.Configuration.GetRawConfiguration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Gets a raw configuration, non-overriden and unfiltered.
The configuration is not cached and will not receive update
if file modified.

</member>
        <member name="M:apsdk.configuration.Configuration.GetConfiguration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.Configuration.Types)">
 Gets a configuration by a configuration name.

 The Initialize() is required to be called before this method.

 If the configuration name is NULL, the default configuration
 is returned.

 If CONFIG_AUTOUPDATE flag is used, the returned configuration
 will be automatically updated with new values if the values change.
 The caveat is that the access to the configuration will be
 synchronized and may cause some performance drain.

 The returned configuration is reference counted - do not delete
 the returned configuration. When done, simply let the
 returned reference go out of scope or set it to NULL.

 Returns NULL if the configuration is not available.

</member>
        <member name="M:apsdk.configuration.Configuration.RawConfigurationExists(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.Configuration.Types)">
 Determines if a raw configuration exists for a given config name

 If the configuration name is NULL, the default configuration
 is used.


</member>
        <member name="M:apsdk.configuration.Configuration.GetDefaultConfigDirName">
Returns the fully qualified directory name containing the default configuration file.

</member>
        <member name="M:apsdk.configuration.Configuration.GetDefaultConfigPathname">
Returns the fully qualified path to the default configuration file.

</member>
        <member name="M:apsdk.configuration.Configuration.MakeConfigPathname(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.Configuration.Types,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Returns a fully qualified file name for a given configuration type.

 The Initialize() is required to be called before this method.

 If the configuration name is NULL, the default configuration
 is used.

 This method will generate a fully qualified path name for a
 configuration file relative to the directory specified by the
 CONFIG_PATH_XXX.

 If the configuration name is already fully qualified, it will not
 be changed.

 One of the CONFIG_PATH_XXX flag may be used to specify the
 type of the configuration directory to be used.

 Note that depending on the bootstrap configuration some of the
 configuration types may not be available. For example, if the
 cluster name is not set in the bootstrap configuration, the
 cluster and environment configuration directories are not available.

 Note that some environments do not have the cluster name set.
 (Applications must function correctly even under these conditions
 to be backward compatible.)

 Returns false if this type of a configuration directory is
 not available or if the method encountered an error.

</member>
        <member name="M:apsdk.configuration.Configuration.GetConfigSearchPath(apsdk.configuration.Configuration.Types)">
 Returns the search path for a given configuration type.

 One of the CONFIG_PATH_XXX flag must be used to specify the
 type of the configuration search path to be returned.

 Note that depending on the bootstrap configuration some of the
 configuration types may not be available. For example, if the
 cluster name is not set in the bootstrap configuration, the
 cluster and environment configuration search paths are not available.

 Note that some environments do not have the cluster name set.
 (Applications must function correctly even under these conditions
 to be backward compatible.)

 Note also that if a directory search path for a configuration type is not in effect,
 this method will return an empty search path. This does not mean that configurations cannot be found;
 it simply means that they are always normalized against the "default" directory where files
 of that configuration type live.

 Returns NULL if this type of a configuration search path is
 not available or if the method encountered an error.

</member>
        <member name="M:apsdk.configuration.Configuration.GetConfigDir(apsdk.configuration.Configuration.Types)">
 Returns the fully qualified directory for a given configuration type.

 The Initialize() is required to be called before this method.

 One of the CONFIG_PATH_XXX flag must be used to specify the
 type of the configuration directory to be returned.

 Note that this function does not make use of the search path for the
 given configuration type; it always uses the "default" directory
 for the config type. For this reason it is better to use
 MakeConfigPathname when the configuration name is known.

 Note that depending on the bootstrap configuration some of the
 configuration types may not be available. For example, if the
 cluster name is not set in the bootstrap configuration, the
 cluster and environment configuration directories are not available.

 Note that some environments do not have the cluster name set.
 (Applications must function correctly even under these conditions
 to be backward compatible.)

 Returns NULL if this type of a configuration directory is
 not available or if the method encountered an error.

</member>
        <member name="M:apsdk.configuration.Configuration.GetAggregateEnvironmentName">
 Returns the aggregate environment name.

 The Initialize() is required to be called before this method.

 Returns an empty string if there is no environment filtering.

 Returns NULL if the method failed.

</member>
        <member name="M:apsdk.configuration.Configuration.GetEnvironmentName">
 Returns the environment name.

 The Initialize() is required to be called before this method.

 Returns an empty string if there is no environment filtering.

 Returns NULL if the method failed.

</member>
        <member name="M:apsdk.configuration.Configuration.GetClusterName">
 Returns the cluster name.

 The Initialize() is required to be called before this method.

 Returns an empty string if there is no cluster filtering.

 Returns NULL if the method failed.

</member>
        <member name="M:apsdk.configuration.Configuration.GetOverridePathnames(std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Returns the fully qualified override pathnames.

 The Initialize() is required to be called before this method.

 The override pathnames parameter will be cleared before being set.
 The override pathnames collection will be empty if there are
 no override pathnames.

 Returns false if the method fails.

</member>
        <member name="M:apsdk.configuration.Configuration.GetBootstrapConfigName">
 Returns the fully qualified bootstrap configuration name.

 The Initialize() is required to be called before this method.

 Returns NULL if the method failed.

</member>
        <member name="M:apsdk.configuration.Configuration.GetDefaultConfigName">
 Returns the default configuration name.

 The Initialize() is required to be called before this method.

 Note that the returned name is *not* necessarily fully qualified, but will be resolved against
 the application dir and application search path when the configuration is
 looked up. If new files and/or registered in-memory configurations are added
 earlier in the search path, then the resultant path can change.

 Returns NULL if the method failed.

</member>
        <member name="M:apsdk.configuration.Configuration.GetModuleName">
 Returns the module name.

 The Initialize() is required to be called before this method.

 The module name is the binary to which the AP SDK was linked to.

 Returns NULL if the method failed.

</member>
        <member name="M:apsdk.configuration.Configuration.GetApplicationName">
 Returns the applicaiton name.

 The Initialize() is required to be called before this method.

 The application name is the last component in the fully
 qualified application directory. This is used for configuration
 overrides.

 Returns NULL if the method failed.

</member>
        <member name="M:apsdk.configuration.Configuration.Uninitialize">
 Shuts down the configuration mechanism.

 This deletes all the internal data structures and cancels all listeners.

</member>
        <member name="M:apsdk.configuration.Configuration.IsInitialized">
 Determines if the configuration has been initialized.

 The configuration MUST be initialized before most of the
 methods may be used.

</member>
        <member name="M:apsdk.configuration.Configuration.CompleteInitialize">
 Completes the alternate way to Initialize the global configuration (see PreInitialize).


 Returns false if the initialization failed and configuration
 cannot be used.

</member>
        <member name="M:apsdk.configuration.Configuration.PreInitialize(apsdk.configuration.ConfigurationManager*)">
 Alternate way to Initialize the global configuration.

 The application can call PreInitialize with a newly created, uninitialized
 subclass of ConfigurationManager to begin using that configuration manager
 for initialization. If NULL is provided, a simple uninitialized instance of the base class is created.

 Then the application can set up the ConfigurationManager as desired.
 After the configuration manager has been fully initialized, the application
 should call CompleteInitialize.

 returns true if preinitialization succeeded.

</member>
        <member name="M:apsdk.configuration.Configuration.Initialize(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*,std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifie">
 Initializes the global configuration.

 If the application directory is NULL, the directory of the
 current application module is used.

 If the default configuration name is NULL, the pre-defined default
 configuration name is used. If the default configuration name
 is not NULL, it replaces the pre-defined default configuration
 name.

 If the default configuration is not NULL, the default configuration
 will not be read from a file; rather the "in memory" default
 conifguration is used. This is useful for unit tests or
 in situations when the default configuration must be dynamically
 generated.

 If the bootstrap configuration directory is not NULL, it is
 used as the base directory for the bootstrap configuration.
 If the bootstrap configuration directory is not NULL, it is
 assumed to be either fully qualified or relative to the
 application directory.

 If the bootstrap configuration is not NULL, it is used to
 determine the cluster, environment, and data directory.
 If the bootstrap configuration is NULL, the default mechanism
 is used to determine the bootstrap configuration. If the
 bootstrap configuration is NULL and the bootstrap configuration
 cannot be read from a file or determined by some other means,
 the initialization will fail.

 If the cluster and environment are both missing from
 the bootstrap configuration, no filtering is performed and
 no cluster or environment overrides will be used.

 If the data directory is not specified in the bootstrap
 configuration, no overrides of configuration will be used.

 If the override pathnames is NULL, the default override pathnames
 are used.

 This function can be called after PreInitialize (see below) which
 allows you to subclass ConfigurationManager and set basic
 parameters before initialization. CompleteInitialize() is called
 by this function, so no further initialization can be performed
 after this call.

 Returns false if the initialization failed and configuration
 cannot be used.

</member>
        <member name="M:apsdk.configuration.Configuration.#ctor">
We do not need a constructor for this class.

</member>
        <member name="F:apsdk.configuration.Configuration.OVERRIDE_SEPARATOR_STR">
 The separator used in the override configuration section names.

 This is just a string representation of the @a OVERRIDE_SEPARATOR.

</member>
        <member name="F:apsdk.configuration.Configuration.OVERRIDE_SEPARATOR">
 The separator used in the override configuration section names.

 This override files have their section names qualified by the
 applicaiton name, configuration name, etc. All the name parts
 are separated by the same separator character.

</member>
        <member name="F:apsdk.configuration.Configuration.ENVIRONMENT_SEPARATOR_STR">
 The separator used for the environment qualifier in parameter names.

 This is just a string representation of the @a ENVIRONMENT_SEPARATOR.

</member>
        <member name="F:apsdk.configuration.Configuration.ENVIRONMENT_SEPARATOR">
 The separator used for the environment qualifier in parameter names.

 This environment name is recognized by being immediately followed
 by the environment name separator in parameter names.

</member>
        <member name="F:apsdk.configuration.Configuration.CLUSTER_SEPARATOR_STR">
 The separator used for the cluster qualifier in parameter names.

 This is just a string representation of the @a CLUSTER_SEPARATOR.

</member>
        <member name="F:apsdk.configuration.Configuration.CLUSTER_SEPARATOR">
 The separator used for the cluster qualifier in parameter names.

 This cluster name is recognized by being immediately followed
 by the cluster name separator in parameter names.

</member>
        <member name="F:CONFIG_DEFAULT">
 The default configuration type.

 By default, the configuration is filtered for the current
 cluster and environment and uses override configurations (BRS)
 as specified in the bootstrap configuration.

</member>
        <member name="F:CONFIG_PATH_MASK">
 The configuration path mask.

 This mask may be applied to the configuration type to
 isolate just the CONFIG_PATH_XXX type.

</member>
        <member name="F:CONFIG_PATH_ALL_CLUSTER_STATE">
 This flag is ignored if the configuration path is
 fully qualified (not relative).

 The path to AllClusterState directory

</member>
        <member name="F:CONFIG_PATH_CLUSTER_STATE_ROOT">
            <summary>
This flag is ignored if the configuration path is
fully qualified (not relative).

This path is the root of all the environments within the cluster
i.e. all the environment directories as well as the cluster shared directory 
are rooted in this directory.

The path to ClusterState\&lt;clustername&gt; directory
</summary>
        </member>
        <member name="F:CONFIG_PATH_AUTOPILOT_SERVICE">
            <summary>
This flag is ignored if the configuration path is
fully qualified (not relative).

The path for the \&lt;AutopilotService&gt; directory
</summary>
        </member>
        <member name="F:CONFIG_PATH_CLUSTER_ROOT">
 The configuration is cluster-wide.

 This flag is ignored if the configuration path is
 fully qualified (not relative).

 The configuration is resolved against the cluster-wide
 configuration location. This configuration is the root of all
 the environments within the cluster i.e. all the environment
 directories as well as the cluster shared directory are rooted
 in this directory.

</member>
        <member name="F:CONFIG_PATH_DATA">
 The configuration is in the data location.

 This flag is ignored if the configuration path is
 fully qualified (not relative).

 The configuration is resolved against the data
 location. The data location is specified in the bootstrap
 configuration.

</member>
        <member name="F:CONFIG_PATH_BOOTSTRAP">
 The configuration is in the bootstrap location (either
 the bootstrap search path or the bootstrap directory).

 This flag is ignored if the configuration path is
 fully qualified (not relative).

 The configuration is resolved against the bootstrap
 location(s). For example, the bootstrap location may be
 the parent directory of the application.

</member>
        <member name="F:CONFIG_PATH_BRS">
 The configuration is in the old BRS locaiton.

 This location will be deprecated once the old BRS.INI file
 is migrated to use the cluster and environment overrides.

 NOTE: Do not use this flag - it is DEPRECATED!

</member>
        <member name="F:CONFIG_PATH_GLOBAL">
 The configuration is global.

 This flag is ignored if the configuration path is
 fully qualified (not relative).

 The configuration is resolved against the global configuration
 location(s). This configuration is shared by all the clusters.

</member>
        <member name="F:CONFIG_PATH_CLUSTER">
 The configuration is cluster-wide.

 This flag is ignored if the configuration path is
 fully qualified (not relative).

 The configuration is resolved against the cluster-wide
 configuration location(s). This configuration is shared by all
 the environments within the cluster.

</member>
        <member name="F:CONFIG_PATH_ENVIRONMENT">
 The configuration is environment-wide.

 This flag is ignored if the configuration path is
 fully qualified (not relative).

 The configuration is resolved against the environment
 configuration location(s). This configuration is shared by all
 the applications running within the environment.

</member>
        <member name="F:CONFIG_PATH_APPLICATION">
 The configuration is application specific.

 This configuration is located in or relative to the
 application directory or search path.

 This flag is ignored if the configuration path is
 fully qualified (not relative).

 Other CONFIG_PATH_XXX values may be used to access
 configurations that are not located in the application
 specific directory.

</member>
        <member name="F:CONFIG_ENCRYPTED">
 The configuration is encrypted.

 The configuration is in an an encrypted file.
 If this flag is not specified, the configuration is
 assumed to be in a plain file.

</member>
        <member name="F:CONFIG_UNDERLYING_OVERRIDE">
 The configuration's override.

 If an application needs to access the override applied
 to a specific configuration, the application needs to
 request the override using the configuration's name and
 this flag.

 The override obtained using this flag will contain only
 the sections applicable to the configuration with the
 section names already resolved (i.e. if the override
 section name is [app$config$section], the returned
 section name will be [section]).

 The only reason to use this flag is to do some special
 override processing.

 The application would get the configuraiton using the
 CONFIG_NO_OVERRIDE flag to get the configuration without
 the applied override. Then the application would get
 the override ising this CONFIG_UNDERLYING_OVERRIDE flag
 to get the configuration's override. Then the application
 would do some special transformations to change the
 normal override behavior.

 NOTE: do not use this flag unless there is a good reason for it!

</member>
        <member name="F:CONFIG_FALLBACK">
 The configuration is to be read in a fallback mode.

 If this flag is used, the configuration returned by
 GetConfiguration() will have it's parameter names
 resolved in a fallback mode. Any call to get a configuration
 parameter will attempt to get the most qualified parameter
 first, and, failing that, get the next most qualified parameter.

 This flag is useful for non-filtered configurations
 (see CONFIG_NO_FILTERING) when qualified parameter names
 are used by the calling application.

 For example, if the application requsts to get a parameter
 using a name like cluster#environment$name, this flag will
 cause the configuration to do the following until it finds
 the parameter:
        look up cluster#environment$name
        look up environment$name
        look up cluster#name
        look up name

 For example, for cluster#name parameter:
        look up cluster#name
        look up name

 For example, for environment$name parameter:
        look up environment$name
        look up name

 For example, for name parameter:
        look up name

 The actual separator characters used to separate the cluster
 and environment names are CLUSTER_SEPARATOR and
 ENVIRONMENT_SEPARATOR.

 NOTE: This flag should only be used by mangement applications
 that work with multiple clusters and/or environments at the
 same time.

 NOTE: Do not use this flag unnecessarily as there will be
 a performance drain due to multiple lookups.

</member>
        <member name="F:CONFIG_AUTOUPDATE">
 The configuration is to be automatically updated.

 If this flag is used, the configuration returned by
 GetConfiguration() will be automatically updated with
 new values if the values change. The caveat is that the
 access to the configuration will be synchronized and
 may cause some performance drain (due to the use of
 a critical section for every call).

 Configuration change listeners are always notified after
 the configuration values are updated for configurations
 that were obtained using this flag.

</member>
        <member name="F:CONFIG_RAW">
 The configuration is raw.

 No filtering or overrides - raw configuration.

</member>
        <member name="F:CONFIG_NO_MACROS">
 The configuration is not to be automatically macro-expanded.

 If this flag is used, the configuration returned by
 GetConfiguration() will not have embedded macros expanded by
 GetParameter, etc.

 If the flag is omitted, the underling configuration will be wrapped
 with a thin wrapper that expands macro invocations each time
 a parameter is fetched.

 If a macro's result value changes independently of changes to the
 configuration, configuration change notification will not automatically occur, but the
 next time change notification happens, the new values will be identified
 as having changed.


</member>
        <member name="F:CONFIG_NO_FILTERING">
 The configuration is not filtered for the current
 cluster and environment.

 Applications should never use this flag for normal
 configurations since it disables filtering by cluster
 and environment. If filtering is disabled, applications
 will have to explicitly attempt to use various combinations
 of cluster and environment to qualify parameter names.

 Some applications that work across multiple environments
 may use this flag but provide only the cluster name to
 the configuration; this will enable filtering by cluster
 and the application can do the filtering by environment.

 NOTE: do not use this flag unless there is a good reason for it!

</member>
        <member name="F:CONFIG_NO_OVERRIDES">
 The configuration does not use overrides (BRS).

 Applications should never use this flag for normal
 configurations since it disables overrides for that
 configuration.

 Applications should use this override if they take
 care of the overrides for special processing such
 as reading the override first and applying special
 transforms to the configuration file.

 NOTE: do not use this flag unless there is a good reason for it!

</member>
        <member name="T:apsdk.configuration.Configuration.Types">
 The configuration types.

 The configuration types control the type of configuration
 obtained with the GetConfiguration() method.

 CONFIG_PATH_XXX types may be used to obtain configurations
 that are located in application, environment, cluster,
 or global configuration directories. Note that only one
 of the CONFIG_PATH_XXX types may be used at one time.
 The CONFIG_PATH_XXX types are ignored if the configuration
 name is fully qualified (not relative).

</member>
        <member name="D:apsdk.configuration.Configuration.OverridePathnames">
 The list of configuration override (BRS) pathnames.

 The configuration overrides (BRS) are used to override
 application configurations. (See BRS specifications.)

 The list must contain the overrides in the decreasing
 order of "strength" - the strongest override must come
 first in the list, the weakest override must come last
 in the list. There is no limit to the number of overrides.

 For example, the global override that overrides all other
 overrides must come first, the cluster override next, the
 environment override last.

 If the pathnames are not fully qualified, they are treated
 as relative to the data directory path.

</member>
        <member name="T:apsdk.configuration.Configuration">
 The global configuration accessor.

 This class accesses a single static collection of configurations to
 simplify configuration operations.

</member>
        <member name="M:apsdk.configuration.IIntrinsicMacroExpander.ExpandMacro(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*)">
   Fetches the value of a single macro invocation.

   macroName contains the name of the macro, either "!macroname" or "%envvarname".
   If argsString is NULL, there are no arguments to the macro. Otherwise, it points to a whitespace-trimmed string containing the macro arguments.

   The current supported intrinsic macros are:
       exedir - The directory in which the current running EXE is located
       bootstrapdir - The bootstrap directory (Normally ".." or whatever is in environment variable APENVIRONMENTDIR)
       environmentdir - The bootstrap directory (Normally ".." or whatever is in environment variable APENVIRONMENTDIR). Deprecated, retained for compatibility.
       configfiledir - The directory in which the default configuration file resides       
       autopilotinidir - The directory in which the bootstrap config file resides

   Returns false if the expansion failed.


</member>
        <member name="T:apsdk.configuration.IIntrinsicMacroExpander">
 Base class for a simple intrinsic macro expander.


</member>
        <member name="M:apsdk.configuration.IConfigurationListener.ConfigurationChanged(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*,apsdk.Ptr&lt;apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst&gt;)">
 Receives the notification when a configuration changes.

 name - the original name used to register the listener
 pathname - the fully qualified pathname of the conifguration
 cookie - the original cookie used to register the listener
 configuration - the new (changed) configuration instance

 The cookie is the same pointer that was used to register
 the configuration listener.

 The pathname is the fully qualified name of the configuration.
 If the configuration is in memory, the pathname will be
 the same as the name.

 The configuration reference counted pointer points to the new
 configuration. The listener may elect to preserve the pointer
 and use it.

</member>
        <member name="M:apsdk.configuration.IConfigurationListener.op_Assign(apsdk.configuration.IConfigurationListener*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
The assignment operator.

</member>
        <member name="M:apsdk.configuration.IConfigurationListener.#ctor(apsdk.configuration.IConfigurationListener!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
The copy constructor.

</member>
        <member name="M:apsdk.configuration.IConfigurationListener.Dispose">
The virtual destructor.

</member>
        <member name="M:apsdk.configuration.IConfigurationListener.#ctor">
The constructor.

</member>
        <member name="T:apsdk.configuration.IConfigurationListener">
 The interface that must be implemented by all configuration listeners
 to receive configuration change notifications.

 A Listener must remember to remove itself from being notified if
 the listener is being deleted or a crash will occur.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.Clear">
 Clears the configuration.

 Returns true if anything was cleared.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.Clone(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Clones the configuration.

 The returned configuration pointer should be reference counted
 using the Ptr&lt;&gt; template to make sure that the cloned configuration
 is deleted when no longer used.

 If section prefix is not NULL, the overriding sections that
 do not have the prefix will not be used, also the overriding
 sections that have the prefix will override sections without
 the prefix (i.e. the prefix will be removed from the section name).

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.Merge(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Merges another congiguration into this one.

 Only parameters from the source configuration that do not exist in
 this configuration are merged.

 If section prefix is not NULL, the merging sections that
 do not have the prefix will not be used, also the merging
 sections that have the prefix will merge into sections without
 the prefix (i.e. the prefix will be removed from the section name).

 Returns true if any the parameter were added to this configuration.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.Override(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Overrides this configuration from another.

 All the parametes from the source configuration are copied into
 this configuration with the exception of parameters that cannot
 be overridden.

 If the parameter exists and has the same value and flags,
 no action is taken. If a parameter with a "stronger" filter
 already exists, no action is taken.

 If section prefix is not NULL, the overriding sections that
 do not have the prefix will not be used, also the overriding
 sections that have the prefix will override sections without
 the prefix (i.e. the prefix will be removed from the section name).

 Returns true if any of the parameters were added or modified
 in this configuration.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.Copy(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Copy this configuration from another.

 All the parametes from the source configuration are copied into
 this configuration. This configuration is cleared before being
 copied into.

 If section prefix is not NULL, the source sections that
 do not have the prefix will not be used, also the source
 sections that have the prefix will be copied without
 the prefix (i.e. the prefix will be removed from the section name).

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.MergeSection(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Merges one section into another.

 Only parameters from the source section that do not exist in the
 destination section are merged.

 Returns true if any the parameter were set.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.MergeParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Merges a parameter value.

 If the parameter exists, no action is taken.

 Returns true if the parameter was set.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.MergeParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*)">
 Merges a parameter value.

 If the parameter exists, no action is taken.

 Returns true if the parameter was set.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.MergeParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.ParameterFlags)">
 Merges a parameter value.

 If the parameter exists, no action is taken.

 Returns true if the parameter was set.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.OverrideParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Overrides a parameter value.

 If the parameter cannot be overridden, no action is taken.
 If the parameter exists and has the same value and flags,
 no action is taken.

 Returns true if the parameter was set and the value or
 flags were changed.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.OverrideParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*)">
 Overrides a parameter value.

 If the parameter cannot be overridden, no action is taken.
 If the parameter exists and has the same value and flags,
 no action is taken.

 Returns true if the parameter was set and the value or
 flags were changed.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.OverrideParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.ParameterFlags)">
 Overrides a parameter value.

 If the parameter cannot be overridden, no action is taken.
 If the parameter exists and has the same value and flags,
 no action is taken.

 Returns true if the parameter was set and the value or
 flags were changed.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.RenameParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Used by ConfigurationFilter to set environment filtered
names to the non-filtered version without changing the
position of the filtered parameter
bKeepLast == true will use the position of the later of existing old and new
bKeepLast == false will use the position of the first of existing old and new

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.SetParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Sets a parameter value.

 If the parameter exists and has the same value and flags,
 no action is taken. This method ignores the "no override"
 flag of existing parameters.

 Returns true if the parameter was set and the value or
 flags were changed.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.SetParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*)">
 Sets a parameter value.

 If the parameter exists and has the same value and flags,
 no action is taken. This method ignores the "no override"
 flag of existing parameters.

 Returns true if the parameter was set and the value or
 flags were changed.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.SetParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.ParameterFlags)">
 Sets a parameter value.

 If the parameter exists and has the same value and flags,
 no action is taken. This method ignores the "no override"
 flag of existing parameters.

 Returns true if the parameter was set and the value or
 flags were changed.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.EraseParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Erases a parameter.

 Returns true if the parameter was erased.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.AddSection(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Adds an empty section.

 Returns true if the section was added or false if the section
 was already present.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.op_Assign(apsdk.configuration.IMutableConfiguration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need an assignment operator.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.#ctor(apsdk.configuration.IMutableConfiguration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need a copy constructor.

</member>
        <member name="M:apsdk.configuration.IMutableConfiguration.#ctor">
This is an interface with a protected constructor.

</member>
        <member name="T:apsdk.configuration.IMutableConfiguration">
 The mutable configuration interface.

 This interface allows configuration to be modified.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Dump(_iobuf*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Dumps the configuration for debugging.

 If the section name is not NULL, only one section is dumped.

</member>
        <member name="M:apsdk.configuration.IConfiguration.DumpToLog(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Dumps the configuration for debugging.

 If the section name is not NULL, only one section is dumped.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetDateTimeParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.APDateTime)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetDateTimeParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.APDateTime*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,apsdk.APDateTime)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetDoubleParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Double)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetDoubleParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Double*,System.Double)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetFloatParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Single)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetFloatParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Single*,System.Single)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetUInt64Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetUInt64Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64*,System.UInt64)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetInt64Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int64)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetInt64Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int64*,System.Int64)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetUInt32Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetUInt32Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32*,System.UInt32)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetInt32Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetInt32Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32*,System.Int32)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetUInt16Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt16)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetUInt16Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt16*,System.UInt16)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetInt16Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int16)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetInt16Parameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int16*,System.Int16)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetUIntParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetUIntParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32*,System.UInt32)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetIntParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetIntParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32*,System.Int32)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetBoolParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetBoolParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean*,System.Boolean)">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetStringListParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerService">
 Retrieves the parameter value.

 The returned value list is always cleared even if the value
 could not be found in the configuration.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetStringParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetStringParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Retrieves the parameter value.

 Returns the default value if the value could not be found in the
 configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetStringParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Retrieves the parameter value.

 If the value is too large to fit into the value buffer parameter,
 the value is treated as "not found" since it violates the expected
 maximum size condition.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetStringParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!S">
 Retrieves the parameter value.

 If the value could not be found in the configuration,
 the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetStringParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Retrieves the parameter value.

 If the value could not be found in the configuration and the
 default value is not NULL, the default value is used.

 Returns false if the value could not be found in the configuration.

</member>
        <member name="M:apsdk.configuration.IConfiguration.IsEmpty">
 Determines if this configuration is empty.

 Returns true if the configurations is empty.

 The default implementation just checks for the section count being zero

</member>
        <member name="M:apsdk.configuration.IConfiguration.IsEqual(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*)">
 Determines if this configuration has the same content as another.

 Returns true if the configurations are equal.

 The default implementation walks the sections/parameters and compares them.

</member>
        <member name="M:apsdk.configuration.IConfiguration.IsParameterEqual(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*)">
 Determines if this configuration's parameter is equal to another.

 Returns true if the parameters are equal.

 The default implementation fetches the parameter and directly compares it.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetStringParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Retrieves the parameter value.

 Returns false if the value could not be found.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetStringParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt64)">
 Retrieves the parameter value.

 If the value is too large to fit into the value buffer parameter,
 the value is treated as "not found" since it violates the expected
 maximum size condition.

 Returns false if the value could not be found.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetParameter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.Parameter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Retrieves a parameter.

 Returns false if the parameter could not be found.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetParameterCount(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Returns the number of parameters.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetParameterNames(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsS">
Returns a collection of all the parameter names startwith parameterNameStartWith

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetParameterNames(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a collection of all the parameter names.

</member>
        <member name="M:apsdk.configuration.IConfiguration.DoesParameterExist(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Determines if a parameter exists.

 Returns false if the parameter does not exist.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetSectionCount">
Returns the number of sections.

</member>
        <member name="M:apsdk.configuration.IConfiguration.GetSectionNames(std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns a collection of all the section names.

</member>
        <member name="M:apsdk.configuration.IConfiguration.DoesSectionExist(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Determines if a section exists.

 Returns false if the section does not exist.

</member>
        <member name="M:apsdk.configuration.IConfiguration.op_Assign(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need an assignment operator.

</member>
        <member name="M:apsdk.configuration.IConfiguration.#ctor(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
We don't need a copy constructor.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Dispose">
The destructor is virtual.

</member>
        <member name="M:apsdk.configuration.IConfiguration.IsEqual_Base(apsdk.configuration.IConfiguration!System.Runtime.CompilerServices.IsConst*)">
A simple implementation of IsEqual that works for most implementations.
Walks the sections/parameters and does a direct comparison.

</member>
        <member name="M:apsdk.configuration.IConfiguration.IsParameterEqual_Base(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*)">
A simple implementation of IsParameterEqual that works for most implementations.
Uses GetParameter and does a direct comparison.

</member>
        <member name="M:apsdk.configuration.IConfiguration.#ctor">
This is an interface with a protected constructor.

</member>
        <member name="D:apsdk.configuration.IConfiguration.StringValues">
String value collection.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.op_Equality(apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compares this parameter to another.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.IsEqual(apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*)">
 Compares this parameter to another.

 Returns false if the parameters are not equal.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.IsEqual(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.ParameterFlags)">
Compare this parameter to parameter values.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.IsEqual(apsdk.configuration.IConfiguration.ParameterFlags)">
Compare this parameter to parameter flags.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.IsEqual(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare this parameter to parameter values.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.IsEqual(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Compare this parameter to parameter values.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.op_Assign(apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
The assignment operator.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.#ctor(apsdk.configuration.IConfiguration.Parameter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
The copy constructor.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,apsdk.configuration.IConfiguration.ParameterFlags)">
The full constructor.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,apsdk.configuration.IConfiguration.ParameterFlags)">
The full constructor.

</member>
        <member name="M:apsdk.configuration.IConfiguration.Parameter.#ctor">
The default constructor.

</member>
        <member name="F:apsdk.configuration.IConfiguration.Parameter.m_flags">
The parameter flags.

</member>
        <member name="F:apsdk.configuration.IConfiguration.Parameter.m_value">
The parameter string value.

</member>
        <member name="T:apsdk.configuration.IConfiguration.Parameter">
Parameter descriptor.

</member>
        <member name="F:PARAM_NO_OVERRIDE">
 The parameter should not be overridden.

 Parameters with this flag are preserved from being overriden
 by the override (BRS) configurations or "Override" methods.

</member>
        <member name="F:PARAM_DEFAULT">
The default parameter flag.

</member>
        <member name="T:apsdk.configuration.IConfiguration.ParameterFlags">
Parameter flags.

</member>
        <member name="D:apsdk.configuration.IConfiguration.ParameterNames">
Parameter names.

</member>
        <member name="D:apsdk.configuration.IConfiguration.SectionNames">
Section names.

</member>
        <member name="T:apsdk.configuration.ConfigurationMap">
 The configuration interface.

 All the configuration information may be accessed via this interface
 by using parameter or section access methods.

 A configuration is divided into any number of sections, each section
 may have any number of parameters (name value pairs).

 A configuration section is qualified by its name. A section name is
 unique within a configuration.

 A parameter is qualified by the section name and the parameter name.
 A parameter name is unique within a section.


The configuration map.

</member>
        <member name="M:Microsoft.Search.Autopilot.TypeConversionUtility.ConvertAPDateTimeToDateTime(apsdk.APDateTime)">
            <summary>
Converts an APDateTime to a system DateTime.
</summary>
            <param name="value">
The APDateTime to convert.
</param>
            <returns>
The converted system DateTime.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.TypeConversionUtility.ConvertDateTimeToAPDateTime(System.DateTime)">
            <summary>
Converts a system DateTime to an APDateTime.
</summary>
            <param name="value">
The system DateTime to convert.
</param>
            <returns>
The converted APDateTime.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.TypeConversionUtility.ConvertCharStringToManagedString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary>
Converts a C style string to a managed string.
</summary>
            <param name="value">
The C style string to convert.
</param>
            <param name="length">
The length of the string.
</param>
            <returns>
The converted system string.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.TypeConversionUtility.ConvertCharStringToManagedString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Converts a C style string to a managed string.
</summary>
            <param name="value">
The C style string to convert.
</param>
            <returns>
The converted system string.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.TypeConversionUtility.ConvertStandardStringToManagedString(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>
Converts a standard string to a managed string.
</summary>
            <param name="value">
The string to convert.
</param>
            <returns>
The converted system string.
</returns>
        </member>
        <member name="M:Microsoft.Search.Autopilot.TypeConversionUtility.MarshalString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Marshals a system string over to an ANSI standard string.
</summary>
            <param name="value">
The string to marshal.
</param>
            <param name="convertedString">
The standard string that will hold the converted contents.
</param>
        </member>
        <member name="T:Microsoft.Search.Autopilot.TypeConversionUtility">
            <summary>
Utility class that contains methods to aid in converting
between managed and native types.
</summary>
        </member>
    </members>
</doc>